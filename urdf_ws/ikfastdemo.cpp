/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004b generated on 2025-07-09 15:21:09.133611
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004b);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.03) // 5D IK has some crazy degenerate cases, but can rely on jacobian refinment to make better, just need good starting point
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

template <typename T> struct ComplexLess
{
    bool operator()(const complex<T>& lhs, const complex<T>& rhs) const
    {
        if (real(lhs) < real(rhs)) {
            return true;
        }
        if (real(lhs) > real(rhs)) {
            return false;
        }
        return imag(lhs) < imag(rhs);
    }
};

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76,x77,x78,x79,x80,x81;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKsin(j[4]);
x6=IKcos(j[4]);
x7=IKsin(j[0]);
x8=IKsin(j[3]);
x9=IKcos(j[3]);
x10=IKcos(j[6]);
x11=IKsin(j[6]);
x12=IKcos(j[5]);
x13=IKsin(j[5]);
x14=((0.335)*x1);
x15=((1.8e-7)*x5);
x16=((0.05035)*x6);
x17=((1.0)*x12);
x18=((1.0)*x8);
x19=((1.0)*x13);
x20=((1.0)*x5);
x21=((1.0)*x1);
x22=((0.15)*x4);
x23=((1.11e-6)*x3);
x24=((1.0)*x9);
x25=((1.0)*x4);
x26=((1.0)*x6);
x27=((1.8e-7)*x6);
x28=((0.15)*x2);
x29=((0.05035)*x5);
x30=((1.11e-6)*x1);
x31=((0.335)*x3);
x32=((1.0)*x3);
x33=(x0*x3);
x34=(x0*x8);
x35=(x2*x7);
x36=((-0.05035)*x6);
x37=((-0.05035)*x5);
x38=(x5*x9);
x39=((-1.0)*x6);
x40=((-1.8e-7)*x6);
x41=(x4*x7);
x42=((-1.0)*x5);
x43=(x7*x8);
x44=((-1.8e-7)*x5);
x45=((-1.0)*x9);
x46=(x0*x1);
x47=(x0*x2);
x48=(x3*x7);
x49=(x0*x18);
x50=((((-1.0)*x21*x4))+((x2*x32)));
x51=(((x2*x21))+((x25*x3)));
x52=((-1.0)*x51);
x53=(x5*x50);
x54=(x50*x6);
x55=(((x2*x33))+(((-1.0)*x0*x21*x4)));
x56=(((x3*x35))+(((-1.0)*x21*x41)));
x57=(x52*x9);
x58=(x51*x9);
x59=(x51*x8);
x60=((1.0)*x56);
x61=(((x21*x47))+((x25*x33)));
x62=(x55*x8);
x63=(((x21*x35))+((x25*x48)));
x64=(x56*x9);
x65=(x55*x9);
x66=(x38*x52);
x67=(x6*x63);
x68=(x6*x61);
x69=(x5*x61);
x70=(x43+x65);
x71=((((-1.0)*x49))+x64);
x72=((((-1.0)*x34))+x64);
x73=((((-1.0)*x18*x7))+(((-1.0)*x24*x55)));
x74=(((x45*x56))+x49);
x75=(x5*x70);
x76=(x5*x71);
x77=(x54+x66);
x78=(((x39*x58))+((x42*x50)));
x79=(x75+x68);
x80=(((x39*x74))+((x42*x63)));
x81=(((x39*(((((-1.0)*x43))+((x45*x55))))))+((x42*x61)));
eerot[0]=(((x11*(((((-1.0)*x24*x7))+x62))))+((x10*((((x13*x81))+((x12*x79)))))));
eerot[1]=(((x10*((x62+((x45*x7))))))+((x11*(((((-1.0)*x17*x79))+(((-1.0)*x19*x81)))))));
eerot[2]=(((x12*((x69+((x6*x73))))))+((x13*x79)));
IkReal x82=(x0*x4);
eetrans[0]=((0.08492)+((x12*((((x27*x61))+((x15*x70))))))+((x5*((((x28*x46))+((x22*x33))))))+((x13*((((x16*x61))+((x29*x70))))))+((x5*(((((-1.11e-6)*x43))+(((-1.11e-6)*x65))))))+(((-0.21066117)*x46))+((x6*(((((-0.15)*x43))+(((-0.15)*x65))))))+((x13*((((x40*x73))+((x44*x61))))))+(((0.17676784)*x33))+((x14*x47))+((x6*(((((-1.0)*x30*x47))+(((-1.0)*x23*x82))))))+(((-0.0005)*x7))+((x12*((((x29*x61))+((x16*x73))))))+((x31*x82)));
eerot[3]=(((x11*(((((-1.0)*x56*x8))+((x0*x45))))))+((x10*(((((-1.0)*x17*((x76+x67))))+(((-1.0)*x19*x80)))))));
eerot[4]=(((x11*((((x13*x80))+((x12*((((x5*x72))+x67))))))))+((x10*(((((-1.0)*x18*x56))+(((-1.0)*x0*x24)))))));
eerot[5]=((((-1.0)*x12*((((x26*((x49+(((-1.0)*x24*x56))))))+((x20*x63))))))+((x13*((((x39*x63))+((x42*x72)))))));
IkReal x83=(x1*x7);
eetrans[1]=((-3.0e-5)+(((-1.0)*x31*x41))+((x13*((((x15*x63))+((x27*x74))))))+(((0.21066117)*x83))+(((-1.0)*x14*x35))+((x6*(((((-0.15)*x34))+(((0.15)*x64))))))+((x5*(((((1.11e-6)*x64))+(((-1.11e-6)*x34))))))+(((-0.0005)*x0))+(((-0.17676784)*x48))+((x13*(((((-1.0)*x16*x63))+(((-1.0)*x29*x71))))))+((x6*((((x23*x41))+((x30*x35))))))+((x12*((((x37*x63))+((x36*x74))))))+((x5*(((((-1.0)*x22*x48))+(((-1.0)*x28*x83))))))+((x12*((((x40*x63))+((x44*x71)))))));
eerot[6]=(((x11*x59))+(((-1.0)*x10*((((x17*x77))+((x19*(((((-1.0)*x20*x50))+(((-1.0)*x24*x51*x6)))))))))));
eerot[7]=(((x11*((((x12*x77))+((x13*x78))))))+((x10*x59)));
eerot[8]=(((x13*(((((-1.0)*x20*x57))+(((-1.0)*x26*x50))))))+((x12*x78)));
IkReal x84=((1.0)*x28);
IkReal x85=((1.0)*x2);
IkReal x86=((1.0)*x4);
eetrans[2]=((0.2789)+((x6*x9*(((((-1.0)*x1*x84))+(((-1.0)*x22*x3))))))+((x12*((((x40*x50))+(((-1.8e-7)*x66))))))+((x13*((((x27*x58))+((x15*x50))))))+((x38*(((((-1.0)*x23*x86))+(((-1.0)*x30*x85))))))+((x13*((((x37*x57))+((x36*x50))))))+(((0.21066117)*x3))+((x14*x4))+((x12*(((((-1.0)*x29*x50))+(((-1.0)*x16*x58))))))+(((-1.0)*x31*x85))+((x6*((((x2*x23))+(((-1.0)*x30*x86))))))+((x5*(((((-1.0)*x3*x84))+((x1*x22))))))+(((0.17676784)*x1)));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API const int* GetFreeIndices() { static const int freeindices[] = {6}; return freeindices; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1;  _ij6[0] = -1; _ij6[1] = -1; _nj6 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j6=pfree[0]; cj6=cos(pfree[0]); sj6=sin(pfree[0]), htj6=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((-0.08492)+px+(((-0.05035)*r02)));
new_r10=((-1.0)*r10);
new_r11=((-1.0)*r11);
new_r12=((-1.0)*r12);
new_py=((-3.0e-5)+(((-1.0)*py))+(((0.05035)*r12)));
new_r20=((-1.0)*r20);
new_r21=((-1.0)*r21);
new_r22=((-1.0)*r22);
new_pz=((0.2789)+(((-1.0)*pz))+(((0.05035)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x87=((1.0)*px);
IkReal x88=((1.0)*pz);
IkReal x89=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x89))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x88)));
rxp0_2=((((-1.0)*r10*x87))+((py*r00)));
rxp1_0=((((-1.0)*r21*x89))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x88)));
rxp1_2=((((-1.0)*r11*x87))+((py*r01)));
rxp2_0=((((-1.0)*r22*x89))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x88))+((px*r22)));
rxp2_2=((((-1.0)*r12*x87))+((py*r02)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x90=((0.3)*npz);
IkReal x91=((1.0)*pp);
IkReal x92=((0.0005)*r22);
IkReal x93=(cj6*rxp0_2);
IkReal x94=((2.0)*rxp2_2);
IkReal x95=(rxp1_2*sj6);
IkReal x96=((1.34)*npz);
IkReal x97=((-0.201)+(((-1.0)*x96)));
IkReal x98=((0.002)*r22);
IkReal x99=(cj6*r21);
IkReal x100=(npy*sj6);
IkReal x101=(cj6*npx);
IkReal x102=(r20*sj6);
IkReal x103=((0.15)*x102);
IkReal x104=((0.15)*x99);
IkReal x105=((1.0)*x95);
IkReal x106=((0.001)*r21*sj6);
IkReal x107=((3.6e-7)*x102);
IkReal x108=((3.6e-7)*x99);
IkReal x109=((0.001)*cj6*r20);
IkReal x110=((1.0)*x93);
IkReal x111=((-0.201)+x96);
IkReal x112=((1.86e-6)*x99);
IkReal x113=((1.86e-6)*x102);
IkReal x114=((4.0)*x95);
IkReal x115=((4.0)*x93);
IkReal x116=((2.58e-6)*x102);
IkReal x117=((2.58e-6)*x99);
IkReal x118=((0.6)*x100);
IkReal x119=((0.6)*x101);
IkReal x120=(x92+x95);
IkReal x121=(x91+x90);
IkReal x122=((1.08e-7)+x118);
IkReal x123=(x93+x92);
IkReal x124=(x109+x94);
IkReal x125=(x106+x94);
IkReal x126=(x110+x92);
IkReal x127=(x105+x92);
IkReal x128=((((0.0005)*x102))+(((0.0005)*x99)));
IkReal x129=((4.824e-7)+(((2.68)*x100))+(((-2.68)*x101)));
IkReal x130=(x104+x103);
IkReal x131=(x108+x107);
IkReal x132=(x117+x116);
IkReal x133=((((-1.0)*x119))+x122+(((1.33999556)*npz)));
IkReal x134=((((-1.34000444)*npz))+(((-1.0)*x119))+x122);
IkReal x135=(x113+x112+x94);
IkReal x136=(x131+x106);
IkReal x137=(x131+x109);
IkReal x138=((-0.0590991290968304)+x90+(((0.66999814)*x101))+(((-1.0)*x91))+(((-0.66999814)*x100)));
IkReal x139=((-0.0590988878976296)+(((-1.0)*x121))+(((-0.66999742)*x101))+(((0.66999742)*x100)));
IkReal x140=((-0.0591003752968304)+(((0.67000186)*x100))+(((-0.67000186)*x101))+x90+(((-1.0)*x91)));
IkReal x141=((-0.0591006164976296)+(((-0.67000258)*x100))+(((0.67000258)*x101))+(((-1.0)*x121)));
op[0]=x138;
op[1]=x138;
op[2]=x133;
op[3]=x133;
op[4]=x139;
op[5]=x139;
op[6]=((((-1.0)*x127))+x130+x93);
op[7]=x128;
op[8]=(x124+(((-1.0)*x136)));
op[9]=0;
op[10]=((((-1.0)*x110))+x130+x120);
op[11]=x128;
op[12]=0;
op[13]=x138;
op[14]=0;
op[15]=x133;
op[16]=0;
op[17]=x139;
op[18]=x128;
op[19]=((((-1.0)*x105))+x130+x123);
op[20]=0;
op[21]=(x125+(((-1.0)*x137)));
op[22]=x128;
op[23]=((((-1.0)*x126))+x130+x95);
op[24]=x111;
op[25]=x111;
op[26]=x129;
op[27]=x129;
op[28]=x97;
op[29]=x97;
op[30]=((((-1.0)*x106))+x124+x113+x112);
op[31]=0;
op[32]=((((-1.0)*x115))+x114+x98);
op[33]=0;
op[34]=((((-1.0)*x124))+x132+x106);
op[35]=0;
op[36]=0;
op[37]=x111;
op[38]=0;
op[39]=x129;
op[40]=0;
op[41]=x97;
op[42]=0;
op[43]=((((-1.0)*x109))+x125+x113+x112);
op[44]=0;
op[45]=((((-1.0)*x115))+x114+(((-1.0)*x98)));
op[46]=0;
op[47]=((((-1.0)*x125))+x132+x109);
op[48]=x140;
op[49]=x140;
op[50]=x134;
op[51]=x134;
op[52]=x141;
op[53]=x141;
op[54]=((((-1.0)*x110))+x120+(((-1.0)*x130)));
op[55]=x128;
op[56]=((((-1.0)*x124))+x136);
op[57]=0;
op[58]=((((-1.0)*x127))+(((-1.0)*x130))+x93);
op[59]=x128;
op[60]=0;
op[61]=x140;
op[62]=0;
op[63]=x134;
op[64]=0;
op[65]=x141;
op[66]=x128;
op[67]=((((-1.0)*x126))+(((-1.0)*x130))+x95);
op[68]=0;
op[69]=((((-1.0)*x125))+x137);
op[70]=x128;
op[71]=((((-1.0)*x105))+x123+(((-1.0)*x130)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j4array[16], cj4array[16], sj4array[16], j5array[16], cj5array[16], sj5array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ij4 += 3)
{
IkReal htj4 = zeror[ij4+0], htj5 = zeror[ij4+1], htj3 = zeror[ij4+2];
if(isnan(htj4)||isnan(htj5)||isnan(htj3)){
continue;
}
j4array[numsolutions]=((2.0)*(atan(htj4)));
j5array[numsolutions]=((2.0)*(atan(htj5)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj4)){
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
}
else{
IkReal x142=htj4*htj4;
CheckValue<IkReal> x143=IKPowWithIntegerCheck(((1.0)+x142),-1);
if(!x143.valid){
continue;
}
cj4array[numsolutions]=((x143.value)*(((1.0)+(((-1.0)*x142)))));
CheckValue<IkReal> x144=IKPowWithIntegerCheck(((1.0)+(htj4*htj4)),-1);
if(!x144.valid){
continue;
}
sj4array[numsolutions]=((2.0)*htj4*(x144.value));
}
if(isinf(htj5)){
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
}
else{
IkReal x145=htj5*htj5;
CheckValue<IkReal> x146=IKPowWithIntegerCheck(((1.0)+x145),-1);
if(!x146.valid){
continue;
}
cj5array[numsolutions]=((x146.value)*(((1.0)+(((-1.0)*x145)))));
CheckValue<IkReal> x147=IKPowWithIntegerCheck(((1.0)+(htj5*htj5)),-1);
if(!x147.valid){
continue;
}
sj5array[numsolutions]=((2.0)*htj5*(x147.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x148=htj3*htj3;
CheckValue<IkReal> x149=IKPowWithIntegerCheck(((1.0)+x148),-1);
if(!x149.valid){
continue;
}
cj3array[numsolutions]=((x149.value)*(((1.0)+(((-1.0)*x148)))));
CheckValue<IkReal> x150=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x150.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x150.value));
}
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j4valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj4 = 16;
_nj5 = 1;
_nj3 = 1;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
_ij5[0] = 0; _ij5[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( !j4valid[iij4] ) { continue; }
if( IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj5array[ij4]-cj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij4]-sj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij4]-cj3array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij4]-sj3array[iij4]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j4valid[iij4]=false; _ij4[1] = iij4; _ij5[1] = 0; _ij3[1] = 0;  break; 
}
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

    j5 = j5array[ij4]; cj5 = cj5array[ij4]; sj5 = sj5array[ij4];

    j3 = j3array[ij4]; cj3 = cj3array[ij4]; sj3 = sj3array[ij4];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j0eval[2];
IkReal x151=(((cj6*r21))+((r20*sj6)));
j0eval[0]=x151;
j0eval[1]=IKsign(x151);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x152=((1.0)*cj5);
IkReal x153=(r21*sj6);
IkReal x154=(cj4*sj5);
IkReal x155=(cj6*r20);
IkReal x156=((((-1.0)*cj4*r22*x152))+(((-1.0)*sj4*x152*x153))+((x154*x155))+(((-1.0)*x153*x154))+((cj5*sj4*x155))+((r22*sj4*sj5)));
j0eval[0]=x156;
j0eval[1]=IKsign(x156);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x157=(cj4*cj5);
IkReal x158=(r21*sj6);
IkReal x159=(cj6*r20);
IkReal x160=(sj4*sj5);
IkReal x161=(((x157*x159))+((cj5*r22*sj4))+(((-1.0)*x157*x158))+((cj4*r22*sj5))+(((-1.0)*x159*x160))+((x158*x160)));
j0eval[0]=x161;
j0eval[1]=IKsign(x161);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x163 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x163)==0){
continue;
}
IkReal x162=pow(x163,-0.5);
CheckValue<IkReal> x164 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x164.valid){
continue;
}
IkReal gconst0=((-1.0)*(x164.value));
IkReal gconst1=((-1.0)*r21*x162);
IkReal gconst2=(r20*x162);
CheckValue<IkReal> x165 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x165.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x165.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
CheckValue<IkReal> x168 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x168.valid){
continue;
}
IkReal x166=((-1.0)*(x168.value));
IkReal x167=x162;
sj6=gconst1;
cj6=gconst2;
j6=x166;
IkReal gconst0=x166;
IkReal gconst1=((-1.0)*r21*x167);
IkReal gconst2=(r20*x167);
j0eval[0]=0;
j0eval[1]=0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x169=gconst1*gconst1;
IkReal x170=gconst2*gconst2;
IkReal x171=(cj5*gconst1);
IkReal x172=(cj3*cj4);
IkReal x173=(sj4*sj5);
IkReal x174=((1.0)*sj4);
IkReal x175=(gconst2*r00);
IkReal x176=(cj3*cj5);
IkReal x177=((1.0)*sj5);
IkReal x178=((1.0)*cj5);
IkReal x179=(gconst2*r10);
IkReal x180=((1.0)*cj3*gconst1);
CheckValue<IkReal> x181=IKPowWithIntegerCheck(IKsign((((r21*(((((-1.0)*cj4*gconst1*x177))+(((-1.0)*x171*x174))))))+((r20*((((cj5*gconst2*sj4))+((cj4*gconst2*sj5))))))+((r22*(((((-1.0)*cj4*x170*x178))+((x169*x173))+(((-1.0)*cj4*x169*x178))+((x170*x173)))))))),-1);
if(!x181.valid){
continue;
}
CheckValue<IkReal> x182 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x173*x180))+(((-1.0)*x172*x178*x179))+((cj3*x173*x179))+(((-1.0)*r12*x174*x176))+(((-1.0)*r12*x172*x177))+((r11*x171*x172)))),IkReal(((((-1.0)*x172*x175*x178))+((r01*x171*x172))+(((-1.0)*r01*x173*x180))+((cj3*x173*x175))+(((-1.0)*r02*x174*x176))+(((-1.0)*r02*x172*x177)))),IKFAST_ATAN2_MAGTHRESH);
if(!x182.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x181.value)))+(x182.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x183=IKcos(j0);
IkReal x184=IKsin(j0);
IkReal x185=((1.0)*cj5);
IkReal x186=(gconst1*r11);
IkReal x187=((1.8e-7)*gconst2);
IkReal x188=(cj5*gconst2);
IkReal x189=(r02*sj5);
IkReal x190=(gconst1*r01);
IkReal x191=(r12*sj5);
IkReal x192=(cj4*gconst2);
IkReal x193=((1.0)*sj5);
IkReal x194=(cj5*r02);
IkReal x195=(gconst2*sj4*sj5);
IkReal x196=(r10*x183);
IkReal x197=((1.0)*x184);
IkReal x198=(sj4*x183);
IkReal x199=(cj4*x184);
IkReal x200=((1.11e-6)*x183);
IkReal x201=((1.11e-6)*x184);
IkReal x202=(r00*x184);
IkReal x203=((0.15)*gconst2*sj5);
IkReal x204=(sj4*x184);
IkReal x205=(cj4*x183);
IkReal x206=((0.15)*x183);
IkReal x207=((0.15)*x184);
evalcond[0]=(((gconst2*r11*x183))+(((-1.0)*gconst2*r01*x197))+((gconst1*x196))+(((-1.0)*gconst1*r00*x197))+(((-1.0)*cj3)));
evalcond[1]=(((x194*x204))+((x189*x199))+((r00*x188*x199))+((x195*x196))+(((-1.0)*x191*x205))+((sj5*x190*x204))+(((-1.0)*gconst2*sj4*x193*x202))+(((-1.0)*x185*x192*x196))+(((-1.0)*r12*x185*x198))+(((-1.0)*x185*x190*x199))+(((-1.0)*x186*x193*x198))+((cj5*x186*x205)));
evalcond[2]=(((sj5*x190*x199))+sj3+(((-1.0)*r12*x185*x205))+(((-1.0)*sj4*x189*x197))+((sj4*x188*x196))+(((-1.0)*x186*x193*x205))+((x194*x199))+((x191*x198))+((cj5*x190*x204))+(((-1.0)*x192*x193*x202))+((sj5*x192*x196))+(((-1.0)*x185*x186*x198))+(((-1.0)*gconst2*sj4*x185*x202)));
evalcond[3]=((-0.0005)+(((-1.0)*x189*x201))+((x187*x202))+((x196*x203))+((x194*x207))+(((-1.0)*cj5*x186*x200))+(((1.8e-7)*x183*x186))+(((-1.0)*x202*x203))+(((-1.0)*x187*x196))+((x191*x200))+(((1.11e-6)*x188*x196))+(((-1.0)*sj5*x186*x206))+(((-1.0)*cj5*r12*x206))+((sj5*x190*x207))+((cj5*x190*x201))+(((-1.0)*px*x197))+(((-1.8e-7)*x184*x190))+(((-1.0)*r00*x188*x201))+((py*x183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((((0.417840349323147)*gconst1*r21*sj5))+(((0.783037727200315)*cj0*gconst2*r00*sj4*sj5))+(((2.33742605134422)*py*sj0))+(((-3.09201858499129e-6)*cj5*gconst2*r20))+(((-0.783037727200315)*cj0*gconst1*r01*sj4*sj5))+(((-2.78560232882098)*pz))+(((0.783037727200315)*cj0*cj4*cj5*gconst1*r01))+(((-0.783037727200315)*cj5*r12*sj0*sj4))+(((-4.2073668924196e-7)*cj0*gconst2*r00))+(((-0.783037727200315)*cj0*cj5*r02*sj4))+(((-0.350613907701634)*cj5*r12*sj0))+(((-5.01408419187776e-7)*gconst1*r21))+(((0.933176780155028)*cj4*cj5*gconst2*r20))+(((-2.59454291699209e-6)*cj0*cj5*gconst1*r01))+(((2.59454291699209e-6)*cj0*r02*sj5))+(((0.783037727200315)*cj4*cj5*gconst1*r11*sj0))+(((-0.783037727200315)*gconst1*r11*sj0*sj4*sj5))+(((2.33742605134422)*cj0*px))+(((-0.783037727200315)*cj0*cj4*cj5*gconst2*r00))+(((-0.783037727200315)*cj0*cj4*r02*sj5))+(((3.09201858499129e-6)*cj5*gconst1*r21))+(((2.59454291699209e-6)*cj0*cj5*gconst2*r00))+(((0.933176780155028)*gconst1*r21*sj4*sj5))+(((0.350613907701634)*cj0*gconst2*r00*sj5))+(((-2.59454291699209e-6)*cj5*gconst1*r11*sj0))+(((-0.933176780155028)*gconst2*r20*sj4*sj5))+(((2.59454291699209e-6)*cj5*gconst2*r10*sj0))+(((0.933176780155028)*cj4*r22*sj5))+(((-0.783037727200315)*cj4*r12*sj0*sj5))+(((-0.933176780155028)*cj4*cj5*gconst1*r21))+(((4.2073668924196e-7)*cj0*gconst1*r01))+(((0.933176780155028)*cj5*r22*sj4))+(((-0.783037727200315)*cj4*cj5*gconst2*r10*sj0))+(((0.417840349323147)*cj5*r22))+(((-3.09201858499129e-6)*r22*sj5))+(((0.350613907701634)*gconst2*r10*sj0*sj5))+(((2.59454291699209e-6)*r12*sj0*sj5))+(((-4.2073668924196e-7)*gconst2*r10*sj0))+(((5.01408419187776e-7)*gconst2*r20))+(((0.783037727200315)*gconst2*r10*sj0*sj4*sj5))+(((4.2073668924196e-7)*gconst1*r11*sj0))+(((-0.417840349323147)*gconst2*r20*sj5))+(((-0.350613907701634)*gconst1*r11*sj0*sj5))+(((-0.350613907701634)*cj0*gconst1*r01*sj5))+(((-0.350613907701634)*cj0*cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.933176780155028)*cj0*gconst2*r00*sj4*sj5))+(((0.417840349323147)*cj0*gconst1*r01*sj5))+(((-0.783037727200315)*gconst2*r20*sj4*sj5))+(((-0.933176780155028)*cj0*cj4*cj5*gconst1*r01))+(((4.2073668924196e-7)*gconst2*r20))+(((-3.09201858499129e-6)*cj0*cj5*gconst2*r00))+(((-0.933176780155028)*cj4*cj5*gconst1*r11*sj0))+(((3.09201858499129e-6)*cj5*gconst1*r11*sj0))+(((0.783037727200315)*cj4*r22*sj5))+(((3.09201858499129e-6)*cj0*cj5*gconst1*r01))+(((0.933176780155028)*cj0*cj4*cj5*gconst2*r00))+(((0.350613907701634)*gconst1*r21*sj5))+(((0.783037727200315)*cj4*cj5*gconst2*r20))+(((-2.33742605134422)*pz))+(((0.933176780155028)*cj5*r12*sj0*sj4))+(((-3.09201858499129e-6)*r12*sj0*sj5))+(((0.350613907701634)*cj5*r22))+(((0.933176780155028)*cj0*cj4*r02*sj5))+(((5.01408419187776e-7)*cj0*gconst2*r00))+(((-5.01408419187776e-7)*cj0*gconst1*r01))+(((-2.59454291699209e-6)*r22*sj5))+(((0.933176780155028)*cj0*gconst1*r01*sj4*sj5))+(((0.783037727200315)*gconst1*r21*sj4*sj5))+(((0.933176780155028)*cj4*r12*sj0*sj5))+(((5.01408419187776e-7)*gconst2*r10*sj0))+(((-2.59454291699209e-6)*cj5*gconst2*r20))+(((-3.09201858499129e-6)*cj0*r02*sj5))+(((-4.2073668924196e-7)*gconst1*r21))+(((0.417840349323147)*gconst1*r11*sj0*sj5))+(((-2.78560232882098)*py*sj0))+(((0.933176780155028)*cj0*cj5*r02*sj4))+(((-0.417840349323147)*gconst2*r10*sj0*sj5))+(((0.417840349323147)*cj0*cj5*r02))+(((-0.350613907701634)*gconst2*r20*sj5))+(((-0.933176780155028)*gconst2*r10*sj0*sj4*sj5))+(((0.417840349323147)*cj5*r12*sj0))+(((0.933176780155028)*gconst1*r11*sj0*sj4*sj5))+(((-0.783037727200315)*cj4*cj5*gconst1*r21))+(((-2.78560232882098)*cj0*px))+(((-3.09201858499129e-6)*cj5*gconst2*r10*sj0))+(((2.59454291699209e-6)*cj5*gconst1*r21))+(((-5.01408419187776e-7)*gconst1*r11*sj0))+(((0.933176780155028)*cj4*cj5*gconst2*r10*sj0))+(((0.783037727200315)*cj5*r22*sj4))+(((-0.417840349323147)*cj0*gconst2*r00*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.417840349323147)*gconst1*r21*sj5))+(((0.783037727200315)*cj0*gconst2*r00*sj4*sj5))+(((2.33742605134422)*py*sj0))+(((-3.09201858499129e-6)*cj5*gconst2*r20))+(((-0.783037727200315)*cj0*gconst1*r01*sj4*sj5))+(((-2.78560232882098)*pz))+(((0.783037727200315)*cj0*cj4*cj5*gconst1*r01))+(((-0.783037727200315)*cj5*r12*sj0*sj4))+(((-4.2073668924196e-7)*cj0*gconst2*r00))+(((-0.783037727200315)*cj0*cj5*r02*sj4))+(((-0.350613907701634)*cj5*r12*sj0))+(((-5.01408419187776e-7)*gconst1*r21))+(((0.933176780155028)*cj4*cj5*gconst2*r20))+(((-2.59454291699209e-6)*cj0*cj5*gconst1*r01))+(((2.59454291699209e-6)*cj0*r02*sj5))+(((0.783037727200315)*cj4*cj5*gconst1*r11*sj0))+(((-0.783037727200315)*gconst1*r11*sj0*sj4*sj5))+(((2.33742605134422)*cj0*px))+(((-0.783037727200315)*cj0*cj4*cj5*gconst2*r00))+(((-0.783037727200315)*cj0*cj4*r02*sj5))+(((3.09201858499129e-6)*cj5*gconst1*r21))+(((2.59454291699209e-6)*cj0*cj5*gconst2*r00))+(((0.933176780155028)*gconst1*r21*sj4*sj5))+(((0.350613907701634)*cj0*gconst2*r00*sj5))+(((-2.59454291699209e-6)*cj5*gconst1*r11*sj0))+(((-0.933176780155028)*gconst2*r20*sj4*sj5))+(((2.59454291699209e-6)*cj5*gconst2*r10*sj0))+(((0.933176780155028)*cj4*r22*sj5))+(((-0.783037727200315)*cj4*r12*sj0*sj5))+(((-0.933176780155028)*cj4*cj5*gconst1*r21))+(((4.2073668924196e-7)*cj0*gconst1*r01))+(((0.933176780155028)*cj5*r22*sj4))+(((-0.783037727200315)*cj4*cj5*gconst2*r10*sj0))+(((0.417840349323147)*cj5*r22))+(((-3.09201858499129e-6)*r22*sj5))+(((0.350613907701634)*gconst2*r10*sj0*sj5))+(((2.59454291699209e-6)*r12*sj0*sj5))+(((-4.2073668924196e-7)*gconst2*r10*sj0))+(((5.01408419187776e-7)*gconst2*r20))+(((0.783037727200315)*gconst2*r10*sj0*sj4*sj5))+(((4.2073668924196e-7)*gconst1*r11*sj0))+(((-0.417840349323147)*gconst2*r20*sj5))+(((-0.350613907701634)*gconst1*r11*sj0*sj5))+(((-0.350613907701634)*cj0*gconst1*r01*sj5))+(((-0.350613907701634)*cj0*cj5*r02))))+IKsqr(((((-0.933176780155028)*cj0*gconst2*r00*sj4*sj5))+(((0.417840349323147)*cj0*gconst1*r01*sj5))+(((-0.783037727200315)*gconst2*r20*sj4*sj5))+(((-0.933176780155028)*cj0*cj4*cj5*gconst1*r01))+(((4.2073668924196e-7)*gconst2*r20))+(((-3.09201858499129e-6)*cj0*cj5*gconst2*r00))+(((-0.933176780155028)*cj4*cj5*gconst1*r11*sj0))+(((3.09201858499129e-6)*cj5*gconst1*r11*sj0))+(((0.783037727200315)*cj4*r22*sj5))+(((3.09201858499129e-6)*cj0*cj5*gconst1*r01))+(((0.933176780155028)*cj0*cj4*cj5*gconst2*r00))+(((0.350613907701634)*gconst1*r21*sj5))+(((0.783037727200315)*cj4*cj5*gconst2*r20))+(((-2.33742605134422)*pz))+(((0.933176780155028)*cj5*r12*sj0*sj4))+(((-3.09201858499129e-6)*r12*sj0*sj5))+(((0.350613907701634)*cj5*r22))+(((0.933176780155028)*cj0*cj4*r02*sj5))+(((5.01408419187776e-7)*cj0*gconst2*r00))+(((-5.01408419187776e-7)*cj0*gconst1*r01))+(((-2.59454291699209e-6)*r22*sj5))+(((0.933176780155028)*cj0*gconst1*r01*sj4*sj5))+(((0.783037727200315)*gconst1*r21*sj4*sj5))+(((0.933176780155028)*cj4*r12*sj0*sj5))+(((5.01408419187776e-7)*gconst2*r10*sj0))+(((-2.59454291699209e-6)*cj5*gconst2*r20))+(((-3.09201858499129e-6)*cj0*r02*sj5))+(((-4.2073668924196e-7)*gconst1*r21))+(((0.417840349323147)*gconst1*r11*sj0*sj5))+(((-2.78560232882098)*py*sj0))+(((0.933176780155028)*cj0*cj5*r02*sj4))+(((-0.417840349323147)*gconst2*r10*sj0*sj5))+(((0.417840349323147)*cj0*cj5*r02))+(((-0.350613907701634)*gconst2*r20*sj5))+(((-0.933176780155028)*gconst2*r10*sj0*sj4*sj5))+(((0.417840349323147)*cj5*r12*sj0))+(((0.933176780155028)*gconst1*r11*sj0*sj4*sj5))+(((-0.783037727200315)*cj4*cj5*gconst1*r21))+(((-2.78560232882098)*cj0*px))+(((-3.09201858499129e-6)*cj5*gconst2*r10*sj0))+(((2.59454291699209e-6)*cj5*gconst1*r21))+(((-5.01408419187776e-7)*gconst1*r11*sj0))+(((0.933176780155028)*cj4*cj5*gconst2*r10*sj0))+(((0.783037727200315)*cj5*r22*sj4))+(((-0.417840349323147)*cj0*gconst2*r00*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((0.417840349323147)*gconst1*r21*sj5))+(((0.783037727200315)*cj0*gconst2*r00*sj4*sj5))+(((2.33742605134422)*py*sj0))+(((-3.09201858499129e-6)*cj5*gconst2*r20))+(((-0.783037727200315)*cj0*gconst1*r01*sj4*sj5))+(((-2.78560232882098)*pz))+(((0.783037727200315)*cj0*cj4*cj5*gconst1*r01))+(((-0.783037727200315)*cj5*r12*sj0*sj4))+(((-4.2073668924196e-7)*cj0*gconst2*r00))+(((-0.783037727200315)*cj0*cj5*r02*sj4))+(((-0.350613907701634)*cj5*r12*sj0))+(((-5.01408419187776e-7)*gconst1*r21))+(((0.933176780155028)*cj4*cj5*gconst2*r20))+(((-2.59454291699209e-6)*cj0*cj5*gconst1*r01))+(((2.59454291699209e-6)*cj0*r02*sj5))+(((0.783037727200315)*cj4*cj5*gconst1*r11*sj0))+(((-0.783037727200315)*gconst1*r11*sj0*sj4*sj5))+(((2.33742605134422)*cj0*px))+(((-0.783037727200315)*cj0*cj4*cj5*gconst2*r00))+(((-0.783037727200315)*cj0*cj4*r02*sj5))+(((3.09201858499129e-6)*cj5*gconst1*r21))+(((2.59454291699209e-6)*cj0*cj5*gconst2*r00))+(((0.933176780155028)*gconst1*r21*sj4*sj5))+(((0.350613907701634)*cj0*gconst2*r00*sj5))+(((-2.59454291699209e-6)*cj5*gconst1*r11*sj0))+(((-0.933176780155028)*gconst2*r20*sj4*sj5))+(((2.59454291699209e-6)*cj5*gconst2*r10*sj0))+(((0.933176780155028)*cj4*r22*sj5))+(((-0.783037727200315)*cj4*r12*sj0*sj5))+(((-0.933176780155028)*cj4*cj5*gconst1*r21))+(((4.2073668924196e-7)*cj0*gconst1*r01))+(((0.933176780155028)*cj5*r22*sj4))+(((-0.783037727200315)*cj4*cj5*gconst2*r10*sj0))+(((0.417840349323147)*cj5*r22))+(((-3.09201858499129e-6)*r22*sj5))+(((0.350613907701634)*gconst2*r10*sj0*sj5))+(((2.59454291699209e-6)*r12*sj0*sj5))+(((-4.2073668924196e-7)*gconst2*r10*sj0))+(((5.01408419187776e-7)*gconst2*r20))+(((0.783037727200315)*gconst2*r10*sj0*sj4*sj5))+(((4.2073668924196e-7)*gconst1*r11*sj0))+(((-0.417840349323147)*gconst2*r20*sj5))+(((-0.350613907701634)*gconst1*r11*sj0*sj5))+(((-0.350613907701634)*cj0*gconst1*r01*sj5))+(((-0.350613907701634)*cj0*cj5*r02))), ((((-0.933176780155028)*cj0*gconst2*r00*sj4*sj5))+(((0.417840349323147)*cj0*gconst1*r01*sj5))+(((-0.783037727200315)*gconst2*r20*sj4*sj5))+(((-0.933176780155028)*cj0*cj4*cj5*gconst1*r01))+(((4.2073668924196e-7)*gconst2*r20))+(((-3.09201858499129e-6)*cj0*cj5*gconst2*r00))+(((-0.933176780155028)*cj4*cj5*gconst1*r11*sj0))+(((3.09201858499129e-6)*cj5*gconst1*r11*sj0))+(((0.783037727200315)*cj4*r22*sj5))+(((3.09201858499129e-6)*cj0*cj5*gconst1*r01))+(((0.933176780155028)*cj0*cj4*cj5*gconst2*r00))+(((0.350613907701634)*gconst1*r21*sj5))+(((0.783037727200315)*cj4*cj5*gconst2*r20))+(((-2.33742605134422)*pz))+(((0.933176780155028)*cj5*r12*sj0*sj4))+(((-3.09201858499129e-6)*r12*sj0*sj5))+(((0.350613907701634)*cj5*r22))+(((0.933176780155028)*cj0*cj4*r02*sj5))+(((5.01408419187776e-7)*cj0*gconst2*r00))+(((-5.01408419187776e-7)*cj0*gconst1*r01))+(((-2.59454291699209e-6)*r22*sj5))+(((0.933176780155028)*cj0*gconst1*r01*sj4*sj5))+(((0.783037727200315)*gconst1*r21*sj4*sj5))+(((0.933176780155028)*cj4*r12*sj0*sj5))+(((5.01408419187776e-7)*gconst2*r10*sj0))+(((-2.59454291699209e-6)*cj5*gconst2*r20))+(((-3.09201858499129e-6)*cj0*r02*sj5))+(((-4.2073668924196e-7)*gconst1*r21))+(((0.417840349323147)*gconst1*r11*sj0*sj5))+(((-2.78560232882098)*py*sj0))+(((0.933176780155028)*cj0*cj5*r02*sj4))+(((-0.417840349323147)*gconst2*r10*sj0*sj5))+(((0.417840349323147)*cj0*cj5*r02))+(((-0.350613907701634)*gconst2*r20*sj5))+(((-0.933176780155028)*gconst2*r10*sj0*sj4*sj5))+(((0.417840349323147)*cj5*r12*sj0))+(((0.933176780155028)*gconst1*r11*sj0*sj4*sj5))+(((-0.783037727200315)*cj4*cj5*gconst1*r21))+(((-2.78560232882098)*cj0*px))+(((-3.09201858499129e-6)*cj5*gconst2*r10*sj0))+(((2.59454291699209e-6)*cj5*gconst1*r21))+(((-5.01408419187776e-7)*gconst1*r11*sj0))+(((0.933176780155028)*cj4*cj5*gconst2*r10*sj0))+(((0.783037727200315)*cj5*r22*sj4))+(((-0.417840349323147)*cj0*gconst2*r00*sj5))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x208=IKsin(j1);
IkReal x209=IKcos(j1);
IkReal x210=((0.15)*sj5);
IkReal x211=(cj5*gconst1);
IkReal x212=(cj0*r01);
IkReal x213=(cj5*r12);
IkReal x214=(cj3*sj0);
IkReal x215=((1.8e-7)*gconst1);
IkReal x216=(r12*sj5);
IkReal x217=((1.11e-6)*sj3);
IkReal x218=(gconst1*r21);
IkReal x219=((1.0)*pz);
IkReal x220=((1.0)*py);
IkReal x221=((0.335)*sj4);
IkReal x222=((0.335)*gconst2);
IkReal x223=(r11*sj0);
IkReal x224=(gconst2*r20);
IkReal x225=(cj3*r21);
IkReal x226=((0.335)*cj4);
IkReal x227=(gconst1*sj5);
IkReal x228=(cj0*r02);
IkReal x229=((1.11e-6)*sj5);
IkReal x230=((0.15)*cj5);
IkReal x231=(cj3*r22);
IkReal x232=(cj5*r22);
IkReal x233=((1.11e-6)*cj3);
IkReal x234=((1.8e-7)*sj3);
IkReal x235=(r22*sj5);
IkReal x236=((1.8e-7)*cj3);
IkReal x237=(cj4*r20);
IkReal x238=((1.11e-6)*cj5);
IkReal x239=((1.11e-6)*sj0);
IkReal x240=(gconst1*sj3);
IkReal x241=((0.15)*sj0);
IkReal x242=((0.335)*gconst1);
IkReal x243=(cj0*gconst2*r00);
IkReal x244=(sj0*x221);
IkReal x245=((0.21066117)*x208);
IkReal x246=(sj0*x226);
IkReal x247=(cj5*gconst2*r10);
IkReal x248=((0.17676784)*x209);
IkReal x249=((0.17676784)*x208);
IkReal x250=(gconst2*r10*sj5);
IkReal x251=((1.8e-7)*gconst2*r10);
IkReal x252=((0.21066117)*x209);
IkReal x253=((1.0)*cj0*px);
IkReal x254=(gconst2*r10*sj0);
evalcond[0]=((((1.11e-6)*r21*x211))+(((-1.0)*x224*x238))+((x210*x218))+(((-1.0)*sj5*x221*x224))+((x226*x235))+(((-1.0)*r21*x211*x226))+((sj5*x218*x221))+(((1.8e-7)*x224))+((x221*x232))+((cj5*x222*x237))+(((-1.0)*x245))+(((-1.0)*x248))+(((-1.0)*x219))+(((-1.0)*r21*x215))+(((-1.0)*r22*x229))+((r22*x230))+(((-1.0)*x210*x224)));
evalcond[1]=((((-1.0)*x211*x212*x226))+((cj4*cj5*r10*sj0*x222))+(((1.8e-7)*x243))+(((-1.0)*x210*x254))+(((-1.0)*x215*x223))+((cj0*cj4*cj5*r00*x222))+((x212*x221*x227))+(((-1.0)*x211*x223*x226))+((x228*x230))+(((-1.0)*sj5*x221*x243))+(((-1.0)*x216*x239))+(((-1.0)*sj0*x220))+(((-1.0)*x244*x250))+(((-1.0)*x228*x229))+((x221*x223*x227))+((x216*x246))+((sj5*x226*x228))+((sj0*x251))+((gconst1*x210*x223))+x249+(((-1.0)*x210*x243))+(((-1.0)*x238*x254))+(((-1.0)*x238*x243))+((cj5*x221*x228))+(((-1.0)*x212*x215))+(((1.11e-6)*x211*x223))+((x213*x241))+((x213*x244))+(((1.11e-6)*x211*x212))+(((-1.0)*x253))+(((-1.0)*x252))+((gconst1*x210*x212)));
evalcond[2]=((((-1.0)*r22*sj3*x230))+((cj5*x217*x224))+(((-1.0)*cj0*r00*x242))+(((-1.0)*x224*x234))+((r21*sj3*x215))+((x217*x235))+((sj3*x245))+((sj3*x248))+(((-1.0)*sj3*x210*x218))+(((-1.0)*x222*x223))+(((-1.0)*x212*x222))+((pz*sj3))+(((-1.0)*r10*sj0*x242))+(((-1.0)*r21*x211*x217))+((sj3*x210*x224)));
evalcond[3]=(((sj3*x228*x230))+(((-1.0)*cj5*x217*x243))+(((-1.0)*sj0*x216*x217))+(((-1.0)*sj3*x215*x223))+(((-1.0)*sj5*x217*x228))+((x210*x212*x240))+((x234*x243))+((x211*x217*x223))+((sj3*x249))+((x211*x212*x217))+(((-1.0)*r21*x222))+(((-1.0)*sj3*x212*x215))+(((-1.0)*sj3*x210*x243))+(((-1.0)*sj3*x253))+(((-1.0)*sj3*x252))+(((-1.0)*sj0*x217*x247))+((sj3*x213*x241))+(((-1.0)*sj0*sj3*x220))+((x210*x223*x240))+((x234*x254))+(((-1.0)*r20*x242))+(((-1.0)*sj3*x210*x254)));
evalcond[4]=((((-1.0)*x211*x212*x221))+((sj5*x221*x228))+(((-1.0)*x215*x225))+((cj3*x210*x218))+(((-1.0)*cj5*x224*x233))+(((-1.0)*cj3*x210*x224))+(((-1.0)*cj3*x219))+((cj0*cj4*r00*sj5*x222))+((x244*x247))+((x216*x244))+((x230*x231))+((cj4*r10*sj0*sj5*x222))+(((-1.0)*cj3*x248))+(((-1.0)*cj3*x245))+(((-1.0)*cj5*x226*x228))+(((-1.0)*x213*x246))+((x224*x236))+(((-1.0)*x223*x226*x227))+(((-1.0)*x212*x226*x227))+(((-1.0)*x229*x231))+(((-1.0)*x211*x221*x223))+((cj5*x221*x243))+(((1.11e-6)*x211*x225)));
evalcond[5]=((((-1.0)*r11*x214*x215))+((cj3*x228*x230))+(((-1.0)*cj3*x212*x215))+(((-1.0)*sj5*x222*x237))+(((-1.11e-6)*x214*x216))+(((-1.0)*x214*x220))+((r21*x211*x221))+(((-1.0)*cj5*x221*x224))+(((0.15)*x213*x214))+((x236*x243))+((x214*x251))+((x226*x232))+((sj5*x218*x226))+(((-1.0)*cj3*x210*x243))+(((-1.0)*x221*x235))+((x211*x212*x233))+((cj3*gconst1*x210*x212))+(((-1.0)*gconst2*r10*x210*x214))+(((-1.0)*gconst2*r10*x214*x238))+(((1.11e-6)*r11*x211*x214))+(((-1.0)*cj3*x252))+(((-1.0)*cj3*x253))+((gconst1*r11*x210*x214))+(((-1.0)*cj3*x228*x229))+((cj3*x249))+(((-1.0)*cj5*x233*x243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
CheckValue<IkReal> x257 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x257.valid){
continue;
}
IkReal x255=((-1.0)*(x257.value));
IkReal x256=x162;
sj6=gconst1;
cj6=gconst2;
j6=x255;
IkReal gconst0=x255;
IkReal gconst1=((-1.0)*r21*x256);
IkReal gconst2=(r20*x256);
IkReal x258=r22*r22;
IkReal x259=(cj0*r12);
IkReal x260=(r02*sj0);
CheckValue<IkReal> x265=IKPowWithIntegerCheck(((-1.0)+x258),-1);
if(!x265.valid){
continue;
}
IkReal x261=x265.value;
if((((1.0)+(((-1.0)*x258)))) < -0.00001)
continue;
IkReal x262=IKsqrt(((1.0)+(((-1.0)*x258))));
IkReal x263=(cj1*x261*x262);
IkReal x264=(sj1*x261*x262);
j2eval[0]=sj3;
j2eval[1]=((IKabs((((x260*x264))+(((-1.0)*x259*x264)))))+(IKabs((((x259*x263))+(((-1.0)*x260*x263))))));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
CheckValue<IkReal> x268 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x268.valid){
continue;
}
IkReal x266=((-1.0)*(x268.value));
IkReal x267=x162;
sj6=gconst1;
cj6=gconst2;
j6=x266;
IkReal gconst0=x266;
IkReal gconst1=((-1.0)*r21*x267);
IkReal gconst2=(r20*x267);
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
CheckValue<IkReal> x271 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x271.valid){
continue;
}
IkReal x269=((-1.0)*(x271.value));
IkReal x270=x162;
sj6=gconst1;
cj6=gconst2;
j6=x269;
IkReal gconst0=x269;
IkReal gconst1=((-1.0)*r21*x270);
IkReal gconst2=(r20*x270);
IkReal x272=(cj3*sj3);
j2eval[0]=x272;
j2eval[1]=IKsign(x272);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x273=(cj1*cj4);
IkReal x274=(sj1*sj4);
IkReal x275=(gconst2*r20);
IkReal x276=((1.0)*cj5);
IkReal x277=(cj1*sj4);
IkReal x278=(gconst1*r21);
IkReal x279=((1.0)*sj5);
IkReal x280=(cj4*sj1);
IkReal x281=(cj5*r22);
IkReal x282=(r22*x279);
if( IKabs(((((-1.0)*x275*x279*x280))+((sj5*x278*x280))+((cj5*x274*x278))+((sj5*x275*x277))+(((-1.0)*r22*x276*x277))+((cj5*x273*x278))+(((-1.0)*x273*x275*x276))+(((-1.0)*x273*x282))+((x280*x281))+(((-1.0)*x274*x275*x276))+(((-1.0)*x277*x278*x279))+(((-1.0)*x274*x282)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*x277*x278))+(((-1.0)*x277*x282))+((sj5*x274*x278))+(((-1.0)*x276*x278*x280))+((x274*x281))+((cj5*x275*x280))+(((-1.0)*x275*x276*x277))+((sj5*x273*x278))+((x273*x281))+(((-1.0)*x273*x275*x279))+((r22*sj5*x280))+(((-1.0)*x274*x275*x279)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x275*x279*x280))+((sj5*x278*x280))+((cj5*x274*x278))+((sj5*x275*x277))+(((-1.0)*r22*x276*x277))+((cj5*x273*x278))+(((-1.0)*x273*x275*x276))+(((-1.0)*x273*x282))+((x280*x281))+(((-1.0)*x274*x275*x276))+(((-1.0)*x277*x278*x279))+(((-1.0)*x274*x282))))+IKsqr((((cj5*x277*x278))+(((-1.0)*x277*x282))+((sj5*x274*x278))+(((-1.0)*x276*x278*x280))+((x274*x281))+((cj5*x275*x280))+(((-1.0)*x275*x276*x277))+((sj5*x273*x278))+((x273*x281))+(((-1.0)*x273*x275*x279))+((r22*sj5*x280))+(((-1.0)*x274*x275*x279))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x275*x279*x280))+((sj5*x278*x280))+((cj5*x274*x278))+((sj5*x275*x277))+(((-1.0)*r22*x276*x277))+((cj5*x273*x278))+(((-1.0)*x273*x275*x276))+(((-1.0)*x273*x282))+((x280*x281))+(((-1.0)*x274*x275*x276))+(((-1.0)*x277*x278*x279))+(((-1.0)*x274*x282))), (((cj5*x277*x278))+(((-1.0)*x277*x282))+((sj5*x274*x278))+(((-1.0)*x276*x278*x280))+((x274*x281))+((cj5*x275*x280))+(((-1.0)*x275*x276*x277))+((sj5*x273*x278))+((x273*x281))+(((-1.0)*x273*x275*x279))+((r22*sj5*x280))+(((-1.0)*x274*x275*x279))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x283=IKsin(j2);
IkReal x284=IKcos(j2);
IkReal x285=((1.11e-6)*cj5);
IkReal x286=(gconst2*r20);
IkReal x287=((1.0)*sj4);
IkReal x288=(gconst1*r21);
IkReal x289=(cj4*sj5);
IkReal x290=(gconst2*r00);
IkReal x291=(cj5*sj4);
IkReal x292=(cj0*cj5);
IkReal x293=(gconst2*r10);
IkReal x294=(gconst1*r11);
IkReal x295=((1.0)*sj0);
IkReal x296=(cj0*sj5);
IkReal x297=((0.15)*sj5);
IkReal x298=(cj4*cj5);
IkReal x299=((1.0)*cj0);
IkReal x300=(sj4*sj5);
IkReal x301=((1.8e-7)*sj0);
IkReal x302=(r22*sj5);
IkReal x303=(cj5*r12*sj0);
IkReal x304=(cj0*gconst1*r01);
IkReal x305=(r02*x296);
IkReal x306=(r12*sj0*sj5);
IkReal x307=(cj4*x292);
IkReal x308=(cj1*x283);
IkReal x309=((1.0)*x284);
IkReal x310=(sj0*x297);
IkReal x311=(sj1*x283);
IkReal x312=((0.335)*x284);
IkReal x313=((1.0)*x311);
IkReal x314=(cj1*x309);
IkReal x315=(x314+x313);
evalcond[0]=((((-1.0)*sj1*x309))+(((-1.0)*x288*x298))+((r22*x289))+x308+((x286*x298))+((x288*x300))+(((-1.0)*sj5*x286*x287))+((r22*x291)));
evalcond[1]=((((-1.0)*x287*x302))+((x288*x289))+(((-1.0)*x315))+(((-1.0)*x286*x289))+(((-1.0)*cj5*x286*x287))+((r22*x298))+((x288*x291)));
evalcond[2]=(((x285*x288))+(((0.15)*cj5*r22))+(((-1.11e-6)*x302))+(((-0.21066117)*sj1))+(((-1.0)*x286*x297))+(((1.8e-7)*x286))+(((-1.8e-7)*x288))+((sj1*x312))+(((-1.0)*pz))+(((-0.17676784)*cj1))+(((-1.0)*x285*x286))+((x288*x297))+(((-0.335)*x308)));
evalcond[3]=(((cj0*r02*x289))+((sj0*x294*x300))+((r12*sj0*x291))+((x290*x307))+(((-1.0)*x294*x295*x298))+(((-1.0)*gconst1*r01*x307))+((gconst1*r01*sj4*x296))+((r12*sj0*x289))+((sj0*x293*x298))+(((-1.0)*x287*x290*x296))+(((-1.0)*x315))+((cj0*r02*x291))+(((-1.0)*sj0*sj5*x287*x293)));
evalcond[4]=(((r12*sj0*x298))+((x291*x304))+(((-1.0)*x287*x305))+(((-1.0)*x287*x306))+(((-1.0)*x289*x290*x299))+(((-1.0)*x308))+((r02*x307))+(((-1.0)*cj5*sj0*x287*x293))+(((-1.0)*x287*x290*x292))+(((-1.0)*x289*x293*x295))+((x289*x304))+((sj0*x289*x294))+((sj0*x291*x294))+((sj1*x284)));
evalcond[5]=(((x294*x310))+(((-1.0)*py*x295))+(((-1.11e-6)*x306))+(((-1.11e-6)*x305))+(((-0.21066117)*cj1))+((x285*x304))+(((0.17676784)*sj1))+(((-1.0)*x294*x301))+(((-0.15)*x290*x296))+((cj1*x312))+(((-1.0)*cj0*x285*x290))+(((0.15)*x303))+((x293*x301))+(((0.335)*x311))+(((-1.0)*x293*x310))+((sj0*x285*x294))+(((-1.8e-7)*x304))+(((1.8e-7)*cj0*x290))+(((0.15)*gconst1*r01*x296))+(((-1.0)*px*x299))+(((-1.0)*sj0*x285*x293))+(((0.15)*r02*x292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x316=(r11*sj0);
IkReal x317=(cj0*r01);
IkReal x318=(gconst2*sj1);
IkReal x319=(gconst1*sj1);
IkReal x320=(cj0*r00);
IkReal x321=(r10*sj0);
IkReal x322=((1.0)*cj1*gconst2);
IkReal x323=((1.0)*cj1*gconst1);
if( IKabs(((((-1.0)*x321*x323))+(((-1.0)*x317*x322))+(((-1.0)*x320*x323))+(((-1.0)*r20*x319))+(((-1.0)*x316*x322))+(((-1.0)*r21*x318)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x317*x318))+(((-1.0)*r20*x323))+(((-1.0)*r21*x322))+((x319*x321))+((x319*x320))+((x316*x318)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x321*x323))+(((-1.0)*x317*x322))+(((-1.0)*x320*x323))+(((-1.0)*r20*x319))+(((-1.0)*x316*x322))+(((-1.0)*r21*x318))))+IKsqr((((x317*x318))+(((-1.0)*r20*x323))+(((-1.0)*r21*x322))+((x319*x321))+((x319*x320))+((x316*x318))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x321*x323))+(((-1.0)*x317*x322))+(((-1.0)*x320*x323))+(((-1.0)*r20*x319))+(((-1.0)*x316*x322))+(((-1.0)*r21*x318))), (((x317*x318))+(((-1.0)*r20*x323))+(((-1.0)*r21*x322))+((x319*x321))+((x319*x320))+((x316*x318))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x324=IKcos(j2);
IkReal x325=IKsin(j2);
IkReal x326=((1.11e-6)*cj5);
IkReal x327=(gconst2*r20);
IkReal x328=(cj0*sj5);
IkReal x329=(cj0*gconst1);
IkReal x330=(gconst2*r00);
IkReal x331=((1.0)*sj4);
IkReal x332=(sj0*sj5);
IkReal x333=(cj0*cj5);
IkReal x334=(gconst1*r21);
IkReal x335=((1.0)*sj0);
IkReal x336=(gconst2*r10);
IkReal x337=(cj5*r22);
IkReal x338=((1.0)*gconst2);
IkReal x339=((0.15)*sj5);
IkReal x340=(cj4*cj5);
IkReal x341=(gconst1*r11);
IkReal x342=((1.8e-7)*sj0);
IkReal x343=(gconst1*r01);
IkReal x344=(r22*sj5);
IkReal x345=(cj5*r12*sj0);
IkReal x346=((1.0)*x324);
IkReal x347=(cj1*x325);
IkReal x348=(sj1*x325);
IkReal x349=((0.335)*x324);
IkReal x350=((1.0)*x348);
IkReal x351=(cj1*x346);
IkReal x352=(x351+x350);
evalcond[0]=((((-1.0)*x352))+(((-1.0)*r21*x338))+(((-1.0)*gconst1*r20)));
evalcond[1]=((((-1.0)*cj0*r01*x338))+(((-1.0)*gconst1*r10*x335))+(((-1.0)*gconst2*r11*x335))+((sj1*x324))+(((-1.0)*r00*x329))+(((-1.0)*x347)));
evalcond[2]=(((x327*x340))+((sj4*sj5*x334))+(((-1.0)*x334*x340))+x347+((cj4*x344))+((sj4*x337))+(((-1.0)*sj5*x327*x331))+(((-1.0)*sj1*x346)));
evalcond[3]=(((x334*x339))+(((-0.21066117)*sj1))+(((-0.335)*x347))+(((-1.0)*x326*x327))+(((-1.0)*pz))+(((-0.17676784)*cj1))+(((-1.8e-7)*x334))+(((0.15)*x337))+(((1.8e-7)*x327))+((sj1*x349))+((x326*x334))+(((-1.0)*x327*x339))+(((-1.11e-6)*x344)));
evalcond[4]=(((cj4*x330*x333))+((r02*sj4*x333))+(((-1.0)*r01*x329*x340))+((cj4*r02*x328))+(((-1.0)*x331*x332*x336))+((sj4*x332*x341))+(((-1.0)*x352))+((sj4*x328*x343))+((cj4*r12*x332))+(((-1.0)*x328*x330*x331))+((sj4*x345))+((sj0*x336*x340))+(((-1.0)*x335*x340*x341)));
evalcond[5]=(((x336*x342))+(((-0.21066117)*cj1))+(((-1.0)*sj0*x326*x336))+(((0.335)*x348))+(((0.15)*x332*x341))+(((-1.0)*cj0*x326*x330))+(((0.17676784)*sj1))+((r01*x326*x329))+(((0.15)*r02*x333))+(((-1.0)*py*x335))+(((-1.11e-6)*r02*x328))+((cj1*x349))+(((-1.11e-6)*r12*x332))+(((-1.0)*x341*x342))+(((-0.15)*x332*x336))+(((-0.15)*x328*x330))+(((1.8e-7)*cj0*x330))+((sj0*x326*x341))+(((-1.8e-7)*r01*x329))+(((-1.0)*cj0*px))+(((0.15)*x345))+(((0.15)*x328*x343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x353=((1.0)*cj1);
IkReal x354=(cj5*sj4);
IkReal x355=(gconst1*r21);
IkReal x356=(cj4*r22);
IkReal x357=(gconst2*r20);
IkReal x358=(cj4*cj5);
IkReal x359=(sj4*sj5);
IkReal x360=(r22*sj1);
IkReal x361=(cj4*sj5);
IkReal x362=((1.0)*sj1);
IkReal x363=(sj1*x361);
if( IKabs(((((-1.0)*cj5*x356*x362))+((sj1*x354*x357))+(((-1.0)*r22*x353*x354))+((cj1*x357*x359))+((x359*x360))+(((-1.0)*x353*x355*x359))+(((-1.0)*sj5*x353*x356))+(((-1.0)*x353*x357*x358))+((x357*x363))+(((-1.0)*x355*x361*x362))+((cj1*x355*x358))+(((-1.0)*x354*x355*x362)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x354*x357))+(((-1.0)*x355*x358*x362))+((cj1*x357*x361))+((sj1*x355*x359))+((sj1*sj5*x356))+(((-1.0)*x353*x355*x361))+(((-1.0)*x357*x359*x362))+((x354*x360))+(((-1.0)*x353*x354*x355))+(((-1.0)*cj5*x353*x356))+((sj1*x357*x358))+((cj1*r22*x359)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj5*x356*x362))+((sj1*x354*x357))+(((-1.0)*r22*x353*x354))+((cj1*x357*x359))+((x359*x360))+(((-1.0)*x353*x355*x359))+(((-1.0)*sj5*x353*x356))+(((-1.0)*x353*x357*x358))+((x357*x363))+(((-1.0)*x355*x361*x362))+((cj1*x355*x358))+(((-1.0)*x354*x355*x362))))+IKsqr((((cj1*x354*x357))+(((-1.0)*x355*x358*x362))+((cj1*x357*x361))+((sj1*x355*x359))+((sj1*sj5*x356))+(((-1.0)*x353*x355*x361))+(((-1.0)*x357*x359*x362))+((x354*x360))+(((-1.0)*x353*x354*x355))+(((-1.0)*cj5*x353*x356))+((sj1*x357*x358))+((cj1*r22*x359))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj5*x356*x362))+((sj1*x354*x357))+(((-1.0)*r22*x353*x354))+((cj1*x357*x359))+((x359*x360))+(((-1.0)*x353*x355*x359))+(((-1.0)*sj5*x353*x356))+(((-1.0)*x353*x357*x358))+((x357*x363))+(((-1.0)*x355*x361*x362))+((cj1*x355*x358))+(((-1.0)*x354*x355*x362))), (((cj1*x354*x357))+(((-1.0)*x355*x358*x362))+((cj1*x357*x361))+((sj1*x355*x359))+((sj1*sj5*x356))+(((-1.0)*x353*x355*x361))+(((-1.0)*x357*x359*x362))+((x354*x360))+(((-1.0)*x353*x354*x355))+(((-1.0)*cj5*x353*x356))+((sj1*x357*x358))+((cj1*r22*x359))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x364=IKcos(j2);
IkReal x365=IKsin(j2);
IkReal x366=((1.11e-6)*cj5);
IkReal x367=(gconst2*r20);
IkReal x368=((1.0)*sj4);
IkReal x369=(gconst1*r21);
IkReal x370=(cj4*sj5);
IkReal x371=(gconst2*r00);
IkReal x372=(cj5*sj4);
IkReal x373=(cj0*cj5);
IkReal x374=(gconst2*r10);
IkReal x375=(gconst1*r11);
IkReal x376=((1.0)*sj1);
IkReal x377=((0.335)*sj1);
IkReal x378=((1.0)*sj0);
IkReal x379=(cj0*sj5);
IkReal x380=((0.15)*sj5);
IkReal x381=(cj4*cj5);
IkReal x382=((1.0)*cj0);
IkReal x383=(sj4*sj5);
IkReal x384=((1.8e-7)*sj0);
IkReal x385=(r22*sj5);
IkReal x386=(cj1*x365);
IkReal x387=(cj1*x364);
IkReal x388=(cj5*r12*sj0);
IkReal x389=(cj0*gconst1*r01);
IkReal x390=(r02*x379);
IkReal x391=(r12*sj0*sj5);
IkReal x392=(cj4*x373);
IkReal x393=(sj0*x380);
IkReal x394=(x364*x376);
evalcond[0]=((((-1.0)*x394))+(((-1.0)*x369*x381))+x386+((x367*x381))+((r22*x370))+((r22*x372))+((x369*x383))+(((-1.0)*sj5*x367*x368)));
evalcond[1]=(((r22*x381))+((x369*x372))+((x369*x370))+(((-1.0)*x367*x370))+((sj1*x365))+x387+(((-1.0)*cj5*x367*x368))+(((-1.0)*x368*x385)));
evalcond[2]=((((-1.0)*x367*x380))+(((0.15)*cj5*r22))+(((-1.8e-7)*x369))+(((-0.21066117)*sj1))+(((1.8e-7)*x367))+(((-0.335)*x386))+((x364*x377))+((x366*x369))+(((-1.0)*pz))+(((-1.0)*x366*x367))+(((-0.17676784)*cj1))+((x369*x380))+(((-1.11e-6)*x385)));
evalcond[3]=(((x371*x392))+((gconst1*r01*sj4*x379))+(((-1.0)*x368*x371*x379))+(((-1.0)*gconst1*r01*x392))+(((-1.0)*x387))+((sj0*x374*x381))+(((-1.0)*x375*x378*x381))+(((-1.0)*sj0*sj5*x368*x374))+((r12*sj0*x372))+((r12*sj0*x370))+((sj0*x375*x383))+((cj0*r02*x370))+((cj0*r02*x372))+(((-1.0)*x365*x376)));
evalcond[4]=((((-1.0)*x370*x374*x378))+(((-1.0)*x394))+(((-1.0)*x370*x371*x382))+((x372*x389))+(((-1.0)*x368*x391))+(((-1.0)*x368*x390))+((sj0*x372*x375))+((x370*x389))+((sj0*x370*x375))+(((-1.0)*x368*x371*x373))+x386+((r12*sj0*x381))+(((-1.0)*cj5*sj0*x368*x374))+((r02*x392)));
evalcond[5]=((((-0.15)*x371*x379))+(((-0.21066117)*cj1))+(((-1.0)*sj0*x366*x374))+(((0.17676784)*sj1))+(((-1.0)*x375*x384))+((x375*x393))+((x374*x384))+((x365*x377))+((sj0*x366*x375))+(((-1.8e-7)*x389))+(((-1.0)*px*x382))+(((-1.0)*cj0*x366*x371))+(((0.15)*r02*x373))+(((-1.11e-6)*x390))+(((-1.11e-6)*x391))+(((0.15)*x388))+(((-1.0)*x374*x393))+(((0.15)*gconst1*r01*x379))+((x366*x389))+(((-1.0)*py*x378))+(((1.8e-7)*cj0*x371))+(((0.335)*x387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x395=(cj1*gconst2);
IkReal x396=(cj0*r01);
IkReal x397=((1.0)*sj1);
IkReal x398=(cj1*gconst1);
IkReal x399=(r10*sj0);
IkReal x400=(cj0*r00);
IkReal x401=(r11*sj0);
if( IKabs((((gconst2*r21*sj1))+((x395*x396))+((x398*x399))+((gconst1*r20*sj1))+((x395*x401))+((x398*x400)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x398))+(((-1.0)*gconst2*x396*x397))+(((-1.0)*gconst1*x397*x400))+(((-1.0)*gconst1*x397*x399))+(((-1.0)*gconst2*x397*x401))+((r21*x395)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((gconst2*r21*sj1))+((x395*x396))+((x398*x399))+((gconst1*r20*sj1))+((x395*x401))+((x398*x400))))+IKsqr((((r20*x398))+(((-1.0)*gconst2*x396*x397))+(((-1.0)*gconst1*x397*x400))+(((-1.0)*gconst1*x397*x399))+(((-1.0)*gconst2*x397*x401))+((r21*x395))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((gconst2*r21*sj1))+((x395*x396))+((x398*x399))+((gconst1*r20*sj1))+((x395*x401))+((x398*x400))), (((r20*x398))+(((-1.0)*gconst2*x396*x397))+(((-1.0)*gconst1*x397*x400))+(((-1.0)*gconst1*x397*x399))+(((-1.0)*gconst2*x397*x401))+((r21*x395))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x402=IKsin(j2);
IkReal x403=IKcos(j2);
IkReal x404=((1.11e-6)*cj5);
IkReal x405=(gconst2*r20);
IkReal x406=(cj0*sj5);
IkReal x407=(cj0*gconst1);
IkReal x408=(gconst2*r00);
IkReal x409=((1.0)*sj4);
IkReal x410=(sj0*sj5);
IkReal x411=(cj0*cj5);
IkReal x412=(gconst1*r21);
IkReal x413=((1.0)*sj0);
IkReal x414=(gconst2*r10);
IkReal x415=((1.0)*sj1);
IkReal x416=(gconst1*r11);
IkReal x417=(cj5*r22);
IkReal x418=((0.15)*sj5);
IkReal x419=(cj4*cj5);
IkReal x420=((1.8e-7)*sj0);
IkReal x421=((1.0)*cj0);
IkReal x422=(gconst1*r01);
IkReal x423=(r22*sj5);
IkReal x424=(cj1*x402);
IkReal x425=(cj1*x403);
IkReal x426=(cj5*r12*sj0);
IkReal x427=(sj1*x402);
IkReal x428=(x403*x415);
evalcond[0]=((((-1.0)*gconst2*r21))+x427+x425+(((-1.0)*gconst1*r20)));
evalcond[1]=((((-1.0)*gconst2*r01*x421))+(((-1.0)*x428))+(((-1.0)*gconst2*r11*x413))+(((-1.0)*r00*x407))+x424+(((-1.0)*gconst1*r10*x413)));
evalcond[2]=(((sj4*sj5*x412))+((x405*x419))+(((-1.0)*x428))+((cj4*x423))+(((-1.0)*x412*x419))+x424+(((-1.0)*sj5*x405*x409))+((sj4*x417)));
evalcond[3]=((((0.15)*x417))+((x404*x412))+(((-0.335)*x424))+(((-0.21066117)*sj1))+(((1.8e-7)*x405))+(((-1.8e-7)*x412))+(((-1.0)*pz))+(((-1.0)*x404*x405))+(((-0.17676784)*cj1))+(((-1.0)*x405*x418))+((x412*x418))+(((-1.11e-6)*x423))+(((0.335)*sj1*x403)));
evalcond[4]=((((-1.0)*x425))+((cj4*r12*x410))+((sj4*x426))+(((-1.0)*x409*x410*x414))+(((-1.0)*x402*x415))+(((-1.0)*r01*x407*x419))+(((-1.0)*x413*x416*x419))+((sj0*x414*x419))+((cj4*x408*x411))+((r02*sj4*x411))+((cj4*r02*x406))+((sj4*x410*x416))+(((-1.0)*x406*x408*x409))+((sj4*x406*x422)));
evalcond[5]=((((-1.0)*x416*x420))+(((0.15)*x426))+(((-1.0)*px*x421))+(((-0.21066117)*cj1))+(((-0.15)*x406*x408))+(((-1.8e-7)*r01*x407))+(((0.15)*x410*x416))+((x414*x420))+(((0.17676784)*sj1))+((r01*x404*x407))+(((-1.11e-6)*r02*x406))+(((0.15)*r02*x411))+(((-1.0)*sj0*x404*x414))+(((0.335)*x427))+(((0.335)*x425))+(((-1.0)*cj0*x404*x408))+(((-1.11e-6)*r12*x410))+((sj0*x404*x416))+(((-1.0)*py*x413))+(((1.8e-7)*cj0*x408))+(((0.15)*x406*x422))+(((-0.15)*x410*x414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x429=(cj3*gconst1);
IkReal x430=((1.0)*cj1);
IkReal x431=(r10*sj0);
IkReal x432=(cj0*r00);
IkReal x433=(gconst2*r20);
IkReal x434=(sj3*sj5);
IkReal x435=((1.0)*sj1);
IkReal x436=(r22*sj4);
IkReal x437=(cj1*cj4);
IkReal x438=(cj3*gconst2);
IkReal x439=(r11*sj0);
IkReal x440=(cj0*r01);
IkReal x441=(gconst1*r21);
IkReal x442=(cj5*sj3*sj4);
IkReal x443=(sj1*x441);
IkReal x444=(cj5*r22*sj3);
CheckValue<IkReal> x445=IKPowWithIntegerCheck(IKsign((cj3*sj3)),-1);
if(!x445.valid){
continue;
}
CheckValue<IkReal> x446 = IKatan2WithCheck(IkReal((((cj4*x434*x443))+(((-1.0)*x430*x438*x439))+(((-1.0)*x430*x438*x440))+(((-1.0)*x429*x430*x431))+(((-1.0)*x429*x430*x432))+(((-1.0)*x434*x435*x436))+(((-1.0)*x433*x435*x442))+(((-1.0)*cj4*x433*x434*x435))+((x442*x443))+((cj4*sj1*x444)))),IkReal((((sj1*x429*x431))+((sj1*x429*x432))+((sj1*x438*x439))+(((-1.0)*x430*x433*x442))+((sj1*x438*x440))+((cj1*x441*x442))+((x434*x437*x441))+(((-1.0)*cj4*x430*x433*x434))+((x437*x444))+(((-1.0)*x430*x434*x436)))),IKFAST_ATAN2_MAGTHRESH);
if(!x446.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x445.value)))+(x446.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x447=IKcos(j2);
IkReal x448=IKsin(j2);
IkReal x449=(cj0*r00);
IkReal x450=((0.15)*sj5);
IkReal x451=((1.0)*gconst1);
IkReal x452=((1.0)*gconst2);
IkReal x453=(cj5*sj4);
IkReal x454=(cj4*sj5);
IkReal x455=(gconst1*r21);
IkReal x456=(gconst2*r20);
IkReal x457=(r12*sj0);
IkReal x458=((0.15)*cj5);
IkReal x459=(cj0*r02);
IkReal x460=((1.11e-6)*sj5);
IkReal x461=(sj4*sj5);
IkReal x462=(cj4*cj5);
IkReal x463=(r10*sj0);
IkReal x464=((1.11e-6)*cj5);
IkReal x465=(r11*sj0);
IkReal x466=((1.8e-7)*gconst2);
IkReal x467=(cj0*gconst1*r01);
IkReal x468=((1.0)*x461);
IkReal x469=(cj1*x448);
IkReal x470=(sj1*x447);
IkReal x471=(gconst1*x465);
IkReal x472=(cj5*x467);
IkReal x473=((1.0)*x469);
IkReal x474=((1.0)*cj1*x447);
IkReal x475=((1.0)*sj1*x448);
evalcond[0]=((((-1.0)*sj3*x474))+(((-1.0)*sj3*x475))+(((-1.0)*r20*x451))+(((-1.0)*r21*x452)));
evalcond[1]=((((-1.0)*sj3*x473))+(((-1.0)*cj0*r01*x452))+(((-1.0)*x451*x463))+(((-1.0)*x452*x465))+((sj3*x470))+(((-1.0)*x449*x451)));
evalcond[2]=(((x456*x462))+((x455*x461))+(((-1.0)*r21*x451*x462))+(((-1.0)*x470))+x469+(((-1.0)*r20*x452*x461))+((r22*x454))+((r22*x453)));
evalcond[3]=(((r22*x462))+((x454*x455))+((x453*x455))+(((-1.0)*r22*x468))+(((-1.0)*cj3*x474))+(((-1.0)*cj3*x475))+(((-1.0)*r20*x452*x454))+(((-1.0)*r20*x452*x453)));
evalcond[4]=(((x455*x464))+(((1.8e-7)*x456))+(((-1.8e-7)*x455))+(((-0.21066117)*sj1))+(((-1.0)*x456*x464))+(((-0.335)*x469))+(((-1.0)*pz))+(((-0.17676784)*cj1))+(((-1.0)*r22*x460))+(((-1.0)*x450*x456))+(((0.335)*x470))+((x450*x455))+((r22*x458)));
evalcond[5]=(((x454*x457))+((x454*x459))+((x461*x467))+((x453*x459))+((x453*x457))+(((-1.0)*x449*x452*x461))+((gconst2*x462*x463))+(((-1.0)*x475))+(((-1.0)*x474))+(((-1.0)*x452*x461*x463))+(((-1.0)*x451*x462*x465))+((gconst2*x449*x462))+((x461*x471))+(((-1.0)*cj0*r01*x451*x462)));
evalcond[6]=(((x453*x471))+((x454*x467))+((x454*x471))+(((-1.0)*x452*x454*x463))+((x453*x467))+((cj3*x470))+(((-1.0)*x459*x468))+(((-1.0)*x449*x452*x454))+(((-1.0)*x449*x452*x453))+(((-1.0)*x452*x453*x463))+(((-1.0)*cj3*x473))+((x459*x462))+((x457*x462))+(((-1.0)*x457*x468)));
evalcond[7]=((((0.335)*cj1*x447))+(((-0.21066117)*cj1))+(((0.335)*sj1*x448))+(((-1.8e-7)*x467))+(((-1.0)*gconst2*x449*x464))+(((0.17676784)*sj1))+((x463*x466))+(((-1.0)*gconst2*x449*x450))+(((-1.0)*x459*x460))+((x464*x471))+((x449*x466))+((x450*x467))+(((-1.0)*py*sj0))+(((-1.0)*gconst2*x450*x463))+(((-1.0)*gconst2*x463*x464))+((x458*x459))+((x464*x467))+((x450*x471))+(((-1.0)*x457*x460))+(((-1.0)*cj0*px))+(((-1.8e-7)*x471))+((x457*x458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x476=(sj3*sj4);
IkReal x477=(cj5*sj1);
IkReal x478=(cj1*gconst2);
IkReal x479=(r20*sj5);
IkReal x480=((1.0)*r21);
IkReal x481=(gconst1*sj5);
IkReal x482=(r22*sj5);
IkReal x483=(cj4*sj3);
IkReal x484=(cj1*gconst1);
IkReal x485=((1.0)*sj1);
IkReal x486=((1.0)*x483);
CheckValue<IkReal> x487=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x487.valid){
continue;
}
CheckValue<IkReal> x488 = IKatan2WithCheck(IkReal((((cj5*r21*x483*x484))+(((-1.0)*cj1*cj5*r22*x476))+((x476*x478*x479))+(((-1.0)*gconst2*sj1*x480))+(((-1.0)*cj1*x476*x480*x481))+(((-1.0)*cj1*x482*x486))+(((-1.0)*gconst1*r20*x485))+(((-1.0)*cj5*r20*x478*x486)))),IkReal(((((-1.0)*gconst2*x476*x479*x485))+((sj1*x482*x483))+((r21*sj1*x476*x481))+(((-1.0)*r20*x484))+((r22*x476*x477))+(((-1.0)*gconst1*x477*x480*x483))+((gconst2*r20*x477*x483))+(((-1.0)*x478*x480)))),IKFAST_ATAN2_MAGTHRESH);
if(!x488.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x487.value)))+(x488.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x489=IKcos(j2);
IkReal x490=IKsin(j2);
IkReal x491=(cj0*r00);
IkReal x492=((0.15)*sj5);
IkReal x493=((1.0)*gconst1);
IkReal x494=((1.0)*gconst2);
IkReal x495=(cj5*sj4);
IkReal x496=(cj4*sj5);
IkReal x497=(gconst1*r21);
IkReal x498=(gconst2*r20);
IkReal x499=(r12*sj0);
IkReal x500=((0.15)*cj5);
IkReal x501=(cj0*r02);
IkReal x502=((1.11e-6)*sj5);
IkReal x503=(sj4*sj5);
IkReal x504=(cj4*cj5);
IkReal x505=(r10*sj0);
IkReal x506=((1.11e-6)*cj5);
IkReal x507=(r11*sj0);
IkReal x508=((1.8e-7)*gconst2);
IkReal x509=(cj0*gconst1*r01);
IkReal x510=((1.0)*x503);
IkReal x511=(cj1*x490);
IkReal x512=(sj1*x489);
IkReal x513=(gconst1*x507);
IkReal x514=(cj5*x509);
IkReal x515=((1.0)*x511);
IkReal x516=((1.0)*cj1*x489);
IkReal x517=((1.0)*sj1*x490);
evalcond[0]=((((-1.0)*r21*x494))+(((-1.0)*sj3*x516))+(((-1.0)*sj3*x517))+(((-1.0)*r20*x493)));
evalcond[1]=((((-1.0)*x491*x493))+(((-1.0)*sj3*x515))+(((-1.0)*x494*x507))+(((-1.0)*x493*x505))+((sj3*x512))+(((-1.0)*cj0*r01*x494)));
evalcond[2]=((((-1.0)*r20*x494*x503))+((x497*x503))+(((-1.0)*x512))+((r22*x496))+((r22*x495))+((x498*x504))+x511+(((-1.0)*r21*x493*x504)));
evalcond[3]=((((-1.0)*r22*x510))+(((-1.0)*r20*x494*x496))+(((-1.0)*r20*x494*x495))+((x495*x497))+(((-1.0)*cj3*x517))+(((-1.0)*cj3*x516))+((x496*x497))+((r22*x504)));
evalcond[4]=((((1.8e-7)*x498))+(((-0.21066117)*sj1))+((x497*x506))+(((-0.335)*x511))+((r22*x500))+(((-1.0)*r22*x502))+(((-1.0)*pz))+(((-0.17676784)*cj1))+(((-1.8e-7)*x497))+(((0.335)*x512))+(((-1.0)*x498*x506))+((x492*x497))+(((-1.0)*x492*x498)));
evalcond[5]=(((x495*x499))+(((-1.0)*cj0*r01*x493*x504))+(((-1.0)*x494*x503*x505))+((x496*x499))+((x503*x513))+((x495*x501))+((gconst2*x504*x505))+((x496*x501))+(((-1.0)*x493*x504*x507))+((x503*x509))+(((-1.0)*x516))+(((-1.0)*x517))+((gconst2*x491*x504))+(((-1.0)*x491*x494*x503)));
evalcond[6]=((((-1.0)*x501*x510))+((x496*x513))+(((-1.0)*x491*x494*x496))+(((-1.0)*x491*x494*x495))+(((-1.0)*cj3*x515))+((x495*x509))+(((-1.0)*x494*x495*x505))+((x501*x504))+((x496*x509))+(((-1.0)*x499*x510))+((cj3*x512))+((x495*x513))+((x499*x504))+(((-1.0)*x494*x496*x505)));
evalcond[7]=((((-1.0)*gconst2*x491*x506))+((x500*x501))+(((-1.0)*x499*x502))+(((-0.21066117)*cj1))+(((-1.0)*gconst2*x491*x492))+((x492*x513))+(((0.17676784)*sj1))+((x506*x509))+((x505*x508))+(((0.335)*cj1*x489))+(((-1.0)*x501*x502))+(((-1.8e-7)*x513))+((x492*x509))+((x491*x508))+(((0.335)*sj1*x490))+(((-1.0)*py*sj0))+((x506*x513))+(((-1.0)*gconst2*x505*x506))+((x499*x500))+(((-1.0)*cj0*px))+(((-1.8e-7)*x509))+(((-1.0)*gconst2*x492*x505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x518=((1.0)*cj1);
IkReal x519=(gconst2*r21);
IkReal x520=(gconst1*sj1);
IkReal x521=(cj0*r00);
IkReal x522=(r10*sj0);
IkReal x523=(cj0*gconst2*r01);
IkReal x524=(gconst2*r11*sj0);
CheckValue<IkReal> x525=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x525.valid){
continue;
}
CheckValue<IkReal> x526 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x520))+(((-1.0)*x518*x523))+(((-1.0)*x518*x524))+(((-1.0)*gconst1*x518*x521))+(((-1.0)*gconst1*x518*x522))+(((-1.0)*sj1*x519)))),IkReal(((((-1.0)*gconst1*r20*x518))+((sj1*x524))+((sj1*x523))+(((-1.0)*x518*x519))+((x520*x522))+((x520*x521)))),IKFAST_ATAN2_MAGTHRESH);
if(!x526.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x525.value)))+(x526.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x527=IKcos(j2);
IkReal x528=IKsin(j2);
IkReal x529=(cj0*r00);
IkReal x530=((0.15)*sj5);
IkReal x531=((1.0)*gconst1);
IkReal x532=((1.0)*gconst2);
IkReal x533=(cj5*sj4);
IkReal x534=(cj4*sj5);
IkReal x535=(gconst1*r21);
IkReal x536=(gconst2*r20);
IkReal x537=(r12*sj0);
IkReal x538=((0.15)*cj5);
IkReal x539=(cj0*r02);
IkReal x540=((1.11e-6)*sj5);
IkReal x541=(sj4*sj5);
IkReal x542=(cj4*cj5);
IkReal x543=(r10*sj0);
IkReal x544=((1.11e-6)*cj5);
IkReal x545=(r11*sj0);
IkReal x546=((1.8e-7)*gconst2);
IkReal x547=(cj0*gconst1*r01);
IkReal x548=((1.0)*x541);
IkReal x549=(cj1*x528);
IkReal x550=(sj1*x527);
IkReal x551=(gconst1*x545);
IkReal x552=(cj5*x547);
IkReal x553=((1.0)*x549);
IkReal x554=((1.0)*cj1*x527);
IkReal x555=((1.0)*sj1*x528);
evalcond[0]=((((-1.0)*r21*x532))+(((-1.0)*sj3*x554))+(((-1.0)*sj3*x555))+(((-1.0)*r20*x531)));
evalcond[1]=((((-1.0)*x532*x545))+(((-1.0)*cj0*r01*x532))+(((-1.0)*x529*x531))+(((-1.0)*sj3*x553))+(((-1.0)*x531*x543))+((sj3*x550)));
evalcond[2]=((((-1.0)*r20*x532*x541))+(((-1.0)*x550))+((x536*x542))+((r22*x533))+((r22*x534))+x549+((x535*x541))+(((-1.0)*r21*x531*x542)));
evalcond[3]=((((-1.0)*r22*x548))+(((-1.0)*cj3*x555))+(((-1.0)*cj3*x554))+((r22*x542))+((x534*x535))+((x533*x535))+(((-1.0)*r20*x532*x534))+(((-1.0)*r20*x532*x533)));
evalcond[4]=((((1.8e-7)*x536))+(((-1.0)*r22*x540))+(((-1.8e-7)*x535))+(((-0.21066117)*sj1))+(((-1.0)*x530*x536))+(((-0.335)*x549))+(((-1.0)*pz))+((r22*x538))+(((-0.17676784)*cj1))+(((0.335)*x550))+((x535*x544))+(((-1.0)*x536*x544))+((x530*x535)));
evalcond[5]=(((x541*x551))+((x541*x547))+(((-1.0)*cj0*r01*x531*x542))+(((-1.0)*x554))+(((-1.0)*x555))+((gconst2*x542*x543))+(((-1.0)*x529*x532*x541))+(((-1.0)*x532*x541*x543))+((x534*x539))+((x534*x537))+(((-1.0)*x531*x542*x545))+((x533*x537))+((x533*x539))+((gconst2*x529*x542)));
evalcond[6]=(((x539*x542))+(((-1.0)*x537*x548))+(((-1.0)*x539*x548))+(((-1.0)*cj3*x553))+((x534*x551))+((x537*x542))+(((-1.0)*x529*x532*x533))+(((-1.0)*x529*x532*x534))+((x534*x547))+(((-1.0)*x532*x533*x543))+((x533*x551))+(((-1.0)*x532*x534*x543))+((x533*x547))+((cj3*x550)));
evalcond[7]=((((-1.8e-7)*x547))+(((-1.0)*x537*x540))+(((-1.0)*gconst2*x543*x544))+(((-0.21066117)*cj1))+(((0.335)*sj1*x528))+(((-1.8e-7)*x551))+(((-1.0)*x539*x540))+((x544*x547))+(((0.17676784)*sj1))+((x544*x551))+(((0.335)*cj1*x527))+((x543*x546))+((x537*x538))+(((-1.0)*gconst2*x530*x543))+(((-1.0)*py*sj0))+(((-1.0)*gconst2*x529*x530))+((x529*x546))+(((-1.0)*gconst2*x529*x544))+((x538*x539))+((x530*x547))+(((-1.0)*cj0*px))+((x530*x551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x556=(cj5*sj3);
IkReal x557=(gconst1*r01);
IkReal x558=(gconst2*r10);
IkReal x559=((1.0)*r02);
IkReal x560=((1.0)*cj4);
IkReal x561=(gconst2*r00);
IkReal x562=(sj3*sj5);
IkReal x563=(gconst1*r11);
IkReal x564=(sj4*x562);
CheckValue<IkReal> x565=IKPowWithIntegerCheck(IKsign((((gconst2*r21))+((gconst1*r20)))),-1);
if(!x565.valid){
continue;
}
CheckValue<IkReal> x566 = IKatan2WithCheck(IkReal((((x558*x564))+((cj4*x556*x563))+(((-1.0)*r12*sj4*x556))+(((-1.0)*x563*x564))+(((-1.0)*x556*x558*x560))+(((-1.0)*r12*x560*x562)))),IkReal(((((-1.0)*cj4*x559*x562))+((x561*x564))+(((-1.0)*x556*x560*x561))+(((-1.0)*sj4*x556*x559))+((cj4*x556*x557))+(((-1.0)*x557*x564)))),IKFAST_ATAN2_MAGTHRESH);
if(!x566.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x565.value)))+(x566.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x567=IKcos(j0);
IkReal x568=IKsin(j0);
IkReal x569=((1.0)*cj5);
IkReal x570=(gconst1*r11);
IkReal x571=((1.8e-7)*gconst2);
IkReal x572=(cj5*gconst2);
IkReal x573=(r02*sj5);
IkReal x574=(gconst1*r01);
IkReal x575=(r12*sj5);
IkReal x576=(cj4*gconst2);
IkReal x577=((1.0)*sj5);
IkReal x578=(cj5*r02);
IkReal x579=(gconst2*sj4*sj5);
IkReal x580=(r10*x567);
IkReal x581=((1.0)*x568);
IkReal x582=(sj4*x567);
IkReal x583=(cj4*x568);
IkReal x584=((1.11e-6)*x567);
IkReal x585=((1.11e-6)*x568);
IkReal x586=(r00*x568);
IkReal x587=((0.15)*gconst2*sj5);
IkReal x588=(sj4*x568);
IkReal x589=(cj4*x567);
IkReal x590=((0.15)*x567);
IkReal x591=((0.15)*x568);
evalcond[0]=((((-1.0)*gconst1*r00*x581))+((gconst2*r11*x567))+(((-1.0)*gconst2*r01*x581))+(((-1.0)*cj3))+((gconst1*x580)));
evalcond[1]=(((x578*x588))+((x579*x580))+(((-1.0)*x570*x577*x582))+((sj5*x574*x588))+((r00*x572*x583))+(((-1.0)*x575*x589))+(((-1.0)*x569*x574*x583))+(((-1.0)*gconst2*sj4*x577*x586))+(((-1.0)*r12*x569*x582))+(((-1.0)*x569*x576*x580))+((x573*x583))+((cj5*x570*x589)));
evalcond[2]=((((-1.0)*gconst2*sj4*x569*x586))+((x578*x583))+sj3+(((-1.0)*x570*x577*x589))+((sj5*x574*x583))+((sj5*x576*x580))+(((-1.0)*sj4*x573*x581))+(((-1.0)*x569*x570*x582))+((x575*x582))+(((-1.0)*r12*x569*x589))+((sj4*x572*x580))+(((-1.0)*x576*x577*x586))+((cj5*x574*x588)));
evalcond[3]=((-0.0005)+(((-1.8e-7)*x568*x574))+((sj5*x574*x591))+((x580*x587))+(((1.11e-6)*x572*x580))+((x578*x591))+(((-1.0)*px*x581))+(((-1.0)*x573*x585))+(((-1.0)*x586*x587))+((x575*x584))+(((-1.0)*x571*x580))+((py*x567))+(((-1.0)*r00*x572*x585))+((x571*x586))+(((-1.0)*cj5*r12*x590))+((cj5*x574*x585))+(((-1.0)*sj5*x570*x590))+(((-1.0)*cj5*x570*x584))+(((1.8e-7)*x567*x570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((((0.417840349323147)*gconst1*r21*sj5))+(((0.783037727200315)*cj0*gconst2*r00*sj4*sj5))+(((2.33742605134422)*py*sj0))+(((-3.09201858499129e-6)*cj5*gconst2*r20))+(((-0.783037727200315)*cj0*gconst1*r01*sj4*sj5))+(((-2.78560232882098)*pz))+(((0.783037727200315)*cj0*cj4*cj5*gconst1*r01))+(((-0.783037727200315)*cj5*r12*sj0*sj4))+(((-4.2073668924196e-7)*cj0*gconst2*r00))+(((-0.783037727200315)*cj0*cj5*r02*sj4))+(((-0.350613907701634)*cj5*r12*sj0))+(((-5.01408419187776e-7)*gconst1*r21))+(((0.933176780155028)*cj4*cj5*gconst2*r20))+(((-2.59454291699209e-6)*cj0*cj5*gconst1*r01))+(((2.59454291699209e-6)*cj0*r02*sj5))+(((0.783037727200315)*cj4*cj5*gconst1*r11*sj0))+(((-0.783037727200315)*gconst1*r11*sj0*sj4*sj5))+(((2.33742605134422)*cj0*px))+(((-0.783037727200315)*cj0*cj4*cj5*gconst2*r00))+(((-0.783037727200315)*cj0*cj4*r02*sj5))+(((3.09201858499129e-6)*cj5*gconst1*r21))+(((2.59454291699209e-6)*cj0*cj5*gconst2*r00))+(((0.933176780155028)*gconst1*r21*sj4*sj5))+(((0.350613907701634)*cj0*gconst2*r00*sj5))+(((-2.59454291699209e-6)*cj5*gconst1*r11*sj0))+(((-0.933176780155028)*gconst2*r20*sj4*sj5))+(((2.59454291699209e-6)*cj5*gconst2*r10*sj0))+(((0.933176780155028)*cj4*r22*sj5))+(((-0.783037727200315)*cj4*r12*sj0*sj5))+(((-0.933176780155028)*cj4*cj5*gconst1*r21))+(((4.2073668924196e-7)*cj0*gconst1*r01))+(((0.933176780155028)*cj5*r22*sj4))+(((-0.783037727200315)*cj4*cj5*gconst2*r10*sj0))+(((0.417840349323147)*cj5*r22))+(((-3.09201858499129e-6)*r22*sj5))+(((0.350613907701634)*gconst2*r10*sj0*sj5))+(((2.59454291699209e-6)*r12*sj0*sj5))+(((-4.2073668924196e-7)*gconst2*r10*sj0))+(((5.01408419187776e-7)*gconst2*r20))+(((0.783037727200315)*gconst2*r10*sj0*sj4*sj5))+(((4.2073668924196e-7)*gconst1*r11*sj0))+(((-0.417840349323147)*gconst2*r20*sj5))+(((-0.350613907701634)*gconst1*r11*sj0*sj5))+(((-0.350613907701634)*cj0*gconst1*r01*sj5))+(((-0.350613907701634)*cj0*cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.933176780155028)*cj0*gconst2*r00*sj4*sj5))+(((0.417840349323147)*cj0*gconst1*r01*sj5))+(((-0.783037727200315)*gconst2*r20*sj4*sj5))+(((-0.933176780155028)*cj0*cj4*cj5*gconst1*r01))+(((4.2073668924196e-7)*gconst2*r20))+(((-3.09201858499129e-6)*cj0*cj5*gconst2*r00))+(((-0.933176780155028)*cj4*cj5*gconst1*r11*sj0))+(((3.09201858499129e-6)*cj5*gconst1*r11*sj0))+(((0.783037727200315)*cj4*r22*sj5))+(((3.09201858499129e-6)*cj0*cj5*gconst1*r01))+(((0.933176780155028)*cj0*cj4*cj5*gconst2*r00))+(((0.350613907701634)*gconst1*r21*sj5))+(((0.783037727200315)*cj4*cj5*gconst2*r20))+(((-2.33742605134422)*pz))+(((0.933176780155028)*cj5*r12*sj0*sj4))+(((-3.09201858499129e-6)*r12*sj0*sj5))+(((0.350613907701634)*cj5*r22))+(((0.933176780155028)*cj0*cj4*r02*sj5))+(((5.01408419187776e-7)*cj0*gconst2*r00))+(((-5.01408419187776e-7)*cj0*gconst1*r01))+(((-2.59454291699209e-6)*r22*sj5))+(((0.933176780155028)*cj0*gconst1*r01*sj4*sj5))+(((0.783037727200315)*gconst1*r21*sj4*sj5))+(((0.933176780155028)*cj4*r12*sj0*sj5))+(((5.01408419187776e-7)*gconst2*r10*sj0))+(((-2.59454291699209e-6)*cj5*gconst2*r20))+(((-3.09201858499129e-6)*cj0*r02*sj5))+(((-4.2073668924196e-7)*gconst1*r21))+(((0.417840349323147)*gconst1*r11*sj0*sj5))+(((-2.78560232882098)*py*sj0))+(((0.933176780155028)*cj0*cj5*r02*sj4))+(((-0.417840349323147)*gconst2*r10*sj0*sj5))+(((0.417840349323147)*cj0*cj5*r02))+(((-0.350613907701634)*gconst2*r20*sj5))+(((-0.933176780155028)*gconst2*r10*sj0*sj4*sj5))+(((0.417840349323147)*cj5*r12*sj0))+(((0.933176780155028)*gconst1*r11*sj0*sj4*sj5))+(((-0.783037727200315)*cj4*cj5*gconst1*r21))+(((-2.78560232882098)*cj0*px))+(((-3.09201858499129e-6)*cj5*gconst2*r10*sj0))+(((2.59454291699209e-6)*cj5*gconst1*r21))+(((-5.01408419187776e-7)*gconst1*r11*sj0))+(((0.933176780155028)*cj4*cj5*gconst2*r10*sj0))+(((0.783037727200315)*cj5*r22*sj4))+(((-0.417840349323147)*cj0*gconst2*r00*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.417840349323147)*gconst1*r21*sj5))+(((0.783037727200315)*cj0*gconst2*r00*sj4*sj5))+(((2.33742605134422)*py*sj0))+(((-3.09201858499129e-6)*cj5*gconst2*r20))+(((-0.783037727200315)*cj0*gconst1*r01*sj4*sj5))+(((-2.78560232882098)*pz))+(((0.783037727200315)*cj0*cj4*cj5*gconst1*r01))+(((-0.783037727200315)*cj5*r12*sj0*sj4))+(((-4.2073668924196e-7)*cj0*gconst2*r00))+(((-0.783037727200315)*cj0*cj5*r02*sj4))+(((-0.350613907701634)*cj5*r12*sj0))+(((-5.01408419187776e-7)*gconst1*r21))+(((0.933176780155028)*cj4*cj5*gconst2*r20))+(((-2.59454291699209e-6)*cj0*cj5*gconst1*r01))+(((2.59454291699209e-6)*cj0*r02*sj5))+(((0.783037727200315)*cj4*cj5*gconst1*r11*sj0))+(((-0.783037727200315)*gconst1*r11*sj0*sj4*sj5))+(((2.33742605134422)*cj0*px))+(((-0.783037727200315)*cj0*cj4*cj5*gconst2*r00))+(((-0.783037727200315)*cj0*cj4*r02*sj5))+(((3.09201858499129e-6)*cj5*gconst1*r21))+(((2.59454291699209e-6)*cj0*cj5*gconst2*r00))+(((0.933176780155028)*gconst1*r21*sj4*sj5))+(((0.350613907701634)*cj0*gconst2*r00*sj5))+(((-2.59454291699209e-6)*cj5*gconst1*r11*sj0))+(((-0.933176780155028)*gconst2*r20*sj4*sj5))+(((2.59454291699209e-6)*cj5*gconst2*r10*sj0))+(((0.933176780155028)*cj4*r22*sj5))+(((-0.783037727200315)*cj4*r12*sj0*sj5))+(((-0.933176780155028)*cj4*cj5*gconst1*r21))+(((4.2073668924196e-7)*cj0*gconst1*r01))+(((0.933176780155028)*cj5*r22*sj4))+(((-0.783037727200315)*cj4*cj5*gconst2*r10*sj0))+(((0.417840349323147)*cj5*r22))+(((-3.09201858499129e-6)*r22*sj5))+(((0.350613907701634)*gconst2*r10*sj0*sj5))+(((2.59454291699209e-6)*r12*sj0*sj5))+(((-4.2073668924196e-7)*gconst2*r10*sj0))+(((5.01408419187776e-7)*gconst2*r20))+(((0.783037727200315)*gconst2*r10*sj0*sj4*sj5))+(((4.2073668924196e-7)*gconst1*r11*sj0))+(((-0.417840349323147)*gconst2*r20*sj5))+(((-0.350613907701634)*gconst1*r11*sj0*sj5))+(((-0.350613907701634)*cj0*gconst1*r01*sj5))+(((-0.350613907701634)*cj0*cj5*r02))))+IKsqr(((((-0.933176780155028)*cj0*gconst2*r00*sj4*sj5))+(((0.417840349323147)*cj0*gconst1*r01*sj5))+(((-0.783037727200315)*gconst2*r20*sj4*sj5))+(((-0.933176780155028)*cj0*cj4*cj5*gconst1*r01))+(((4.2073668924196e-7)*gconst2*r20))+(((-3.09201858499129e-6)*cj0*cj5*gconst2*r00))+(((-0.933176780155028)*cj4*cj5*gconst1*r11*sj0))+(((3.09201858499129e-6)*cj5*gconst1*r11*sj0))+(((0.783037727200315)*cj4*r22*sj5))+(((3.09201858499129e-6)*cj0*cj5*gconst1*r01))+(((0.933176780155028)*cj0*cj4*cj5*gconst2*r00))+(((0.350613907701634)*gconst1*r21*sj5))+(((0.783037727200315)*cj4*cj5*gconst2*r20))+(((-2.33742605134422)*pz))+(((0.933176780155028)*cj5*r12*sj0*sj4))+(((-3.09201858499129e-6)*r12*sj0*sj5))+(((0.350613907701634)*cj5*r22))+(((0.933176780155028)*cj0*cj4*r02*sj5))+(((5.01408419187776e-7)*cj0*gconst2*r00))+(((-5.01408419187776e-7)*cj0*gconst1*r01))+(((-2.59454291699209e-6)*r22*sj5))+(((0.933176780155028)*cj0*gconst1*r01*sj4*sj5))+(((0.783037727200315)*gconst1*r21*sj4*sj5))+(((0.933176780155028)*cj4*r12*sj0*sj5))+(((5.01408419187776e-7)*gconst2*r10*sj0))+(((-2.59454291699209e-6)*cj5*gconst2*r20))+(((-3.09201858499129e-6)*cj0*r02*sj5))+(((-4.2073668924196e-7)*gconst1*r21))+(((0.417840349323147)*gconst1*r11*sj0*sj5))+(((-2.78560232882098)*py*sj0))+(((0.933176780155028)*cj0*cj5*r02*sj4))+(((-0.417840349323147)*gconst2*r10*sj0*sj5))+(((0.417840349323147)*cj0*cj5*r02))+(((-0.350613907701634)*gconst2*r20*sj5))+(((-0.933176780155028)*gconst2*r10*sj0*sj4*sj5))+(((0.417840349323147)*cj5*r12*sj0))+(((0.933176780155028)*gconst1*r11*sj0*sj4*sj5))+(((-0.783037727200315)*cj4*cj5*gconst1*r21))+(((-2.78560232882098)*cj0*px))+(((-3.09201858499129e-6)*cj5*gconst2*r10*sj0))+(((2.59454291699209e-6)*cj5*gconst1*r21))+(((-5.01408419187776e-7)*gconst1*r11*sj0))+(((0.933176780155028)*cj4*cj5*gconst2*r10*sj0))+(((0.783037727200315)*cj5*r22*sj4))+(((-0.417840349323147)*cj0*gconst2*r00*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((0.417840349323147)*gconst1*r21*sj5))+(((0.783037727200315)*cj0*gconst2*r00*sj4*sj5))+(((2.33742605134422)*py*sj0))+(((-3.09201858499129e-6)*cj5*gconst2*r20))+(((-0.783037727200315)*cj0*gconst1*r01*sj4*sj5))+(((-2.78560232882098)*pz))+(((0.783037727200315)*cj0*cj4*cj5*gconst1*r01))+(((-0.783037727200315)*cj5*r12*sj0*sj4))+(((-4.2073668924196e-7)*cj0*gconst2*r00))+(((-0.783037727200315)*cj0*cj5*r02*sj4))+(((-0.350613907701634)*cj5*r12*sj0))+(((-5.01408419187776e-7)*gconst1*r21))+(((0.933176780155028)*cj4*cj5*gconst2*r20))+(((-2.59454291699209e-6)*cj0*cj5*gconst1*r01))+(((2.59454291699209e-6)*cj0*r02*sj5))+(((0.783037727200315)*cj4*cj5*gconst1*r11*sj0))+(((-0.783037727200315)*gconst1*r11*sj0*sj4*sj5))+(((2.33742605134422)*cj0*px))+(((-0.783037727200315)*cj0*cj4*cj5*gconst2*r00))+(((-0.783037727200315)*cj0*cj4*r02*sj5))+(((3.09201858499129e-6)*cj5*gconst1*r21))+(((2.59454291699209e-6)*cj0*cj5*gconst2*r00))+(((0.933176780155028)*gconst1*r21*sj4*sj5))+(((0.350613907701634)*cj0*gconst2*r00*sj5))+(((-2.59454291699209e-6)*cj5*gconst1*r11*sj0))+(((-0.933176780155028)*gconst2*r20*sj4*sj5))+(((2.59454291699209e-6)*cj5*gconst2*r10*sj0))+(((0.933176780155028)*cj4*r22*sj5))+(((-0.783037727200315)*cj4*r12*sj0*sj5))+(((-0.933176780155028)*cj4*cj5*gconst1*r21))+(((4.2073668924196e-7)*cj0*gconst1*r01))+(((0.933176780155028)*cj5*r22*sj4))+(((-0.783037727200315)*cj4*cj5*gconst2*r10*sj0))+(((0.417840349323147)*cj5*r22))+(((-3.09201858499129e-6)*r22*sj5))+(((0.350613907701634)*gconst2*r10*sj0*sj5))+(((2.59454291699209e-6)*r12*sj0*sj5))+(((-4.2073668924196e-7)*gconst2*r10*sj0))+(((5.01408419187776e-7)*gconst2*r20))+(((0.783037727200315)*gconst2*r10*sj0*sj4*sj5))+(((4.2073668924196e-7)*gconst1*r11*sj0))+(((-0.417840349323147)*gconst2*r20*sj5))+(((-0.350613907701634)*gconst1*r11*sj0*sj5))+(((-0.350613907701634)*cj0*gconst1*r01*sj5))+(((-0.350613907701634)*cj0*cj5*r02))), ((((-0.933176780155028)*cj0*gconst2*r00*sj4*sj5))+(((0.417840349323147)*cj0*gconst1*r01*sj5))+(((-0.783037727200315)*gconst2*r20*sj4*sj5))+(((-0.933176780155028)*cj0*cj4*cj5*gconst1*r01))+(((4.2073668924196e-7)*gconst2*r20))+(((-3.09201858499129e-6)*cj0*cj5*gconst2*r00))+(((-0.933176780155028)*cj4*cj5*gconst1*r11*sj0))+(((3.09201858499129e-6)*cj5*gconst1*r11*sj0))+(((0.783037727200315)*cj4*r22*sj5))+(((3.09201858499129e-6)*cj0*cj5*gconst1*r01))+(((0.933176780155028)*cj0*cj4*cj5*gconst2*r00))+(((0.350613907701634)*gconst1*r21*sj5))+(((0.783037727200315)*cj4*cj5*gconst2*r20))+(((-2.33742605134422)*pz))+(((0.933176780155028)*cj5*r12*sj0*sj4))+(((-3.09201858499129e-6)*r12*sj0*sj5))+(((0.350613907701634)*cj5*r22))+(((0.933176780155028)*cj0*cj4*r02*sj5))+(((5.01408419187776e-7)*cj0*gconst2*r00))+(((-5.01408419187776e-7)*cj0*gconst1*r01))+(((-2.59454291699209e-6)*r22*sj5))+(((0.933176780155028)*cj0*gconst1*r01*sj4*sj5))+(((0.783037727200315)*gconst1*r21*sj4*sj5))+(((0.933176780155028)*cj4*r12*sj0*sj5))+(((5.01408419187776e-7)*gconst2*r10*sj0))+(((-2.59454291699209e-6)*cj5*gconst2*r20))+(((-3.09201858499129e-6)*cj0*r02*sj5))+(((-4.2073668924196e-7)*gconst1*r21))+(((0.417840349323147)*gconst1*r11*sj0*sj5))+(((-2.78560232882098)*py*sj0))+(((0.933176780155028)*cj0*cj5*r02*sj4))+(((-0.417840349323147)*gconst2*r10*sj0*sj5))+(((0.417840349323147)*cj0*cj5*r02))+(((-0.350613907701634)*gconst2*r20*sj5))+(((-0.933176780155028)*gconst2*r10*sj0*sj4*sj5))+(((0.417840349323147)*cj5*r12*sj0))+(((0.933176780155028)*gconst1*r11*sj0*sj4*sj5))+(((-0.783037727200315)*cj4*cj5*gconst1*r21))+(((-2.78560232882098)*cj0*px))+(((-3.09201858499129e-6)*cj5*gconst2*r10*sj0))+(((2.59454291699209e-6)*cj5*gconst1*r21))+(((-5.01408419187776e-7)*gconst1*r11*sj0))+(((0.933176780155028)*cj4*cj5*gconst2*r10*sj0))+(((0.783037727200315)*cj5*r22*sj4))+(((-0.417840349323147)*cj0*gconst2*r00*sj5))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x592=IKsin(j1);
IkReal x593=IKcos(j1);
IkReal x594=((0.15)*sj5);
IkReal x595=(cj5*gconst1);
IkReal x596=(cj0*r01);
IkReal x597=(cj5*r12);
IkReal x598=(cj3*sj0);
IkReal x599=((1.8e-7)*gconst1);
IkReal x600=(r12*sj5);
IkReal x601=((1.11e-6)*sj3);
IkReal x602=(gconst1*r21);
IkReal x603=((1.0)*pz);
IkReal x604=((1.0)*py);
IkReal x605=((0.335)*sj4);
IkReal x606=((0.335)*gconst2);
IkReal x607=(r11*sj0);
IkReal x608=(gconst2*r20);
IkReal x609=(cj3*r21);
IkReal x610=((0.335)*cj4);
IkReal x611=(gconst1*sj5);
IkReal x612=(cj0*r02);
IkReal x613=((1.11e-6)*sj5);
IkReal x614=((0.15)*cj5);
IkReal x615=(cj3*r22);
IkReal x616=(cj5*r22);
IkReal x617=((1.11e-6)*cj3);
IkReal x618=((1.8e-7)*sj3);
IkReal x619=(r22*sj5);
IkReal x620=((1.8e-7)*cj3);
IkReal x621=(cj4*r20);
IkReal x622=((1.11e-6)*cj5);
IkReal x623=((1.11e-6)*sj0);
IkReal x624=(gconst1*sj3);
IkReal x625=((0.15)*sj0);
IkReal x626=((0.335)*gconst1);
IkReal x627=(cj0*gconst2*r00);
IkReal x628=(sj0*x605);
IkReal x629=((0.21066117)*x592);
IkReal x630=(sj0*x610);
IkReal x631=(cj5*gconst2*r10);
IkReal x632=((0.17676784)*x593);
IkReal x633=((0.17676784)*x592);
IkReal x634=(gconst2*r10*sj5);
IkReal x635=((1.8e-7)*gconst2*r10);
IkReal x636=((0.21066117)*x593);
IkReal x637=((1.0)*cj0*px);
IkReal x638=(gconst2*r10*sj0);
evalcond[0]=(((cj5*x606*x621))+(((-1.0)*r21*x599))+((x594*x602))+(((1.11e-6)*r21*x595))+((x605*x616))+(((-1.0)*r22*x613))+(((-1.0)*x629))+(((-1.0)*x632))+(((1.8e-7)*x608))+(((-1.0)*sj5*x605*x608))+(((-1.0)*x603))+((r22*x614))+(((-1.0)*r21*x595*x610))+((x610*x619))+((sj5*x602*x605))+(((-1.0)*x594*x608))+(((-1.0)*x608*x622)));
evalcond[1]=((((-1.0)*x612*x613))+(((-1.0)*x628*x634))+(((-1.0)*x596*x599))+(((-1.0)*x600*x623))+(((-1.0)*x622*x638))+(((1.11e-6)*x595*x607))+(((-1.0)*x622*x627))+(((-1.0)*x637))+(((-1.0)*x636))+((x605*x607*x611))+(((-1.0)*x594*x627))+(((1.11e-6)*x595*x596))+((x612*x614))+(((-1.0)*x594*x638))+(((-1.0)*x595*x596*x610))+(((-1.0)*x599*x607))+(((-1.0)*sj5*x605*x627))+(((-1.0)*sj0*x604))+((cj0*cj4*cj5*r00*x606))+((sj0*x635))+x633+(((-1.0)*x595*x607*x610))+((gconst1*x594*x607))+((cj4*cj5*r10*sj0*x606))+((x600*x630))+((cj5*x605*x612))+((gconst1*x594*x596))+((x596*x605*x611))+((x597*x625))+((x597*x628))+(((1.8e-7)*x627))+((sj5*x610*x612)));
evalcond[2]=(((sj3*x594*x608))+((r21*sj3*x599))+((cj5*x601*x608))+(((-1.0)*x596*x606))+((x601*x619))+((sj3*x632))+(((-1.0)*r21*x595*x601))+((sj3*x629))+(((-1.0)*r10*sj0*x626))+(((-1.0)*cj0*r00*x626))+(((-1.0)*sj3*x594*x602))+((pz*sj3))+(((-1.0)*x606*x607))+(((-1.0)*r22*sj3*x614))+(((-1.0)*x608*x618)));
evalcond[3]=((((-1.0)*sj3*x594*x627))+(((-1.0)*sj3*x594*x638))+(((-1.0)*sj0*x601*x631))+((sj3*x597*x625))+(((-1.0)*sj5*x601*x612))+((x618*x638))+((x618*x627))+((x595*x601*x607))+((sj3*x612*x614))+((sj3*x633))+((x595*x596*x601))+(((-1.0)*sj0*x600*x601))+((x594*x596*x624))+(((-1.0)*r20*x626))+((x594*x607*x624))+(((-1.0)*sj3*x596*x599))+(((-1.0)*sj3*x599*x607))+(((-1.0)*sj3*x636))+(((-1.0)*sj3*x637))+(((-1.0)*sj0*sj3*x604))+(((-1.0)*cj5*x601*x627))+(((-1.0)*r21*x606)));
evalcond[4]=(((cj0*cj4*r00*sj5*x606))+(((-1.0)*cj5*x610*x612))+((x628*x631))+(((-1.0)*x595*x596*x605))+((cj5*x605*x627))+(((1.11e-6)*x595*x609))+(((-1.0)*x607*x610*x611))+((sj5*x605*x612))+(((-1.0)*cj3*x603))+(((-1.0)*x595*x605*x607))+(((-1.0)*x599*x609))+(((-1.0)*x596*x610*x611))+((x608*x620))+(((-1.0)*cj5*x608*x617))+((x614*x615))+((cj3*x594*x602))+(((-1.0)*cj3*x594*x608))+(((-1.0)*x613*x615))+((cj4*r10*sj0*sj5*x606))+((x600*x628))+(((-1.0)*cj3*x629))+(((-1.0)*x597*x630))+(((-1.0)*cj3*x632)));
evalcond[5]=(((cj3*x633))+(((1.11e-6)*r11*x595*x598))+((gconst1*r11*x594*x598))+(((-1.0)*gconst2*r10*x598*x622))+((cj3*x612*x614))+(((-1.0)*cj3*x612*x613))+(((-1.0)*cj5*x605*x608))+(((-1.0)*cj3*x594*x627))+(((-1.0)*sj5*x606*x621))+(((-1.0)*x605*x619))+((x595*x596*x617))+(((-1.0)*r11*x598*x599))+(((-1.0)*x598*x604))+((x598*x635))+((cj3*gconst1*x594*x596))+(((-1.0)*gconst2*r10*x594*x598))+(((-1.0)*cj3*x596*x599))+(((0.15)*x597*x598))+(((-1.11e-6)*x598*x600))+((x610*x616))+((sj5*x602*x610))+((r21*x595*x605))+(((-1.0)*cj5*x617*x627))+(((-1.0)*cj3*x636))+(((-1.0)*cj3*x637))+((x620*x627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
CheckValue<IkReal> x641 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x641.valid){
continue;
}
IkReal x639=((-1.0)*(x641.value));
IkReal x640=x162;
sj6=gconst1;
cj6=gconst2;
j6=x639;
IkReal gconst0=x639;
IkReal gconst1=((-1.0)*r21*x640);
IkReal gconst2=(r20*x640);
IkReal x642=r22*r22;
IkReal x643=(cj0*r12);
IkReal x644=(r02*sj0);
CheckValue<IkReal> x649=IKPowWithIntegerCheck(((-1.0)+x642),-1);
if(!x649.valid){
continue;
}
IkReal x645=x649.value;
if((((1.0)+(((-1.0)*x642)))) < -0.00001)
continue;
IkReal x646=IKsqrt(((1.0)+(((-1.0)*x642))));
IkReal x647=(cj1*x645*x646);
IkReal x648=(sj1*x645*x646);
j2eval[0]=sj3;
j2eval[1]=((IKabs((((x643*x647))+(((-1.0)*x644*x647)))))+(IKabs((((x644*x648))+(((-1.0)*x643*x648))))));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
CheckValue<IkReal> x652 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x652.valid){
continue;
}
IkReal x650=((-1.0)*(x652.value));
IkReal x651=x162;
sj6=gconst1;
cj6=gconst2;
j6=x650;
IkReal gconst0=x650;
IkReal gconst1=((-1.0)*r21*x651);
IkReal gconst2=(r20*x651);
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
CheckValue<IkReal> x655 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x655.valid){
continue;
}
IkReal x653=((-1.0)*(x655.value));
IkReal x654=x162;
sj6=gconst1;
cj6=gconst2;
j6=x653;
IkReal gconst0=x653;
IkReal gconst1=((-1.0)*r21*x654);
IkReal gconst2=(r20*x654);
IkReal x656=(cj3*sj3);
j2eval[0]=x656;
j2eval[1]=IKsign(x656);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x657=(cj1*cj4);
IkReal x658=(sj1*sj4);
IkReal x659=(gconst2*r20);
IkReal x660=((1.0)*cj5);
IkReal x661=(cj1*sj4);
IkReal x662=(gconst1*r21);
IkReal x663=((1.0)*sj5);
IkReal x664=(cj4*sj1);
IkReal x665=(cj5*r22);
IkReal x666=(r22*x663);
if( IKabs(((((-1.0)*x657*x659*x660))+(((-1.0)*x658*x659*x660))+((x664*x665))+((sj5*x659*x661))+(((-1.0)*r22*x660*x661))+(((-1.0)*x661*x662*x663))+(((-1.0)*x658*x666))+(((-1.0)*x657*x666))+(((-1.0)*x659*x663*x664))+((sj5*x662*x664))+((cj5*x658*x662))+((cj5*x657*x662)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*sj5*x664))+(((-1.0)*x657*x659*x663))+(((-1.0)*x658*x659*x663))+((x657*x665))+(((-1.0)*x661*x666))+((sj5*x657*x662))+(((-1.0)*x659*x660*x661))+(((-1.0)*x660*x662*x664))+((x658*x665))+((cj5*x659*x664))+((sj5*x658*x662))+((cj5*x661*x662)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x657*x659*x660))+(((-1.0)*x658*x659*x660))+((x664*x665))+((sj5*x659*x661))+(((-1.0)*r22*x660*x661))+(((-1.0)*x661*x662*x663))+(((-1.0)*x658*x666))+(((-1.0)*x657*x666))+(((-1.0)*x659*x663*x664))+((sj5*x662*x664))+((cj5*x658*x662))+((cj5*x657*x662))))+IKsqr((((r22*sj5*x664))+(((-1.0)*x657*x659*x663))+(((-1.0)*x658*x659*x663))+((x657*x665))+(((-1.0)*x661*x666))+((sj5*x657*x662))+(((-1.0)*x659*x660*x661))+(((-1.0)*x660*x662*x664))+((x658*x665))+((cj5*x659*x664))+((sj5*x658*x662))+((cj5*x661*x662))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x657*x659*x660))+(((-1.0)*x658*x659*x660))+((x664*x665))+((sj5*x659*x661))+(((-1.0)*r22*x660*x661))+(((-1.0)*x661*x662*x663))+(((-1.0)*x658*x666))+(((-1.0)*x657*x666))+(((-1.0)*x659*x663*x664))+((sj5*x662*x664))+((cj5*x658*x662))+((cj5*x657*x662))), (((r22*sj5*x664))+(((-1.0)*x657*x659*x663))+(((-1.0)*x658*x659*x663))+((x657*x665))+(((-1.0)*x661*x666))+((sj5*x657*x662))+(((-1.0)*x659*x660*x661))+(((-1.0)*x660*x662*x664))+((x658*x665))+((cj5*x659*x664))+((sj5*x658*x662))+((cj5*x661*x662))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x667=IKsin(j2);
IkReal x668=IKcos(j2);
IkReal x669=((1.11e-6)*cj5);
IkReal x670=(gconst2*r20);
IkReal x671=((1.0)*sj4);
IkReal x672=(gconst1*r21);
IkReal x673=(cj4*sj5);
IkReal x674=(gconst2*r00);
IkReal x675=(cj5*sj4);
IkReal x676=(cj0*cj5);
IkReal x677=(gconst2*r10);
IkReal x678=(gconst1*r11);
IkReal x679=((1.0)*sj0);
IkReal x680=(cj0*sj5);
IkReal x681=((0.15)*sj5);
IkReal x682=(cj4*cj5);
IkReal x683=((1.0)*cj0);
IkReal x684=(sj4*sj5);
IkReal x685=((1.8e-7)*sj0);
IkReal x686=(r22*sj5);
IkReal x687=(cj5*r12*sj0);
IkReal x688=(cj0*gconst1*r01);
IkReal x689=(r02*x680);
IkReal x690=(r12*sj0*sj5);
IkReal x691=(cj4*x676);
IkReal x692=(cj1*x667);
IkReal x693=((1.0)*x668);
IkReal x694=(sj0*x681);
IkReal x695=(sj1*x667);
IkReal x696=((0.335)*x668);
IkReal x697=((1.0)*x695);
IkReal x698=(cj1*x693);
IkReal x699=(x697+x698);
evalcond[0]=((((-1.0)*sj1*x693))+(((-1.0)*x672*x682))+(((-1.0)*sj5*x670*x671))+((r22*x673))+((r22*x675))+((x672*x684))+x692+((x670*x682)));
evalcond[1]=(((x672*x675))+((x672*x673))+((r22*x682))+(((-1.0)*cj5*x670*x671))+(((-1.0)*x670*x673))+(((-1.0)*x699))+(((-1.0)*x671*x686)));
evalcond[2]=((((0.15)*cj5*r22))+(((-1.0)*x670*x681))+(((-0.21066117)*sj1))+((sj1*x696))+(((-1.8e-7)*x672))+(((-0.335)*x692))+((x669*x672))+(((-1.0)*pz))+(((-0.17676784)*cj1))+(((-1.0)*x669*x670))+((x672*x681))+(((1.8e-7)*x670))+(((-1.11e-6)*x686)));
evalcond[3]=(((sj0*x678*x684))+((gconst1*r01*sj4*x680))+((cj0*r02*x673))+((cj0*r02*x675))+(((-1.0)*gconst1*r01*x691))+(((-1.0)*x671*x674*x680))+((r12*sj0*x675))+((r12*sj0*x673))+((sj0*x677*x682))+(((-1.0)*sj0*sj5*x671*x677))+(((-1.0)*x699))+(((-1.0)*x678*x679*x682))+((x674*x691)));
evalcond[4]=((((-1.0)*x673*x677*x679))+((sj0*x673*x678))+((sj1*x668))+(((-1.0)*x671*x674*x676))+((r02*x691))+(((-1.0)*x671*x690))+(((-1.0)*cj5*sj0*x671*x677))+((x673*x688))+(((-1.0)*x673*x674*x683))+((x675*x688))+((r12*sj0*x682))+(((-1.0)*x692))+(((-1.0)*x671*x689))+((sj0*x675*x678)));
evalcond[5]=(((x669*x688))+(((-0.21066117)*cj1))+((cj1*x696))+(((0.17676784)*sj1))+(((-1.0)*sj0*x669*x677))+((x677*x685))+(((-1.0)*py*x679))+(((-1.8e-7)*x688))+(((0.15)*gconst1*r01*x680))+(((0.15)*x687))+(((-1.11e-6)*x690))+(((-1.0)*x678*x685))+(((-0.15)*x674*x680))+(((-1.0)*x677*x694))+(((0.335)*x695))+(((-1.0)*px*x683))+((sj0*x669*x678))+(((0.15)*r02*x676))+(((1.8e-7)*cj0*x674))+(((-1.0)*cj0*x669*x674))+(((-1.11e-6)*x689))+((x678*x694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x700=(r11*sj0);
IkReal x701=(cj0*r01);
IkReal x702=(gconst2*sj1);
IkReal x703=(gconst1*sj1);
IkReal x704=(cj0*r00);
IkReal x705=(r10*sj0);
IkReal x706=((1.0)*cj1*gconst2);
IkReal x707=((1.0)*cj1*gconst1);
if( IKabs(((((-1.0)*r21*x702))+(((-1.0)*r20*x703))+(((-1.0)*x704*x707))+(((-1.0)*x705*x707))+(((-1.0)*x701*x706))+(((-1.0)*x700*x706)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x701*x702))+((x700*x702))+((x703*x704))+((x703*x705))+(((-1.0)*r21*x706))+(((-1.0)*r20*x707)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x702))+(((-1.0)*r20*x703))+(((-1.0)*x704*x707))+(((-1.0)*x705*x707))+(((-1.0)*x701*x706))+(((-1.0)*x700*x706))))+IKsqr((((x701*x702))+((x700*x702))+((x703*x704))+((x703*x705))+(((-1.0)*r21*x706))+(((-1.0)*r20*x707))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r21*x702))+(((-1.0)*r20*x703))+(((-1.0)*x704*x707))+(((-1.0)*x705*x707))+(((-1.0)*x701*x706))+(((-1.0)*x700*x706))), (((x701*x702))+((x700*x702))+((x703*x704))+((x703*x705))+(((-1.0)*r21*x706))+(((-1.0)*r20*x707))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x708=IKcos(j2);
IkReal x709=IKsin(j2);
IkReal x710=((1.11e-6)*cj5);
IkReal x711=(gconst2*r20);
IkReal x712=(cj0*sj5);
IkReal x713=(cj0*gconst1);
IkReal x714=(gconst2*r00);
IkReal x715=((1.0)*sj4);
IkReal x716=(sj0*sj5);
IkReal x717=(cj0*cj5);
IkReal x718=(gconst1*r21);
IkReal x719=((1.0)*sj0);
IkReal x720=(gconst2*r10);
IkReal x721=(cj5*r22);
IkReal x722=((1.0)*gconst2);
IkReal x723=((0.15)*sj5);
IkReal x724=(cj4*cj5);
IkReal x725=(gconst1*r11);
IkReal x726=((1.8e-7)*sj0);
IkReal x727=(gconst1*r01);
IkReal x728=(r22*sj5);
IkReal x729=(cj5*r12*sj0);
IkReal x730=((1.0)*x708);
IkReal x731=(cj1*x709);
IkReal x732=(sj1*x709);
IkReal x733=((0.335)*x708);
IkReal x734=((1.0)*x732);
IkReal x735=(cj1*x730);
IkReal x736=(x735+x734);
evalcond[0]=((((-1.0)*x736))+(((-1.0)*r21*x722))+(((-1.0)*gconst1*r20)));
evalcond[1]=((((-1.0)*gconst1*r10*x719))+(((-1.0)*r00*x713))+(((-1.0)*gconst2*r11*x719))+(((-1.0)*x731))+((sj1*x708))+(((-1.0)*cj0*r01*x722)));
evalcond[2]=(((cj4*x728))+(((-1.0)*sj5*x711*x715))+((x711*x724))+(((-1.0)*sj1*x730))+((sj4*sj5*x718))+x731+((sj4*x721))+(((-1.0)*x718*x724)));
evalcond[3]=((((-0.335)*x731))+(((-1.11e-6)*x728))+(((-0.21066117)*sj1))+(((-1.0)*x710*x711))+(((-1.8e-7)*x718))+((x710*x718))+(((-1.0)*pz))+(((1.8e-7)*x711))+(((-0.17676784)*cj1))+((x718*x723))+((sj1*x733))+(((0.15)*x721))+(((-1.0)*x711*x723)));
evalcond[4]=(((sj0*x720*x724))+(((-1.0)*x719*x724*x725))+((cj4*r12*x716))+((sj4*x716*x725))+((cj4*x714*x717))+((sj4*x712*x727))+((cj4*r02*x712))+(((-1.0)*x736))+((r02*sj4*x717))+(((-1.0)*x712*x714*x715))+(((-1.0)*r01*x713*x724))+(((-1.0)*x715*x716*x720))+((sj4*x729)));
evalcond[5]=(((x720*x726))+(((0.335)*x732))+(((-0.21066117)*cj1))+((r01*x710*x713))+(((0.15)*r02*x717))+(((0.17676784)*sj1))+(((-1.0)*sj0*x710*x720))+(((-1.0)*cj0*x710*x714))+((sj0*x710*x725))+(((-1.11e-6)*r12*x716))+(((-1.0)*x725*x726))+(((0.15)*x716*x725))+(((-1.8e-7)*r01*x713))+(((0.15)*x712*x727))+(((-0.15)*x712*x714))+(((-1.11e-6)*r02*x712))+(((-0.15)*x716*x720))+(((0.15)*x729))+(((-1.0)*cj0*px))+(((-1.0)*py*x719))+((cj1*x733))+(((1.8e-7)*cj0*x714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x737=((1.0)*cj1);
IkReal x738=(cj5*sj4);
IkReal x739=(gconst1*r21);
IkReal x740=(cj4*r22);
IkReal x741=(gconst2*r20);
IkReal x742=(cj4*cj5);
IkReal x743=(sj4*sj5);
IkReal x744=(r22*sj1);
IkReal x745=(cj4*sj5);
IkReal x746=((1.0)*sj1);
IkReal x747=(sj1*x745);
if( IKabs(((((-1.0)*sj5*x737*x740))+(((-1.0)*x737*x741*x742))+((cj1*x741*x743))+(((-1.0)*x737*x739*x743))+(((-1.0)*x738*x739*x746))+((x741*x747))+(((-1.0)*r22*x737*x738))+((x743*x744))+((cj1*x739*x742))+((sj1*x738*x741))+(((-1.0)*x739*x745*x746))+(((-1.0)*cj5*x740*x746)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*sj5*x740))+((x738*x744))+(((-1.0)*x741*x743*x746))+((sj1*x741*x742))+((cj1*x741*x745))+(((-1.0)*x737*x739*x745))+(((-1.0)*cj5*x737*x740))+(((-1.0)*x739*x742*x746))+((sj1*x739*x743))+(((-1.0)*x737*x738*x739))+((cj1*x738*x741))+((cj1*r22*x743)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj5*x737*x740))+(((-1.0)*x737*x741*x742))+((cj1*x741*x743))+(((-1.0)*x737*x739*x743))+(((-1.0)*x738*x739*x746))+((x741*x747))+(((-1.0)*r22*x737*x738))+((x743*x744))+((cj1*x739*x742))+((sj1*x738*x741))+(((-1.0)*x739*x745*x746))+(((-1.0)*cj5*x740*x746))))+IKsqr((((sj1*sj5*x740))+((x738*x744))+(((-1.0)*x741*x743*x746))+((sj1*x741*x742))+((cj1*x741*x745))+(((-1.0)*x737*x739*x745))+(((-1.0)*cj5*x737*x740))+(((-1.0)*x739*x742*x746))+((sj1*x739*x743))+(((-1.0)*x737*x738*x739))+((cj1*x738*x741))+((cj1*r22*x743))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj5*x737*x740))+(((-1.0)*x737*x741*x742))+((cj1*x741*x743))+(((-1.0)*x737*x739*x743))+(((-1.0)*x738*x739*x746))+((x741*x747))+(((-1.0)*r22*x737*x738))+((x743*x744))+((cj1*x739*x742))+((sj1*x738*x741))+(((-1.0)*x739*x745*x746))+(((-1.0)*cj5*x740*x746))), (((sj1*sj5*x740))+((x738*x744))+(((-1.0)*x741*x743*x746))+((sj1*x741*x742))+((cj1*x741*x745))+(((-1.0)*x737*x739*x745))+(((-1.0)*cj5*x737*x740))+(((-1.0)*x739*x742*x746))+((sj1*x739*x743))+(((-1.0)*x737*x738*x739))+((cj1*x738*x741))+((cj1*r22*x743))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x748=IKcos(j2);
IkReal x749=IKsin(j2);
IkReal x750=((1.11e-6)*cj5);
IkReal x751=(gconst2*r20);
IkReal x752=((1.0)*sj4);
IkReal x753=(gconst1*r21);
IkReal x754=(cj4*sj5);
IkReal x755=(gconst2*r00);
IkReal x756=(cj5*sj4);
IkReal x757=(cj0*cj5);
IkReal x758=(gconst2*r10);
IkReal x759=(gconst1*r11);
IkReal x760=((1.0)*sj1);
IkReal x761=((0.335)*sj1);
IkReal x762=((1.0)*sj0);
IkReal x763=(cj0*sj5);
IkReal x764=((0.15)*sj5);
IkReal x765=(cj4*cj5);
IkReal x766=((1.0)*cj0);
IkReal x767=(sj4*sj5);
IkReal x768=((1.8e-7)*sj0);
IkReal x769=(r22*sj5);
IkReal x770=(cj1*x749);
IkReal x771=(cj1*x748);
IkReal x772=(cj5*r12*sj0);
IkReal x773=(cj0*gconst1*r01);
IkReal x774=(r02*x763);
IkReal x775=(r12*sj0*sj5);
IkReal x776=(cj4*x757);
IkReal x777=(sj0*x764);
IkReal x778=(x748*x760);
evalcond[0]=((((-1.0)*x753*x765))+((r22*x754))+((r22*x756))+((x751*x765))+x770+(((-1.0)*x778))+((x753*x767))+(((-1.0)*sj5*x751*x752)));
evalcond[1]=((((-1.0)*x752*x769))+(((-1.0)*cj5*x751*x752))+((sj1*x749))+((r22*x765))+x771+((x753*x756))+((x753*x754))+(((-1.0)*x751*x754)));
evalcond[2]=((((0.15)*cj5*r22))+(((-0.21066117)*sj1))+(((-1.0)*x750*x751))+(((-1.0)*x751*x764))+(((-0.335)*x770))+(((-1.11e-6)*x769))+(((-1.0)*pz))+(((-0.17676784)*cj1))+(((-1.8e-7)*x753))+(((1.8e-7)*x751))+((x750*x753))+((x748*x761))+((x753*x764)));
evalcond[3]=((((-1.0)*x752*x755*x763))+(((-1.0)*sj0*sj5*x752*x758))+((gconst1*r01*sj4*x763))+(((-1.0)*x759*x762*x765))+((cj0*r02*x754))+((cj0*r02*x756))+(((-1.0)*gconst1*r01*x776))+(((-1.0)*x771))+((x755*x776))+((sj0*x759*x767))+((r12*sj0*x756))+((r12*sj0*x754))+((sj0*x758*x765))+(((-1.0)*x749*x760)));
evalcond[4]=(((sj0*x754*x759))+((sj0*x756*x759))+((x756*x773))+((r12*sj0*x765))+(((-1.0)*x752*x755*x757))+(((-1.0)*cj5*sj0*x752*x758))+(((-1.0)*x754*x758*x762))+(((-1.0)*x754*x755*x766))+(((-1.0)*x752*x775))+(((-1.0)*x752*x774))+x770+(((-1.0)*x778))+((x754*x773))+((r02*x776)));
evalcond[5]=(((x750*x773))+((sj0*x750*x759))+(((-1.0)*py*x762))+(((0.15)*x772))+(((-0.21066117)*cj1))+(((0.17676784)*sj1))+(((-0.15)*x755*x763))+(((-1.0)*px*x766))+((x759*x777))+(((0.335)*x771))+((x758*x768))+(((-1.8e-7)*x773))+(((0.15)*r02*x757))+(((1.8e-7)*cj0*x755))+(((-1.0)*x758*x777))+(((-1.0)*cj0*x750*x755))+(((-1.11e-6)*x774))+(((-1.11e-6)*x775))+(((0.15)*gconst1*r01*x763))+(((-1.0)*sj0*x750*x758))+(((-1.0)*x759*x768))+((x749*x761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x779=(cj1*gconst2);
IkReal x780=(cj0*r01);
IkReal x781=((1.0)*sj1);
IkReal x782=(cj1*gconst1);
IkReal x783=(r10*sj0);
IkReal x784=(cj0*r00);
IkReal x785=(r11*sj0);
if( IKabs((((gconst2*r21*sj1))+((x782*x783))+((x782*x784))+((x779*x780))+((x779*x785))+((gconst1*r20*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x782))+(((-1.0)*gconst1*x781*x784))+(((-1.0)*gconst1*x781*x783))+((r21*x779))+(((-1.0)*gconst2*x780*x781))+(((-1.0)*gconst2*x781*x785)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((gconst2*r21*sj1))+((x782*x783))+((x782*x784))+((x779*x780))+((x779*x785))+((gconst1*r20*sj1))))+IKsqr((((r20*x782))+(((-1.0)*gconst1*x781*x784))+(((-1.0)*gconst1*x781*x783))+((r21*x779))+(((-1.0)*gconst2*x780*x781))+(((-1.0)*gconst2*x781*x785))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((gconst2*r21*sj1))+((x782*x783))+((x782*x784))+((x779*x780))+((x779*x785))+((gconst1*r20*sj1))), (((r20*x782))+(((-1.0)*gconst1*x781*x784))+(((-1.0)*gconst1*x781*x783))+((r21*x779))+(((-1.0)*gconst2*x780*x781))+(((-1.0)*gconst2*x781*x785))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x786=IKsin(j2);
IkReal x787=IKcos(j2);
IkReal x788=((1.11e-6)*cj5);
IkReal x789=(gconst2*r20);
IkReal x790=(cj0*sj5);
IkReal x791=(cj0*gconst1);
IkReal x792=(gconst2*r00);
IkReal x793=((1.0)*sj4);
IkReal x794=(sj0*sj5);
IkReal x795=(cj0*cj5);
IkReal x796=(gconst1*r21);
IkReal x797=((1.0)*sj0);
IkReal x798=(gconst2*r10);
IkReal x799=((1.0)*sj1);
IkReal x800=(gconst1*r11);
IkReal x801=(cj5*r22);
IkReal x802=((0.15)*sj5);
IkReal x803=(cj4*cj5);
IkReal x804=((1.8e-7)*sj0);
IkReal x805=((1.0)*cj0);
IkReal x806=(gconst1*r01);
IkReal x807=(r22*sj5);
IkReal x808=(cj1*x786);
IkReal x809=(cj1*x787);
IkReal x810=(cj5*r12*sj0);
IkReal x811=(sj1*x786);
IkReal x812=(x787*x799);
evalcond[0]=((((-1.0)*gconst2*r21))+x811+x809+(((-1.0)*gconst1*r20)));
evalcond[1]=((((-1.0)*r00*x791))+(((-1.0)*x812))+(((-1.0)*gconst2*r01*x805))+(((-1.0)*gconst2*r11*x797))+(((-1.0)*gconst1*r10*x797))+x808);
evalcond[2]=(((cj4*x807))+(((-1.0)*x796*x803))+((sj4*sj5*x796))+(((-1.0)*x812))+((x789*x803))+(((-1.0)*sj5*x789*x793))+((sj4*x801))+x808);
evalcond[3]=((((-0.335)*x808))+(((-1.11e-6)*x807))+(((-0.21066117)*sj1))+(((-1.0)*x788*x789))+(((0.15)*x801))+((x788*x796))+(((-1.0)*x789*x802))+(((-1.0)*pz))+(((-0.17676784)*cj1))+(((1.8e-7)*x789))+(((-1.8e-7)*x796))+(((0.335)*sj1*x787))+((x796*x802)));
evalcond[4]=((((-1.0)*x809))+((r02*sj4*x795))+((sj4*x810))+((cj4*r12*x794))+(((-1.0)*x793*x794*x798))+((sj0*x798*x803))+(((-1.0)*r01*x791*x803))+((sj4*x790*x806))+((sj4*x794*x800))+(((-1.0)*x790*x792*x793))+(((-1.0)*x786*x799))+(((-1.0)*x797*x800*x803))+((cj4*r02*x790))+((cj4*x792*x795)));
evalcond[5]=((((-1.0)*cj0*x788*x792))+(((-0.15)*x794*x798))+(((-1.8e-7)*r01*x791))+(((-1.0)*px*x805))+(((0.335)*x809))+(((-0.21066117)*cj1))+((sj0*x788*x800))+(((0.17676784)*sj1))+(((-0.15)*x790*x792))+(((-1.11e-6)*r02*x790))+(((1.8e-7)*cj0*x792))+(((-1.11e-6)*r12*x794))+((x798*x804))+(((0.15)*x794*x800))+(((-1.0)*x800*x804))+(((-1.0)*sj0*x788*x798))+(((0.15)*x790*x806))+(((0.15)*r02*x795))+(((0.335)*x811))+((r01*x788*x791))+(((-1.0)*py*x797))+(((0.15)*x810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x813=(cj3*gconst1);
IkReal x814=((1.0)*cj1);
IkReal x815=(r10*sj0);
IkReal x816=(cj0*r00);
IkReal x817=(gconst2*r20);
IkReal x818=(sj3*sj5);
IkReal x819=((1.0)*sj1);
IkReal x820=(r22*sj4);
IkReal x821=(cj1*cj4);
IkReal x822=(cj3*gconst2);
IkReal x823=(r11*sj0);
IkReal x824=(cj0*r01);
IkReal x825=(gconst1*r21);
IkReal x826=(cj5*sj3*sj4);
IkReal x827=(sj1*x825);
IkReal x828=(cj5*r22*sj3);
CheckValue<IkReal> x829 = IKatan2WithCheck(IkReal(((((-1.0)*x813*x814*x816))+(((-1.0)*x813*x814*x815))+(((-1.0)*x814*x822*x824))+(((-1.0)*x814*x822*x823))+((cj4*sj1*x828))+(((-1.0)*x817*x819*x826))+(((-1.0)*x818*x819*x820))+(((-1.0)*cj4*x817*x818*x819))+((cj4*x818*x827))+((x826*x827)))),IkReal((((x821*x828))+(((-1.0)*cj4*x814*x817*x818))+((sj1*x813*x815))+((sj1*x813*x816))+(((-1.0)*x814*x817*x826))+((x818*x821*x825))+((sj1*x822*x823))+((sj1*x822*x824))+(((-1.0)*x814*x818*x820))+((cj1*x825*x826)))),IKFAST_ATAN2_MAGTHRESH);
if(!x829.valid){
continue;
}
CheckValue<IkReal> x830=IKPowWithIntegerCheck(IKsign((cj3*sj3)),-1);
if(!x830.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x829.value)+(((1.5707963267949)*(x830.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x831=IKcos(j2);
IkReal x832=IKsin(j2);
IkReal x833=(cj0*r00);
IkReal x834=((0.15)*sj5);
IkReal x835=((1.0)*gconst1);
IkReal x836=((1.0)*gconst2);
IkReal x837=(cj5*sj4);
IkReal x838=(cj4*sj5);
IkReal x839=(gconst1*r21);
IkReal x840=(gconst2*r20);
IkReal x841=(r12*sj0);
IkReal x842=((0.15)*cj5);
IkReal x843=(cj0*r02);
IkReal x844=((1.11e-6)*sj5);
IkReal x845=(sj4*sj5);
IkReal x846=(cj4*cj5);
IkReal x847=(r10*sj0);
IkReal x848=((1.11e-6)*cj5);
IkReal x849=(r11*sj0);
IkReal x850=((1.8e-7)*gconst2);
IkReal x851=(cj0*gconst1*r01);
IkReal x852=((1.0)*x845);
IkReal x853=(cj1*x832);
IkReal x854=(sj1*x831);
IkReal x855=(gconst1*x849);
IkReal x856=(cj5*x851);
IkReal x857=((1.0)*x853);
IkReal x858=((1.0)*cj1*x831);
IkReal x859=((1.0)*sj1*x832);
evalcond[0]=((((-1.0)*r20*x835))+(((-1.0)*r21*x836))+(((-1.0)*sj3*x858))+(((-1.0)*sj3*x859)));
evalcond[1]=((((-1.0)*cj0*r01*x836))+(((-1.0)*x835*x847))+(((-1.0)*x836*x849))+((sj3*x854))+(((-1.0)*x833*x835))+(((-1.0)*sj3*x857)));
evalcond[2]=(((r22*x837))+((r22*x838))+(((-1.0)*r21*x835*x846))+((x840*x846))+(((-1.0)*x854))+((x839*x845))+x853+(((-1.0)*r20*x836*x845)));
evalcond[3]=((((-1.0)*r22*x852))+((x838*x839))+((r22*x846))+(((-1.0)*cj3*x859))+(((-1.0)*cj3*x858))+((x837*x839))+(((-1.0)*r20*x836*x838))+(((-1.0)*r20*x836*x837)));
evalcond[4]=(((r22*x842))+(((-0.21066117)*sj1))+((x839*x848))+(((-0.335)*x853))+(((-1.0)*x840*x848))+(((0.335)*x854))+(((-1.0)*pz))+(((-1.0)*x834*x840))+(((1.8e-7)*x840))+(((-1.8e-7)*x839))+(((-0.17676784)*cj1))+((x834*x839))+(((-1.0)*r22*x844)));
evalcond[5]=(((gconst2*x846*x847))+((x838*x841))+((x838*x843))+(((-1.0)*x858))+(((-1.0)*x859))+((x845*x855))+((x845*x851))+(((-1.0)*x835*x846*x849))+((x837*x843))+((x837*x841))+((gconst2*x833*x846))+(((-1.0)*x836*x845*x847))+(((-1.0)*x833*x836*x845))+(((-1.0)*cj0*r01*x835*x846)));
evalcond[6]=(((cj3*x854))+((x843*x846))+(((-1.0)*cj3*x857))+(((-1.0)*x841*x852))+((x838*x851))+((x838*x855))+(((-1.0)*x833*x836*x837))+(((-1.0)*x833*x836*x838))+(((-1.0)*x836*x837*x847))+(((-1.0)*x836*x838*x847))+((x837*x855))+((x837*x851))+(((-1.0)*x843*x852))+((x841*x846)));
evalcond[7]=(((x848*x851))+((x848*x855))+(((-1.8e-7)*x855))+(((-1.8e-7)*x851))+((x834*x855))+((x834*x851))+(((-0.21066117)*cj1))+(((-1.0)*x841*x844))+(((-1.0)*gconst2*x834*x847))+(((0.17676784)*sj1))+((x847*x850))+(((-1.0)*x843*x844))+(((0.335)*cj1*x831))+((x842*x843))+((x833*x850))+(((-1.0)*py*sj0))+(((-1.0)*gconst2*x833*x848))+(((-1.0)*gconst2*x833*x834))+(((0.335)*sj1*x832))+(((-1.0)*cj0*px))+(((-1.0)*gconst2*x847*x848))+((x841*x842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x860=(sj3*sj4);
IkReal x861=(cj5*sj1);
IkReal x862=(cj1*gconst2);
IkReal x863=(r20*sj5);
IkReal x864=((1.0)*r21);
IkReal x865=(gconst1*sj5);
IkReal x866=(r22*sj5);
IkReal x867=(cj4*sj3);
IkReal x868=(cj1*gconst1);
IkReal x869=((1.0)*sj1);
IkReal x870=((1.0)*x867);
CheckValue<IkReal> x871=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x871.valid){
continue;
}
CheckValue<IkReal> x872 = IKatan2WithCheck(IkReal((((x860*x862*x863))+((cj5*r21*x867*x868))+(((-1.0)*cj1*cj5*r22*x860))+(((-1.0)*cj1*x866*x870))+(((-1.0)*gconst1*r20*x869))+(((-1.0)*gconst2*sj1*x864))+(((-1.0)*cj1*x860*x864*x865))+(((-1.0)*cj5*r20*x862*x870)))),IkReal((((r21*sj1*x860*x865))+((r22*x860*x861))+(((-1.0)*x862*x864))+(((-1.0)*gconst2*x860*x863*x869))+(((-1.0)*r20*x868))+(((-1.0)*gconst1*x861*x864*x867))+((gconst2*r20*x861*x867))+((sj1*x866*x867)))),IKFAST_ATAN2_MAGTHRESH);
if(!x872.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x871.value)))+(x872.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x873=IKcos(j2);
IkReal x874=IKsin(j2);
IkReal x875=(cj0*r00);
IkReal x876=((0.15)*sj5);
IkReal x877=((1.0)*gconst1);
IkReal x878=((1.0)*gconst2);
IkReal x879=(cj5*sj4);
IkReal x880=(cj4*sj5);
IkReal x881=(gconst1*r21);
IkReal x882=(gconst2*r20);
IkReal x883=(r12*sj0);
IkReal x884=((0.15)*cj5);
IkReal x885=(cj0*r02);
IkReal x886=((1.11e-6)*sj5);
IkReal x887=(sj4*sj5);
IkReal x888=(cj4*cj5);
IkReal x889=(r10*sj0);
IkReal x890=((1.11e-6)*cj5);
IkReal x891=(r11*sj0);
IkReal x892=((1.8e-7)*gconst2);
IkReal x893=(cj0*gconst1*r01);
IkReal x894=((1.0)*x887);
IkReal x895=(cj1*x874);
IkReal x896=(sj1*x873);
IkReal x897=(gconst1*x891);
IkReal x898=(cj5*x893);
IkReal x899=((1.0)*x895);
IkReal x900=((1.0)*cj1*x873);
IkReal x901=((1.0)*sj1*x874);
evalcond[0]=((((-1.0)*sj3*x901))+(((-1.0)*sj3*x900))+(((-1.0)*r21*x878))+(((-1.0)*r20*x877)));
evalcond[1]=((((-1.0)*cj0*r01*x878))+(((-1.0)*x877*x889))+((sj3*x896))+(((-1.0)*x875*x877))+(((-1.0)*sj3*x899))+(((-1.0)*x878*x891)));
evalcond[2]=(((x881*x887))+(((-1.0)*r20*x878*x887))+((x882*x888))+((r22*x879))+(((-1.0)*x896))+(((-1.0)*r21*x877*x888))+x895+((r22*x880)));
evalcond[3]=(((x879*x881))+((x880*x881))+(((-1.0)*r20*x878*x880))+(((-1.0)*r20*x878*x879))+(((-1.0)*r22*x894))+((r22*x888))+(((-1.0)*cj3*x900))+(((-1.0)*cj3*x901)));
evalcond[4]=((((-1.0)*x882*x890))+(((-0.21066117)*sj1))+((x881*x890))+(((1.8e-7)*x882))+((x876*x881))+(((-1.8e-7)*x881))+(((-1.0)*x876*x882))+(((-1.0)*pz))+(((-0.17676784)*cj1))+(((-0.335)*x895))+(((0.335)*x896))+((r22*x884))+(((-1.0)*r22*x886)));
evalcond[5]=((((-1.0)*cj0*r01*x877*x888))+((x879*x885))+((x879*x883))+(((-1.0)*x875*x878*x887))+((x880*x883))+((x880*x885))+(((-1.0)*x901))+(((-1.0)*x900))+(((-1.0)*x877*x888*x891))+((gconst2*x888*x889))+(((-1.0)*x878*x887*x889))+((gconst2*x875*x888))+((x887*x893))+((x887*x897)));
evalcond[6]=(((cj3*x896))+(((-1.0)*cj3*x899))+((x880*x893))+((x880*x897))+(((-1.0)*x883*x894))+(((-1.0)*x875*x878*x880))+((x879*x893))+((x879*x897))+((x883*x888))+(((-1.0)*x875*x878*x879))+(((-1.0)*x878*x880*x889))+(((-1.0)*x878*x879*x889))+(((-1.0)*x885*x894))+((x885*x888)));
evalcond[7]=((((-1.0)*x883*x886))+(((0.335)*cj1*x873))+(((0.335)*sj1*x874))+((x876*x897))+((x876*x893))+(((-0.21066117)*cj1))+(((-1.0)*gconst2*x875*x876))+((x883*x884))+(((0.17676784)*sj1))+(((-1.0)*gconst2*x876*x889))+(((-1.8e-7)*x897))+(((-1.8e-7)*x893))+(((-1.0)*gconst2*x875*x890))+((x889*x892))+(((-1.0)*py*sj0))+((x890*x893))+((x890*x897))+((x875*x892))+(((-1.0)*x885*x886))+(((-1.0)*gconst2*x889*x890))+(((-1.0)*cj0*px))+((x884*x885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x902=((1.0)*cj1);
IkReal x903=(gconst2*r21);
IkReal x904=(gconst1*sj1);
IkReal x905=(cj0*r00);
IkReal x906=(r10*sj0);
IkReal x907=(cj0*gconst2*r01);
IkReal x908=(gconst2*r11*sj0);
CheckValue<IkReal> x909=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x909.valid){
continue;
}
CheckValue<IkReal> x910 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x904))+(((-1.0)*x902*x908))+(((-1.0)*x902*x907))+(((-1.0)*gconst1*x902*x906))+(((-1.0)*gconst1*x902*x905))+(((-1.0)*sj1*x903)))),IkReal(((((-1.0)*gconst1*r20*x902))+(((-1.0)*x902*x903))+((x904*x905))+((x904*x906))+((sj1*x908))+((sj1*x907)))),IKFAST_ATAN2_MAGTHRESH);
if(!x910.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x909.value)))+(x910.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x911=IKcos(j2);
IkReal x912=IKsin(j2);
IkReal x913=(cj0*r00);
IkReal x914=((0.15)*sj5);
IkReal x915=((1.0)*gconst1);
IkReal x916=((1.0)*gconst2);
IkReal x917=(cj5*sj4);
IkReal x918=(cj4*sj5);
IkReal x919=(gconst1*r21);
IkReal x920=(gconst2*r20);
IkReal x921=(r12*sj0);
IkReal x922=((0.15)*cj5);
IkReal x923=(cj0*r02);
IkReal x924=((1.11e-6)*sj5);
IkReal x925=(sj4*sj5);
IkReal x926=(cj4*cj5);
IkReal x927=(r10*sj0);
IkReal x928=((1.11e-6)*cj5);
IkReal x929=(r11*sj0);
IkReal x930=((1.8e-7)*gconst2);
IkReal x931=(cj0*gconst1*r01);
IkReal x932=((1.0)*x925);
IkReal x933=(cj1*x912);
IkReal x934=(sj1*x911);
IkReal x935=(gconst1*x929);
IkReal x936=(cj5*x931);
IkReal x937=((1.0)*x933);
IkReal x938=((1.0)*cj1*x911);
IkReal x939=((1.0)*sj1*x912);
evalcond[0]=((((-1.0)*sj3*x938))+(((-1.0)*sj3*x939))+(((-1.0)*r21*x916))+(((-1.0)*r20*x915)));
evalcond[1]=((((-1.0)*x913*x915))+(((-1.0)*sj3*x937))+(((-1.0)*cj0*r01*x916))+(((-1.0)*x915*x927))+(((-1.0)*x916*x929))+((sj3*x934)));
evalcond[2]=((((-1.0)*r21*x915*x926))+((x919*x925))+((x920*x926))+(((-1.0)*r20*x916*x925))+(((-1.0)*x934))+((r22*x918))+((r22*x917))+x933);
evalcond[3]=(((x917*x919))+(((-1.0)*r20*x916*x918))+(((-1.0)*r20*x916*x917))+((r22*x926))+(((-1.0)*r22*x932))+(((-1.0)*cj3*x939))+(((-1.0)*cj3*x938))+((x918*x919)));
evalcond[4]=((((-0.335)*x933))+((x919*x928))+(((-0.21066117)*sj1))+((r22*x922))+(((-1.0)*x914*x920))+(((-1.8e-7)*x919))+(((-1.0)*r22*x924))+((x914*x919))+(((-1.0)*x920*x928))+(((0.335)*x934))+(((-1.0)*pz))+(((1.8e-7)*x920))+(((-0.17676784)*cj1)));
evalcond[5]=(((x918*x921))+((x918*x923))+(((-1.0)*x915*x926*x929))+(((-1.0)*cj0*r01*x915*x926))+(((-1.0)*x916*x925*x927))+((gconst2*x913*x926))+((gconst2*x926*x927))+((x917*x923))+((x917*x921))+((x925*x931))+((x925*x935))+(((-1.0)*x913*x916*x925))+(((-1.0)*x938))+(((-1.0)*x939)));
evalcond[6]=((((-1.0)*cj3*x937))+(((-1.0)*x913*x916*x917))+(((-1.0)*x913*x916*x918))+((x921*x926))+(((-1.0)*x916*x917*x927))+(((-1.0)*x916*x918*x927))+((x917*x935))+((x917*x931))+((cj3*x934))+((x923*x926))+(((-1.0)*x921*x932))+(((-1.0)*x923*x932))+((x918*x931))+((x918*x935)));
evalcond[7]=((((-0.21066117)*cj1))+(((-1.0)*gconst2*x914*x927))+((x927*x930))+(((-1.0)*gconst2*x913*x928))+((x928*x931))+((x928*x935))+(((0.17676784)*sj1))+((x921*x922))+(((-1.0)*gconst2*x913*x914))+(((0.335)*sj1*x912))+((x914*x935))+((x914*x931))+(((0.335)*cj1*x911))+(((-1.0)*gconst2*x927*x928))+(((-1.0)*py*sj0))+(((-1.0)*x921*x924))+((x922*x923))+(((-1.8e-7)*x931))+(((-1.8e-7)*x935))+(((-1.0)*x923*x924))+(((-1.0)*cj0*px))+((x913*x930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x941 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x941)==0){
continue;
}
IkReal x940=pow(x941,-0.5);
CheckValue<IkReal> x942 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x942.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x942.value))));
IkReal gconst4=((1.0)*r21*x940);
IkReal gconst5=((-1.0)*r20*x940);
CheckValue<IkReal> x943 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x943.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x943.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
CheckValue<IkReal> x946 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x946.valid){
continue;
}
IkReal x944=((1.0)*(x946.value));
IkReal x945=x940;
sj6=gconst4;
cj6=gconst5;
j6=((3.14159265)+(((-1.0)*x944)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x944)));
IkReal gconst4=((1.0)*r21*x945);
IkReal gconst5=((-1.0)*r20*x945);
j0eval[0]=0;
j0eval[1]=0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x947=gconst5*gconst5;
IkReal x948=gconst4*gconst4;
IkReal x949=(sj4*sj5);
IkReal x950=((1.0)*cj4);
IkReal x951=(cj3*sj5);
IkReal x952=(cj5*sj4);
IkReal x953=((1.0)*cj3);
IkReal x954=(cj3*cj5);
IkReal x955=(gconst4*r11);
IkReal x956=(gconst5*r00);
IkReal x957=(gconst4*r01);
IkReal x958=(cj3*gconst5*r10);
CheckValue<IkReal> x959 = IKatan2WithCheck(IkReal((((cj4*x954*x955))+(((-1.0)*r12*x952*x953))+((x949*x958))+(((-1.0)*gconst5*r10*x950*x954))+(((-1.0)*r12*x950*x951))+(((-1.0)*x949*x953*x955)))),IkReal(((((-1.0)*x950*x954*x956))+((cj4*x954*x957))+((cj3*x949*x956))+(((-1.0)*r02*x952*x953))+(((-1.0)*x949*x953*x957))+(((-1.0)*r02*x950*x951)))),IKFAST_ATAN2_MAGTHRESH);
if(!x959.valid){
continue;
}
CheckValue<IkReal> x960=IKPowWithIntegerCheck(IKsign((((r20*((((cj4*gconst5*sj5))+((gconst5*x952))))))+((r21*(((((-1.0)*gconst4*x952))+(((-1.0)*gconst4*sj5*x950))))))+((r22*((((x948*x949))+((x947*x949))+(((-1.0)*cj5*x947*x950))+(((-1.0)*cj5*x948*x950)))))))),-1);
if(!x960.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x959.value)+(((1.5707963267949)*(x960.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x961=IKcos(j0);
IkReal x962=IKsin(j0);
IkReal x963=((1.11e-6)*cj5);
IkReal x964=((1.0)*sj5);
IkReal x965=(gconst5*sj4);
IkReal x966=((1.0)*gconst4);
IkReal x967=(cj4*sj5);
IkReal x968=((0.15)*sj5);
IkReal x969=(cj4*cj5);
IkReal x970=((1.0)*cj5);
IkReal x971=(gconst4*sj4);
IkReal x972=(cj5*sj4);
IkReal x973=((1.8e-7)*gconst4);
IkReal x974=((0.15)*cj5);
IkReal x975=(r00*x962);
IkReal x976=(r02*x962);
IkReal x977=(r01*x962);
IkReal x978=(r12*x961);
IkReal x979=(r11*x961);
IkReal x980=(gconst5*r10*x961);
IkReal x981=(sj5*x978);
IkReal x982=(cj4*gconst4*x979);
evalcond[0]=(((gconst4*r10*x961))+(((-1.0)*x966*x975))+(((-1.0)*gconst5*x977))+(((-1.0)*cj3))+((gconst5*x979)));
evalcond[1]=(((gconst4*x969*x979))+(((-1.0)*x964*x971*x979))+((r10*sj5*x961*x965))+(((-1.0)*cj4*x964*x978))+((gconst5*x969*x975))+(((-1.0)*sj4*x970*x978))+(((-1.0)*x969*x980))+((sj5*x971*x977))+((x967*x976))+(((-1.0)*x966*x969*x977))+((x972*x976))+(((-1.0)*x964*x965*x975)));
evalcond[2]=(((x969*x976))+(((-1.0)*cj4*gconst5*x964*x975))+sj3+(((-1.0)*x965*x970*x975))+((sj4*x981))+((cj5*x971*x977))+(((-1.0)*x966*x972*x979))+(((-1.0)*x964*x982))+(((-1.0)*x969*x978))+((x967*x980))+((cj5*r10*x961*x965))+(((-1.0)*sj4*x964*x976))+((gconst4*x967*x977)));
evalcond[3]=((-0.0005)+(((-1.0)*gconst4*x968*x979))+(((-1.0)*gconst4*x963*x979))+(((-1.11e-6)*sj5*x976))+((gconst4*x963*x977))+(((-1.0)*px*x962))+(((-1.0)*gconst5*x963*x975))+(((-1.0)*gconst5*x968*x975))+((x968*x980))+(((1.8e-7)*gconst5*x975))+(((-1.0)*x974*x978))+((x973*x979))+((x963*x980))+((py*x961))+(((1.11e-6)*x981))+(((-1.8e-7)*x980))+((x974*x976))+((gconst4*x968*x977))+(((-1.0)*x973*x977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((((4.2073668924196e-7)*gconst4*r11*sj0))+(((5.01408419187776e-7)*gconst5*r20))+(((2.33742605134422)*py*sj0))+(((-0.783037727200315)*cj0*gconst4*r01*sj4*sj5))+(((-2.78560232882098)*pz))+(((-0.783037727200315)*cj5*r12*sj0*sj4))+(((-4.2073668924196e-7)*gconst5*r10*sj0))+(((-0.783037727200315)*cj0*cj5*r02*sj4))+(((-0.350613907701634)*cj5*r12*sj0))+(((2.59454291699209e-6)*cj0*cj5*gconst5*r00))+(((-0.417840349323147)*gconst5*r20*sj5))+(((-0.783037727200315)*cj0*cj4*cj5*gconst5*r00))+(((-0.783037727200315)*cj4*cj5*gconst5*r10*sj0))+(((2.59454291699209e-6)*cj0*r02*sj5))+(((-0.933176780155028)*cj4*cj5*gconst4*r21))+(((-5.01408419187776e-7)*gconst4*r21))+(((-2.59454291699209e-6)*cj0*cj5*gconst4*r01))+(((0.350613907701634)*gconst5*r10*sj0*sj5))+(((0.933176780155028)*gconst4*r21*sj4*sj5))+(((2.33742605134422)*cj0*px))+(((0.783037727200315)*cj4*cj5*gconst4*r11*sj0))+(((3.09201858499129e-6)*cj5*gconst4*r21))+(((0.783037727200315)*gconst5*r10*sj0*sj4*sj5))+(((-0.783037727200315)*cj0*cj4*r02*sj5))+(((-0.350613907701634)*cj0*gconst4*r01*sj5))+(((0.933176780155028)*cj4*cj5*gconst5*r20))+(((0.783037727200315)*cj0*cj4*cj5*gconst4*r01))+(((-0.933176780155028)*gconst5*r20*sj4*sj5))+(((0.933176780155028)*cj4*r22*sj5))+(((2.59454291699209e-6)*cj5*gconst5*r10*sj0))+(((-0.783037727200315)*cj4*r12*sj0*sj5))+(((4.2073668924196e-7)*cj0*gconst4*r01))+(((-3.09201858499129e-6)*cj5*gconst5*r20))+(((0.933176780155028)*cj5*r22*sj4))+(((0.417840349323147)*cj5*r22))+(((-3.09201858499129e-6)*r22*sj5))+(((0.417840349323147)*gconst4*r21*sj5))+(((-2.59454291699209e-6)*cj5*gconst4*r11*sj0))+(((2.59454291699209e-6)*r12*sj0*sj5))+(((-0.350613907701634)*gconst4*r11*sj0*sj5))+(((0.783037727200315)*cj0*gconst5*r00*sj4*sj5))+(((-0.783037727200315)*gconst4*r11*sj0*sj4*sj5))+(((-0.350613907701634)*cj0*cj5*r02))+(((-4.2073668924196e-7)*cj0*gconst5*r00))+(((0.350613907701634)*cj0*gconst5*r00*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-5.01408419187776e-7)*cj0*gconst4*r01))+(((-3.09201858499129e-6)*cj5*gconst5*r10*sj0))+(((0.933176780155028)*cj0*cj4*cj5*gconst5*r00))+(((0.933176780155028)*cj4*cj5*gconst5*r10*sj0))+(((-0.933176780155028)*gconst5*r10*sj0*sj4*sj5))+(((-5.01408419187776e-7)*gconst4*r11*sj0))+(((0.417840349323147)*gconst4*r11*sj0*sj5))+(((0.783037727200315)*cj4*r22*sj5))+(((-2.59454291699209e-6)*cj5*gconst5*r20))+(((-0.933176780155028)*cj0*gconst5*r00*sj4*sj5))+(((-0.783037727200315)*gconst5*r20*sj4*sj5))+(((-2.33742605134422)*pz))+(((2.59454291699209e-6)*cj5*gconst4*r21))+(((0.933176780155028)*cj5*r12*sj0*sj4))+(((0.933176780155028)*cj0*gconst4*r01*sj4*sj5))+(((3.09201858499129e-6)*cj5*gconst4*r11*sj0))+(((-3.09201858499129e-6)*r12*sj0*sj5))+(((-0.417840349323147)*gconst5*r10*sj0*sj5))+(((0.350613907701634)*cj5*r22))+(((0.933176780155028)*cj0*cj4*r02*sj5))+(((-0.350613907701634)*gconst5*r20*sj5))+(((4.2073668924196e-7)*gconst5*r20))+(((-0.417840349323147)*cj0*gconst5*r00*sj5))+(((3.09201858499129e-6)*cj0*cj5*gconst4*r01))+(((0.350613907701634)*gconst4*r21*sj5))+(((0.783037727200315)*gconst4*r21*sj4*sj5))+(((-2.59454291699209e-6)*r22*sj5))+(((5.01408419187776e-7)*gconst5*r10*sj0))+(((5.01408419187776e-7)*cj0*gconst5*r00))+(((0.933176780155028)*cj4*r12*sj0*sj5))+(((-3.09201858499129e-6)*cj0*cj5*gconst5*r00))+(((-4.2073668924196e-7)*gconst4*r21))+(((-0.933176780155028)*cj0*cj4*cj5*gconst4*r01))+(((-3.09201858499129e-6)*cj0*r02*sj5))+(((-0.783037727200315)*cj4*cj5*gconst4*r21))+(((-2.78560232882098)*py*sj0))+(((0.933176780155028)*cj0*cj5*r02*sj4))+(((0.417840349323147)*cj0*cj5*r02))+(((0.417840349323147)*cj5*r12*sj0))+(((0.783037727200315)*cj4*cj5*gconst5*r20))+(((-0.933176780155028)*cj4*cj5*gconst4*r11*sj0))+(((-2.78560232882098)*cj0*px))+(((0.417840349323147)*cj0*gconst4*r01*sj5))+(((0.783037727200315)*cj5*r22*sj4))+(((0.933176780155028)*gconst4*r11*sj0*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((4.2073668924196e-7)*gconst4*r11*sj0))+(((5.01408419187776e-7)*gconst5*r20))+(((2.33742605134422)*py*sj0))+(((-0.783037727200315)*cj0*gconst4*r01*sj4*sj5))+(((-2.78560232882098)*pz))+(((-0.783037727200315)*cj5*r12*sj0*sj4))+(((-4.2073668924196e-7)*gconst5*r10*sj0))+(((-0.783037727200315)*cj0*cj5*r02*sj4))+(((-0.350613907701634)*cj5*r12*sj0))+(((2.59454291699209e-6)*cj0*cj5*gconst5*r00))+(((-0.417840349323147)*gconst5*r20*sj5))+(((-0.783037727200315)*cj0*cj4*cj5*gconst5*r00))+(((-0.783037727200315)*cj4*cj5*gconst5*r10*sj0))+(((2.59454291699209e-6)*cj0*r02*sj5))+(((-0.933176780155028)*cj4*cj5*gconst4*r21))+(((-5.01408419187776e-7)*gconst4*r21))+(((-2.59454291699209e-6)*cj0*cj5*gconst4*r01))+(((0.350613907701634)*gconst5*r10*sj0*sj5))+(((0.933176780155028)*gconst4*r21*sj4*sj5))+(((2.33742605134422)*cj0*px))+(((0.783037727200315)*cj4*cj5*gconst4*r11*sj0))+(((3.09201858499129e-6)*cj5*gconst4*r21))+(((0.783037727200315)*gconst5*r10*sj0*sj4*sj5))+(((-0.783037727200315)*cj0*cj4*r02*sj5))+(((-0.350613907701634)*cj0*gconst4*r01*sj5))+(((0.933176780155028)*cj4*cj5*gconst5*r20))+(((0.783037727200315)*cj0*cj4*cj5*gconst4*r01))+(((-0.933176780155028)*gconst5*r20*sj4*sj5))+(((0.933176780155028)*cj4*r22*sj5))+(((2.59454291699209e-6)*cj5*gconst5*r10*sj0))+(((-0.783037727200315)*cj4*r12*sj0*sj5))+(((4.2073668924196e-7)*cj0*gconst4*r01))+(((-3.09201858499129e-6)*cj5*gconst5*r20))+(((0.933176780155028)*cj5*r22*sj4))+(((0.417840349323147)*cj5*r22))+(((-3.09201858499129e-6)*r22*sj5))+(((0.417840349323147)*gconst4*r21*sj5))+(((-2.59454291699209e-6)*cj5*gconst4*r11*sj0))+(((2.59454291699209e-6)*r12*sj0*sj5))+(((-0.350613907701634)*gconst4*r11*sj0*sj5))+(((0.783037727200315)*cj0*gconst5*r00*sj4*sj5))+(((-0.783037727200315)*gconst4*r11*sj0*sj4*sj5))+(((-0.350613907701634)*cj0*cj5*r02))+(((-4.2073668924196e-7)*cj0*gconst5*r00))+(((0.350613907701634)*cj0*gconst5*r00*sj5))))+IKsqr(((((-5.01408419187776e-7)*cj0*gconst4*r01))+(((-3.09201858499129e-6)*cj5*gconst5*r10*sj0))+(((0.933176780155028)*cj0*cj4*cj5*gconst5*r00))+(((0.933176780155028)*cj4*cj5*gconst5*r10*sj0))+(((-0.933176780155028)*gconst5*r10*sj0*sj4*sj5))+(((-5.01408419187776e-7)*gconst4*r11*sj0))+(((0.417840349323147)*gconst4*r11*sj0*sj5))+(((0.783037727200315)*cj4*r22*sj5))+(((-2.59454291699209e-6)*cj5*gconst5*r20))+(((-0.933176780155028)*cj0*gconst5*r00*sj4*sj5))+(((-0.783037727200315)*gconst5*r20*sj4*sj5))+(((-2.33742605134422)*pz))+(((2.59454291699209e-6)*cj5*gconst4*r21))+(((0.933176780155028)*cj5*r12*sj0*sj4))+(((0.933176780155028)*cj0*gconst4*r01*sj4*sj5))+(((3.09201858499129e-6)*cj5*gconst4*r11*sj0))+(((-3.09201858499129e-6)*r12*sj0*sj5))+(((-0.417840349323147)*gconst5*r10*sj0*sj5))+(((0.350613907701634)*cj5*r22))+(((0.933176780155028)*cj0*cj4*r02*sj5))+(((-0.350613907701634)*gconst5*r20*sj5))+(((4.2073668924196e-7)*gconst5*r20))+(((-0.417840349323147)*cj0*gconst5*r00*sj5))+(((3.09201858499129e-6)*cj0*cj5*gconst4*r01))+(((0.350613907701634)*gconst4*r21*sj5))+(((0.783037727200315)*gconst4*r21*sj4*sj5))+(((-2.59454291699209e-6)*r22*sj5))+(((5.01408419187776e-7)*gconst5*r10*sj0))+(((5.01408419187776e-7)*cj0*gconst5*r00))+(((0.933176780155028)*cj4*r12*sj0*sj5))+(((-3.09201858499129e-6)*cj0*cj5*gconst5*r00))+(((-4.2073668924196e-7)*gconst4*r21))+(((-0.933176780155028)*cj0*cj4*cj5*gconst4*r01))+(((-3.09201858499129e-6)*cj0*r02*sj5))+(((-0.783037727200315)*cj4*cj5*gconst4*r21))+(((-2.78560232882098)*py*sj0))+(((0.933176780155028)*cj0*cj5*r02*sj4))+(((0.417840349323147)*cj0*cj5*r02))+(((0.417840349323147)*cj5*r12*sj0))+(((0.783037727200315)*cj4*cj5*gconst5*r20))+(((-0.933176780155028)*cj4*cj5*gconst4*r11*sj0))+(((-2.78560232882098)*cj0*px))+(((0.417840349323147)*cj0*gconst4*r01*sj5))+(((0.783037727200315)*cj5*r22*sj4))+(((0.933176780155028)*gconst4*r11*sj0*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((4.2073668924196e-7)*gconst4*r11*sj0))+(((5.01408419187776e-7)*gconst5*r20))+(((2.33742605134422)*py*sj0))+(((-0.783037727200315)*cj0*gconst4*r01*sj4*sj5))+(((-2.78560232882098)*pz))+(((-0.783037727200315)*cj5*r12*sj0*sj4))+(((-4.2073668924196e-7)*gconst5*r10*sj0))+(((-0.783037727200315)*cj0*cj5*r02*sj4))+(((-0.350613907701634)*cj5*r12*sj0))+(((2.59454291699209e-6)*cj0*cj5*gconst5*r00))+(((-0.417840349323147)*gconst5*r20*sj5))+(((-0.783037727200315)*cj0*cj4*cj5*gconst5*r00))+(((-0.783037727200315)*cj4*cj5*gconst5*r10*sj0))+(((2.59454291699209e-6)*cj0*r02*sj5))+(((-0.933176780155028)*cj4*cj5*gconst4*r21))+(((-5.01408419187776e-7)*gconst4*r21))+(((-2.59454291699209e-6)*cj0*cj5*gconst4*r01))+(((0.350613907701634)*gconst5*r10*sj0*sj5))+(((0.933176780155028)*gconst4*r21*sj4*sj5))+(((2.33742605134422)*cj0*px))+(((0.783037727200315)*cj4*cj5*gconst4*r11*sj0))+(((3.09201858499129e-6)*cj5*gconst4*r21))+(((0.783037727200315)*gconst5*r10*sj0*sj4*sj5))+(((-0.783037727200315)*cj0*cj4*r02*sj5))+(((-0.350613907701634)*cj0*gconst4*r01*sj5))+(((0.933176780155028)*cj4*cj5*gconst5*r20))+(((0.783037727200315)*cj0*cj4*cj5*gconst4*r01))+(((-0.933176780155028)*gconst5*r20*sj4*sj5))+(((0.933176780155028)*cj4*r22*sj5))+(((2.59454291699209e-6)*cj5*gconst5*r10*sj0))+(((-0.783037727200315)*cj4*r12*sj0*sj5))+(((4.2073668924196e-7)*cj0*gconst4*r01))+(((-3.09201858499129e-6)*cj5*gconst5*r20))+(((0.933176780155028)*cj5*r22*sj4))+(((0.417840349323147)*cj5*r22))+(((-3.09201858499129e-6)*r22*sj5))+(((0.417840349323147)*gconst4*r21*sj5))+(((-2.59454291699209e-6)*cj5*gconst4*r11*sj0))+(((2.59454291699209e-6)*r12*sj0*sj5))+(((-0.350613907701634)*gconst4*r11*sj0*sj5))+(((0.783037727200315)*cj0*gconst5*r00*sj4*sj5))+(((-0.783037727200315)*gconst4*r11*sj0*sj4*sj5))+(((-0.350613907701634)*cj0*cj5*r02))+(((-4.2073668924196e-7)*cj0*gconst5*r00))+(((0.350613907701634)*cj0*gconst5*r00*sj5))), ((((-5.01408419187776e-7)*cj0*gconst4*r01))+(((-3.09201858499129e-6)*cj5*gconst5*r10*sj0))+(((0.933176780155028)*cj0*cj4*cj5*gconst5*r00))+(((0.933176780155028)*cj4*cj5*gconst5*r10*sj0))+(((-0.933176780155028)*gconst5*r10*sj0*sj4*sj5))+(((-5.01408419187776e-7)*gconst4*r11*sj0))+(((0.417840349323147)*gconst4*r11*sj0*sj5))+(((0.783037727200315)*cj4*r22*sj5))+(((-2.59454291699209e-6)*cj5*gconst5*r20))+(((-0.933176780155028)*cj0*gconst5*r00*sj4*sj5))+(((-0.783037727200315)*gconst5*r20*sj4*sj5))+(((-2.33742605134422)*pz))+(((2.59454291699209e-6)*cj5*gconst4*r21))+(((0.933176780155028)*cj5*r12*sj0*sj4))+(((0.933176780155028)*cj0*gconst4*r01*sj4*sj5))+(((3.09201858499129e-6)*cj5*gconst4*r11*sj0))+(((-3.09201858499129e-6)*r12*sj0*sj5))+(((-0.417840349323147)*gconst5*r10*sj0*sj5))+(((0.350613907701634)*cj5*r22))+(((0.933176780155028)*cj0*cj4*r02*sj5))+(((-0.350613907701634)*gconst5*r20*sj5))+(((4.2073668924196e-7)*gconst5*r20))+(((-0.417840349323147)*cj0*gconst5*r00*sj5))+(((3.09201858499129e-6)*cj0*cj5*gconst4*r01))+(((0.350613907701634)*gconst4*r21*sj5))+(((0.783037727200315)*gconst4*r21*sj4*sj5))+(((-2.59454291699209e-6)*r22*sj5))+(((5.01408419187776e-7)*gconst5*r10*sj0))+(((5.01408419187776e-7)*cj0*gconst5*r00))+(((0.933176780155028)*cj4*r12*sj0*sj5))+(((-3.09201858499129e-6)*cj0*cj5*gconst5*r00))+(((-4.2073668924196e-7)*gconst4*r21))+(((-0.933176780155028)*cj0*cj4*cj5*gconst4*r01))+(((-3.09201858499129e-6)*cj0*r02*sj5))+(((-0.783037727200315)*cj4*cj5*gconst4*r21))+(((-2.78560232882098)*py*sj0))+(((0.933176780155028)*cj0*cj5*r02*sj4))+(((0.417840349323147)*cj0*cj5*r02))+(((0.417840349323147)*cj5*r12*sj0))+(((0.783037727200315)*cj4*cj5*gconst5*r20))+(((-0.933176780155028)*cj4*cj5*gconst4*r11*sj0))+(((-2.78560232882098)*cj0*px))+(((0.417840349323147)*cj0*gconst4*r01*sj5))+(((0.783037727200315)*cj5*r22*sj4))+(((0.933176780155028)*gconst4*r11*sj0*sj4*sj5))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x983=IKsin(j1);
IkReal x984=IKcos(j1);
IkReal x985=((0.335)*cj5);
IkReal x986=(gconst4*r21);
IkReal x987=(r12*sj0);
IkReal x988=((0.15)*cj3);
IkReal x989=(sj0*sj5);
IkReal x990=(gconst4*r11);
IkReal x991=(gconst5*r20);
IkReal x992=((1.11e-6)*sj3);
IkReal x993=(gconst5*r10);
IkReal x994=(cj5*sj0);
IkReal x995=((1.0)*pz);
IkReal x996=((1.8e-7)*sj3);
IkReal x997=((1.11e-6)*cj3);
IkReal x998=((0.335)*sj4);
IkReal x999=((0.335)*gconst5);
IkReal x1000=((1.8e-7)*cj3);
IkReal x1001=(cj5*r22);
IkReal x1002=((0.15)*sj3);
IkReal x1003=((0.15)*sj5);
IkReal x1004=((0.335)*gconst4);
IkReal x1005=(cj0*r02);
IkReal x1006=(sj0*sj4);
IkReal x1007=(cj4*sj0);
IkReal x1008=((1.8e-7)*sj0);
IkReal x1009=((1.11e-6)*sj5);
IkReal x1010=((0.335)*cj4);
IkReal x1011=(r22*sj5);
IkReal x1012=((1.11e-6)*cj5);
IkReal x1013=(cj0*gconst4*r01);
IkReal x1014=((0.21066117)*x983);
IkReal x1015=((0.17676784)*x984);
IkReal x1016=(sj5*x998);
IkReal x1017=((0.17676784)*x983);
IkReal x1018=((1.0)*py*sj0);
IkReal x1019=(sj5*x1005);
IkReal x1020=(sj5*x1010);
IkReal x1021=(cj0*gconst5*r00);
IkReal x1022=((0.21066117)*x984);
IkReal x1023=(cj5*x1005);
IkReal x1024=((1.0)*cj0*px);
evalcond[0]=((((-1.0)*x1016*x991))+(((-1.0)*x1012*x991))+(((1.8e-7)*x991))+(((-1.0)*x1015))+(((-1.0)*x1014))+(((-1.0)*x1003*x991))+(((0.15)*x1001))+((r22*sj4*x985))+(((-1.0)*x995))+((x1016*x986))+((x1003*x986))+(((-1.8e-7)*x986))+(((-1.0)*cj4*x985*x986))+((x1012*x986))+((cj4*x985*x991))+((x1010*x1011))+(((-1.0)*r22*x1009)));
evalcond[1]=(((x1020*x987))+(((-1.0)*x989*x993*x998))+((cj4*x1021*x985))+x1017+((x1003*x1013))+(((-1.0)*x1018))+(((-1.0)*x1009*x987))+(((0.15)*x1023))+((x989*x990*x998))+((x1013*x1016))+((sj4*x985*x987))+(((-1.0)*x1024))+(((-1.0)*x1022))+(((1.8e-7)*x1021))+((x1012*x1013))+(((-1.8e-7)*x1013))+(((-1.0)*x1005*x1009))+(((0.15)*cj5*x987))+(((-1.0)*cj4*x1013*x985))+(((-1.0)*x1003*x1021))+(((-1.0)*x1016*x1021))+((sj4*x1005*x985))+((x1008*x993))+((x1007*x985*x993))+(((-1.11e-6)*x993*x994))+(((-0.15)*x989*x993))+(((1.11e-6)*x990*x994))+(((-1.0)*x1007*x985*x990))+((x1010*x1019))+(((0.15)*x989*x990))+(((-1.0)*x1008*x990))+(((-1.0)*x1012*x1021)));
evalcond[2]=((((-1.0)*cj0*r00*x1004))+((sj5*x1002*x991))+(((-1.0)*cj0*r01*x999))+((x986*x996))+(((-1.0)*x991*x996))+((x1011*x992))+(((-1.0)*sj5*x1002*x986))+(((-1.0)*r10*sj0*x1004))+((sj3*x1015))+((sj3*x1014))+(((-1.0)*cj5*x986*x992))+(((-1.0)*x1001*x1002))+((pz*sj3))+(((-1.0)*r11*sj0*x999))+((cj5*x991*x992)));
evalcond[3]=((((-1.0)*x992*x993*x994))+((x1021*x996))+((cj5*x1013*x992))+((x990*x992*x994))+(((-1.0)*sj0*x990*x996))+(((-1.0)*sj5*x987*x992))+(((-1.0)*r20*x1004))+(((-1.0)*x1019*x992))+((x1002*x1023))+(((-1.0)*x1013*x996))+((x1002*x989*x990))+((cj5*x1002*x987))+((sj3*x1017))+(((-1.0)*sj5*x1002*x1021))+((sj5*x1002*x1013))+(((-1.0)*r21*x999))+(((-1.0)*x1002*x989*x993))+(((-1.0)*cj5*x1021*x992))+(((-1.0)*sj3*x1018))+(((-1.0)*sj3*x1022))+(((-1.0)*sj3*x1024))+((sj0*x993*x996)));
evalcond[4]=(((x1000*x991))+(((-1.0)*x1000*x986))+((sj5*x986*x988))+((x1006*x985*x993))+((x1001*x988))+(((-1.0)*sj4*x1013*x985))+(((-1.0)*x1010*x989*x990))+((sj4*x1021*x985))+(((-1.0)*cj3*x995))+(((-1.0)*x1011*x997))+((x1005*x1016))+(((-1.0)*cj4*x1005*x985))+((x1016*x987))+(((-1.0)*cj0*cj4*r01*sj5*x1004))+(((-1.0)*cj4*x985*x987))+(((-1.0)*cj3*x1014))+(((-1.0)*cj3*x1015))+((cj0*cj4*r00*sj5*x999))+(((-1.0)*sj5*x988*x991))+((cj5*x986*x997))+((x1010*x989*x993))+(((-1.0)*cj5*x991*x997))+(((-1.0)*x1006*x985*x990)));
evalcond[5]=(((x1020*x986))+((cj5*x987*x988))+((cj5*x1013*x997))+(((-1.0)*x988*x989*x993))+((x1000*x1021))+((cj3*x1017))+(((-1.0)*x1020*x991))+(((-1.0)*sj5*x987*x997))+((sj5*x1013*x988))+(((-1.0)*sj5*x1021*x988))+((sj4*x985*x986))+(((-1.0)*x1019*x997))+((cj4*r22*x985))+(((-1.0)*x1011*x998))+((x988*x989*x990))+(((-1.0)*x993*x994*x997))+(((-1.0)*cj3*x1022))+(((-1.0)*cj3*x1024))+(((-1.0)*sj0*x1000*x990))+((x990*x994*x997))+((sj0*x1000*x993))+(((-1.0)*sj4*x985*x991))+(((-1.0)*cj3*x1018))+(((-1.0)*cj5*x1021*x997))+(((-1.0)*x1000*x1013))+((x1023*x988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
CheckValue<IkReal> x1027 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1027.valid){
continue;
}
IkReal x1025=((1.0)*(x1027.value));
IkReal x1026=x940;
sj6=gconst4;
cj6=gconst5;
j6=((3.14159265)+(((-1.0)*x1025)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x1025)));
IkReal gconst4=((1.0)*r21*x1026);
IkReal gconst5=((-1.0)*r20*x1026);
IkReal x1028=r22*r22;
CheckValue<IkReal> x1033=IKPowWithIntegerCheck(((-1.0)+x1028),-1);
if(!x1033.valid){
continue;
}
IkReal x1029=x1033.value;
if((((1.0)+(((-1.0)*x1028)))) < -0.00001)
continue;
IkReal x1030=IKsqrt(((1.0)+(((-1.0)*x1028))));
IkReal x1031=(r02*sj0*x1029*x1030);
IkReal x1032=(cj0*r12*x1029*x1030);
j2eval[0]=sj3;
j2eval[1]=((IKabs(((((-1.0)*cj1*x1032))+((cj1*x1031)))))+(IKabs(((((-1.0)*sj1*x1031))+((sj1*x1032))))));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
CheckValue<IkReal> x1036 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1036.valid){
continue;
}
IkReal x1034=((1.0)*(x1036.value));
IkReal x1035=x940;
sj6=gconst4;
cj6=gconst5;
j6=((3.14159265)+(((-1.0)*x1034)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x1034)));
IkReal gconst4=((1.0)*r21*x1035);
IkReal gconst5=((-1.0)*r20*x1035);
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
CheckValue<IkReal> x1039 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1039.valid){
continue;
}
IkReal x1037=((1.0)*(x1039.value));
IkReal x1038=x940;
sj6=gconst4;
cj6=gconst5;
j6=((3.14159265)+(((-1.0)*x1037)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x1037)));
IkReal gconst4=((1.0)*r21*x1038);
IkReal gconst5=((-1.0)*r20*x1038);
IkReal x1040=(cj3*sj3);
j2eval[0]=x1040;
j2eval[1]=IKsign(x1040);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1041=(gconst5*r20);
IkReal x1042=(r22*sj5);
IkReal x1043=((1.0)*cj4);
IkReal x1044=(sj1*sj5);
IkReal x1045=(cj5*r22);
IkReal x1046=(gconst4*r21);
IkReal x1047=(cj5*sj1);
IkReal x1048=(cj1*cj4);
IkReal x1049=(cj1*cj5);
IkReal x1050=(cj4*sj1);
IkReal x1051=(cj1*sj5);
IkReal x1052=((1.0)*sj1*sj4);
IkReal x1053=((1.0)*cj1*sj4);
if( IKabs(((((-1.0)*cj1*x1042*x1043))+(((-1.0)*x1045*x1053))+((cj4*x1044*x1046))+((sj4*x1041*x1051))+(((-1.0)*sj4*x1046*x1051))+(((-1.0)*sj4*x1041*x1047))+(((-1.0)*x1042*x1052))+((sj4*x1046*x1047))+((cj5*x1046*x1048))+(((-1.0)*x1041*x1043*x1044))+(((-1.0)*x1041*x1043*x1049))+((x1045*x1050)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj4*x1044*x1046))+(((-1.0)*x1043*x1046*x1047))+((sj1*sj4*x1045))+((sj5*x1046*x1048))+((x1042*x1050))+(((-1.0)*sj4*x1041*x1044))+(((-1.0)*sj4*x1041*x1049))+(((-1.0)*x1042*x1053))+((cj4*x1041*x1047))+((sj4*x1046*x1049))+(((-1.0)*x1041*x1043*x1051))+((x1045*x1048)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x1042*x1043))+(((-1.0)*x1045*x1053))+((cj4*x1044*x1046))+((sj4*x1041*x1051))+(((-1.0)*sj4*x1046*x1051))+(((-1.0)*sj4*x1041*x1047))+(((-1.0)*x1042*x1052))+((sj4*x1046*x1047))+((cj5*x1046*x1048))+(((-1.0)*x1041*x1043*x1044))+(((-1.0)*x1041*x1043*x1049))+((x1045*x1050))))+IKsqr((((sj4*x1044*x1046))+(((-1.0)*x1043*x1046*x1047))+((sj1*sj4*x1045))+((sj5*x1046*x1048))+((x1042*x1050))+(((-1.0)*sj4*x1041*x1044))+(((-1.0)*sj4*x1041*x1049))+(((-1.0)*x1042*x1053))+((cj4*x1041*x1047))+((sj4*x1046*x1049))+(((-1.0)*x1041*x1043*x1051))+((x1045*x1048))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x1042*x1043))+(((-1.0)*x1045*x1053))+((cj4*x1044*x1046))+((sj4*x1041*x1051))+(((-1.0)*sj4*x1046*x1051))+(((-1.0)*sj4*x1041*x1047))+(((-1.0)*x1042*x1052))+((sj4*x1046*x1047))+((cj5*x1046*x1048))+(((-1.0)*x1041*x1043*x1044))+(((-1.0)*x1041*x1043*x1049))+((x1045*x1050))), (((sj4*x1044*x1046))+(((-1.0)*x1043*x1046*x1047))+((sj1*sj4*x1045))+((sj5*x1046*x1048))+((x1042*x1050))+(((-1.0)*sj4*x1041*x1044))+(((-1.0)*sj4*x1041*x1049))+(((-1.0)*x1042*x1053))+((cj4*x1041*x1047))+((sj4*x1046*x1049))+(((-1.0)*x1041*x1043*x1051))+((x1045*x1048))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1054=IKsin(j2);
IkReal x1055=IKcos(j2);
IkReal x1056=((0.15)*sj0);
IkReal x1057=(cj5*r12);
IkReal x1058=(sj0*sj4);
IkReal x1059=((1.0)*sj5);
IkReal x1060=((1.8e-7)*gconst4);
IkReal x1061=(cj0*r02);
IkReal x1062=((1.11e-6)*sj5);
IkReal x1063=(cj4*sj0);
IkReal x1064=(cj5*gconst5);
IkReal x1065=(cj0*r00);
IkReal x1066=(r11*sj0);
IkReal x1067=(gconst5*r10);
IkReal x1068=((1.0)*sj4);
IkReal x1069=(gconst5*sj4);
IkReal x1070=(cj4*cj5);
IkReal x1071=(gconst4*sj5);
IkReal x1072=(cj0*r01);
IkReal x1073=(cj5*gconst4);
IkReal x1074=(r21*sj4);
IkReal x1075=((0.15)*cj5);
IkReal x1076=(r22*sj4);
IkReal x1077=((1.0)*gconst4);
IkReal x1078=((1.8e-7)*gconst5);
IkReal x1079=(cj4*sj5);
IkReal x1080=(r11*x1071);
IkReal x1081=(cj4*gconst5*r20);
IkReal x1082=(cj1*x1054);
IkReal x1083=((1.0)*x1055);
IkReal x1084=(sj1*x1054);
IkReal x1085=((0.15)*gconst5*sj5);
IkReal x1086=(sj1*x1055);
IkReal x1087=((1.0)*x1084);
IkReal x1088=(cj1*x1083);
IkReal x1089=(x1087+x1088);
evalcond[0]=((((-1.0)*sj1*x1083))+x1082+((cj4*r20*x1064))+(((-1.0)*r21*x1070*x1077))+((x1071*x1074))+(((-1.0)*r20*x1059*x1069))+((cj5*x1076))+((r22*x1079)));
evalcond[1]=(((cj4*r21*x1071))+(((-1.0)*x1059*x1076))+(((-1.0)*r20*x1064*x1068))+(((-1.0)*x1059*x1081))+((x1073*x1074))+((r22*x1070))+(((-1.0)*x1089)));
evalcond[2]=((((-1.0)*r21*x1060))+(((0.335)*x1086))+(((-1.11e-6)*r20*x1064))+(((-1.0)*r22*x1062))+(((-0.21066117)*sj1))+((r20*x1078))+(((-1.0)*pz))+(((-0.17676784)*cj1))+((r22*x1075))+(((0.15)*r21*x1071))+(((1.11e-6)*r21*x1073))+(((-1.0)*r20*x1085))+(((-0.335)*x1082)));
evalcond[3]=(((x1061*x1079))+(((-1.0)*x1058*x1059*x1067))+((x1057*x1058))+((sj4*x1071*x1072))+((r12*sj5*x1063))+(((-1.0)*x1070*x1072*x1077))+((x1058*x1080))+(((-1.0)*r11*x1063*x1073))+((cj4*x1064*x1065))+((cj5*sj4*x1061))+(((-1.0)*x1089))+((r10*x1063*x1064))+(((-1.0)*x1059*x1065*x1069)));
evalcond[4]=((((-1.0)*r12*x1058*x1059))+(((-1.0)*sj4*x1059*x1061))+((sj4*x1072*x1073))+x1086+((x1061*x1070))+((r11*x1058*x1073))+((x1063*x1080))+(((-1.0)*x1082))+((x1057*x1063))+(((-1.0)*x1064*x1065*x1068))+(((-1.0)*r10*x1058*x1064))+((cj4*x1071*x1072))+(((-1.0)*cj4*gconst5*x1059*x1065))+(((-1.0)*x1059*x1063*x1067)));
evalcond[5]=(((x1056*x1080))+(((-1.0)*x1060*x1066))+(((-1.11e-6)*r10*sj0*x1064))+(((0.15)*x1071*x1072))+(((0.335)*x1084))+(((-1.0)*x1065*x1085))+((x1061*x1075))+(((-0.21066117)*cj1))+((x1056*x1057))+(((0.17676784)*sj1))+(((1.11e-6)*x1072*x1073))+(((0.335)*cj1*x1055))+(((-1.0)*x1061*x1062))+(((-1.0)*sj5*x1056*x1067))+(((-1.0)*r12*sj0*x1062))+(((-1.0)*py*sj0))+(((1.8e-7)*sj0*x1067))+(((-1.11e-6)*x1064*x1065))+((x1065*x1078))+(((-1.0)*cj0*px))+(((1.11e-6)*x1066*x1073))+(((-1.0)*x1060*x1072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1090=((1.0)*gconst4);
IkReal x1091=(cj0*cj1);
IkReal x1092=(gconst5*r01);
IkReal x1093=(cj0*sj1);
IkReal x1094=(gconst5*sj1);
IkReal x1095=((1.0)*r21);
IkReal x1096=(r11*sj0);
IkReal x1097=(r10*sj0);
IkReal x1098=(cj1*gconst5);
if( IKabs(((((-1.0)*x1096*x1098))+(((-1.0)*x1091*x1092))+(((-1.0)*r20*sj1*x1090))+(((-1.0)*cj1*x1090*x1097))+(((-1.0)*x1094*x1095))+(((-1.0)*r00*x1090*x1091)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1094*x1096))+((gconst4*r00*x1093))+((gconst4*sj1*x1097))+(((-1.0)*x1095*x1098))+((x1092*x1093))+(((-1.0)*cj1*r20*x1090)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1096*x1098))+(((-1.0)*x1091*x1092))+(((-1.0)*r20*sj1*x1090))+(((-1.0)*cj1*x1090*x1097))+(((-1.0)*x1094*x1095))+(((-1.0)*r00*x1090*x1091))))+IKsqr((((x1094*x1096))+((gconst4*r00*x1093))+((gconst4*sj1*x1097))+(((-1.0)*x1095*x1098))+((x1092*x1093))+(((-1.0)*cj1*r20*x1090))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1096*x1098))+(((-1.0)*x1091*x1092))+(((-1.0)*r20*sj1*x1090))+(((-1.0)*cj1*x1090*x1097))+(((-1.0)*x1094*x1095))+(((-1.0)*r00*x1090*x1091))), (((x1094*x1096))+((gconst4*r00*x1093))+((gconst4*sj1*x1097))+(((-1.0)*x1095*x1098))+((x1092*x1093))+(((-1.0)*cj1*r20*x1090))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1099=IKcos(j2);
IkReal x1100=IKsin(j2);
IkReal x1101=((0.15)*sj0);
IkReal x1102=(cj5*r12);
IkReal x1103=(sj0*sj4);
IkReal x1104=((1.8e-7)*gconst4);
IkReal x1105=((1.11e-6)*sj5);
IkReal x1106=(cj0*r02);
IkReal x1107=(r12*sj0);
IkReal x1108=(cj0*r00);
IkReal x1109=(r11*sj0);
IkReal x1110=((1.0)*gconst4);
IkReal x1111=(cj4*cj5);
IkReal x1112=(gconst4*r21);
IkReal x1113=(sj4*sj5);
IkReal x1114=((0.15)*cj5);
IkReal x1115=((0.15)*sj5);
IkReal x1116=(cj5*sj4);
IkReal x1117=((1.11e-6)*cj5);
IkReal x1118=(cj4*sj5);
IkReal x1119=(cj0*r01);
IkReal x1120=(gconst5*r10);
IkReal x1121=(gconst5*r20);
IkReal x1122=((1.0)*gconst5);
IkReal x1123=(r10*sj0);
IkReal x1124=(gconst4*r11*sj5);
IkReal x1125=(gconst5*x1111);
IkReal x1126=(sj5*x1122);
IkReal x1127=(cj1*x1100);
IkReal x1128=((1.0)*x1099);
IkReal x1129=(sj1*x1100);
IkReal x1130=(sj1*x1099);
IkReal x1131=((1.0)*x1129);
IkReal x1132=(cj1*x1128);
IkReal x1133=(x1132+x1131);
evalcond[0]=((((-1.0)*r20*x1110))+(((-1.0)*x1133))+(((-1.0)*r21*x1122)));
evalcond[1]=(x1130+(((-1.0)*x1109*x1122))+(((-1.0)*x1108*x1110))+(((-1.0)*x1127))+(((-1.0)*x1110*x1123))+(((-1.0)*x1119*x1122)));
evalcond[2]=(x1127+(((-1.0)*sj1*x1128))+((x1112*x1113))+((x1111*x1121))+((r22*x1116))+((r22*x1118))+(((-1.0)*x1113*x1121))+(((-1.0)*r21*x1110*x1111)));
evalcond[3]=((((0.335)*x1130))+(((-0.21066117)*sj1))+((x1112*x1117))+((x1112*x1115))+(((-1.0)*x1117*x1121))+(((-0.335)*x1127))+(((-1.0)*r22*x1105))+(((1.8e-7)*x1121))+(((-1.0)*r21*x1104))+(((-1.0)*pz))+(((-0.17676784)*cj1))+((r22*x1114))+(((-1.0)*x1115*x1121)));
evalcond[4]=(((x1102*x1103))+((sj0*x1111*x1120))+(((-1.0)*x1109*x1110*x1111))+((gconst4*x1113*x1119))+((x1108*x1125))+((x1103*x1124))+(((-1.0)*sj5*x1103*x1120))+(((-1.0)*x1133))+(((-1.0)*x1108*x1113*x1122))+((x1107*x1118))+((x1106*x1116))+((x1106*x1118))+(((-1.0)*x1110*x1111*x1119)));
evalcond[5]=((((0.335)*x1129))+(((-1.0)*gconst5*x1108*x1115))+(((-1.0)*gconst5*x1108*x1117))+(((-0.21066117)*cj1))+((x1101*x1124))+(((0.335)*cj1*x1099))+(((0.17676784)*sj1))+(((-1.0)*sj5*x1101*x1120))+((gconst4*x1115*x1119))+((x1101*x1102))+(((1.8e-7)*gconst5*x1108))+(((1.8e-7)*sj0*x1120))+(((-1.0)*py*sj0))+((gconst4*x1109*x1117))+(((-1.0)*x1104*x1109))+(((-1.0)*x1104*x1119))+(((-1.0)*sj0*x1117*x1120))+((gconst4*x1117*x1119))+(((-1.0)*cj0*px))+((x1106*x1114))+(((-1.0)*x1105*x1106))+(((-1.0)*x1105*x1107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1134=((1.0)*r22);
IkReal x1135=(gconst5*r20);
IkReal x1136=(gconst4*r21);
IkReal x1137=(cj5*sj4);
IkReal x1138=(sj1*sj5);
IkReal x1139=(r22*sj4);
IkReal x1140=((1.0)*sj4);
IkReal x1141=(cj1*sj5);
IkReal x1142=(cj4*x1141);
IkReal x1143=(cj1*cj4*cj5);
IkReal x1144=(cj4*cj5*sj1);
if( IKabs(((((-1.0)*sj1*x1136*x1137))+((sj1*x1135*x1137))+(((-1.0)*x1134*x1142))+(((-1.0)*x1134*x1144))+(((-1.0)*cj4*x1136*x1138))+((sj4*x1135*x1141))+((x1138*x1139))+(((-1.0)*cj1*x1134*x1137))+(((-1.0)*x1136*x1140*x1141))+(((-1.0)*x1135*x1143))+((cj4*x1135*x1138))+((x1136*x1143)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*sj1*x1137))+((cj1*x1135*x1137))+(((-1.0)*x1135*x1138*x1140))+(((-1.0)*x1136*x1142))+(((-1.0)*x1136*x1144))+(((-1.0)*x1134*x1143))+(((-1.0)*cj1*x1136*x1137))+((sj4*x1136*x1138))+((x1139*x1141))+((cj4*r22*x1138))+((x1135*x1144))+((x1135*x1142)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj1*x1136*x1137))+((sj1*x1135*x1137))+(((-1.0)*x1134*x1142))+(((-1.0)*x1134*x1144))+(((-1.0)*cj4*x1136*x1138))+((sj4*x1135*x1141))+((x1138*x1139))+(((-1.0)*cj1*x1134*x1137))+(((-1.0)*x1136*x1140*x1141))+(((-1.0)*x1135*x1143))+((cj4*x1135*x1138))+((x1136*x1143))))+IKsqr((((r22*sj1*x1137))+((cj1*x1135*x1137))+(((-1.0)*x1135*x1138*x1140))+(((-1.0)*x1136*x1142))+(((-1.0)*x1136*x1144))+(((-1.0)*x1134*x1143))+(((-1.0)*cj1*x1136*x1137))+((sj4*x1136*x1138))+((x1139*x1141))+((cj4*r22*x1138))+((x1135*x1144))+((x1135*x1142))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj1*x1136*x1137))+((sj1*x1135*x1137))+(((-1.0)*x1134*x1142))+(((-1.0)*x1134*x1144))+(((-1.0)*cj4*x1136*x1138))+((sj4*x1135*x1141))+((x1138*x1139))+(((-1.0)*cj1*x1134*x1137))+(((-1.0)*x1136*x1140*x1141))+(((-1.0)*x1135*x1143))+((cj4*x1135*x1138))+((x1136*x1143))), (((r22*sj1*x1137))+((cj1*x1135*x1137))+(((-1.0)*x1135*x1138*x1140))+(((-1.0)*x1136*x1142))+(((-1.0)*x1136*x1144))+(((-1.0)*x1134*x1143))+(((-1.0)*cj1*x1136*x1137))+((sj4*x1136*x1138))+((x1139*x1141))+((cj4*r22*x1138))+((x1135*x1144))+((x1135*x1142))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1145=IKcos(j2);
IkReal x1146=IKsin(j2);
IkReal x1147=((1.0)*sj5);
IkReal x1148=((1.8e-7)*gconst4);
IkReal x1149=(cj0*r02);
IkReal x1150=((1.11e-6)*sj5);
IkReal x1151=(r12*sj0);
IkReal x1152=(cj5*gconst5);
IkReal x1153=(cj0*r00);
IkReal x1154=(r11*sj0);
IkReal x1155=(gconst5*sj4);
IkReal x1156=(r10*sj0);
IkReal x1157=((1.0)*sj4);
IkReal x1158=(cj4*cj5);
IkReal x1159=(gconst4*sj5);
IkReal x1160=(cj0*r01);
IkReal x1161=((1.0)*gconst4);
IkReal x1162=(r21*sj4);
IkReal x1163=((0.15)*cj5);
IkReal x1164=(cj4*gconst5);
IkReal x1165=((1.0)*sj1);
IkReal x1166=(cj5*gconst4);
IkReal x1167=(r22*sj4);
IkReal x1168=((1.8e-7)*gconst5);
IkReal x1169=(cj4*sj5);
IkReal x1170=(cj1*x1146);
IkReal x1171=(cj1*x1145);
IkReal x1172=(cj5*x1151);
IkReal x1173=(r20*x1164);
IkReal x1174=(sj1*x1146);
IkReal x1175=((0.15)*gconst5*sj5);
IkReal x1176=(x1145*x1165);
IkReal x1177=(x1154*x1159);
evalcond[0]=(x1170+((x1159*x1162))+(((-1.0)*r21*x1158*x1161))+((cj5*x1167))+(((-1.0)*r20*x1147*x1155))+((cj4*r20*x1152))+((r22*x1169))+(((-1.0)*x1176)));
evalcond[1]=(x1174+x1171+(((-1.0)*x1147*x1173))+(((-1.0)*x1147*x1167))+((r22*x1158))+((x1162*x1166))+((cj4*r21*x1159))+(((-1.0)*r20*x1152*x1157)));
evalcond[2]=((((-1.0)*r20*x1175))+((r20*x1168))+(((-0.21066117)*sj1))+(((0.15)*r21*x1159))+(((-0.335)*x1170))+(((-1.11e-6)*r20*x1152))+(((-1.0)*r21*x1148))+(((-1.0)*pz))+(((-0.17676784)*cj1))+(((1.11e-6)*r21*x1166))+((r22*x1163))+(((-1.0)*r22*x1150))+(((0.335)*sj1*x1145)));
evalcond[3]=(((cj5*sj4*x1149))+(((-1.0)*x1147*x1153*x1155))+((sj4*x1159*x1160))+((x1149*x1169))+(((-1.0)*x1154*x1158*x1161))+((sj4*x1172))+((sj4*x1177))+(((-1.0)*x1158*x1160*x1161))+((x1151*x1169))+(((-1.0)*x1147*x1155*x1156))+(((-1.0)*x1146*x1165))+((cj4*x1152*x1156))+((cj4*x1152*x1153))+(((-1.0)*x1171)));
evalcond[4]=(((sj4*x1154*x1166))+x1170+((x1149*x1158))+((cj4*x1159*x1160))+((sj4*x1160*x1166))+((cj4*x1177))+(((-1.0)*x1152*x1156*x1157))+(((-1.0)*x1152*x1153*x1157))+((x1151*x1158))+(((-1.0)*sj4*x1147*x1151))+(((-1.0)*x1147*x1156*x1164))+(((-1.0)*x1176))+(((-1.0)*sj4*x1147*x1149))+(((-1.0)*x1147*x1153*x1164)));
evalcond[5]=((((0.15)*x1159*x1160))+(((0.15)*x1177))+(((-1.0)*x1149*x1150))+(((1.11e-6)*x1160*x1166))+((x1153*x1168))+(((-0.21066117)*cj1))+(((0.335)*x1174))+(((0.335)*x1171))+(((0.17676784)*sj1))+(((-1.0)*x1148*x1160))+((x1149*x1163))+((x1156*x1168))+(((-1.0)*x1153*x1175))+(((-1.11e-6)*x1152*x1153))+(((-1.11e-6)*x1152*x1156))+(((-1.0)*py*sj0))+(((-1.0)*x1148*x1154))+(((1.11e-6)*x1154*x1166))+((x1151*x1163))+(((-1.0)*cj0*px))+(((-1.0)*x1150*x1151))+(((-1.0)*x1156*x1175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1178=(gconst5*r01);
IkReal x1179=(gconst4*r00);
IkReal x1180=(cj1*gconst4);
IkReal x1181=(gconst5*r21);
IkReal x1182=((1.0)*sj1);
IkReal x1183=(r10*sj0);
IkReal x1184=(cj0*cj1);
IkReal x1185=(cj0*x1182);
IkReal x1186=(gconst5*r11*sj0);
if( IKabs((((x1178*x1184))+((gconst4*r20*sj1))+((x1180*x1183))+((x1179*x1184))+((sj1*x1181))+((cj1*x1186)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1179*x1185))+(((-1.0)*x1178*x1185))+(((-1.0)*x1182*x1186))+(((-1.0)*gconst4*x1182*x1183))+((cj1*x1181))+((r20*x1180)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1178*x1184))+((gconst4*r20*sj1))+((x1180*x1183))+((x1179*x1184))+((sj1*x1181))+((cj1*x1186))))+IKsqr(((((-1.0)*x1179*x1185))+(((-1.0)*x1178*x1185))+(((-1.0)*x1182*x1186))+(((-1.0)*gconst4*x1182*x1183))+((cj1*x1181))+((r20*x1180))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1178*x1184))+((gconst4*r20*sj1))+((x1180*x1183))+((x1179*x1184))+((sj1*x1181))+((cj1*x1186))), ((((-1.0)*x1179*x1185))+(((-1.0)*x1178*x1185))+(((-1.0)*x1182*x1186))+(((-1.0)*gconst4*x1182*x1183))+((cj1*x1181))+((r20*x1180))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1187=IKsin(j2);
IkReal x1188=IKcos(j2);
IkReal x1189=((1.8e-7)*gconst4);
IkReal x1190=((1.11e-6)*sj5);
IkReal x1191=(cj0*r02);
IkReal x1192=(r11*sj0);
IkReal x1193=(sj4*sj5);
IkReal x1194=(r12*sj0);
IkReal x1195=(cj0*r00);
IkReal x1196=((1.0)*gconst5);
IkReal x1197=(r10*sj0);
IkReal x1198=((0.15)*sj5);
IkReal x1199=((1.0)*gconst4);
IkReal x1200=(cj4*cj5);
IkReal x1201=(gconst4*r21);
IkReal x1202=((0.15)*cj5);
IkReal x1203=((1.11e-6)*cj5);
IkReal x1204=(cj5*sj4);
IkReal x1205=(cj0*r01);
IkReal x1206=((1.8e-7)*gconst5);
IkReal x1207=(gconst5*r20);
IkReal x1208=(cj4*sj5);
IkReal x1209=(cj1*x1187);
IkReal x1210=(cj1*x1188);
IkReal x1211=(cj5*x1194);
IkReal x1212=(gconst5*x1200);
IkReal x1213=(sj1*x1188);
IkReal x1214=(sj1*x1187);
IkReal x1215=((1.0)*x1213);
evalcond[0]=(x1210+x1214+(((-1.0)*r21*x1196))+(((-1.0)*r20*x1199)));
evalcond[1]=(x1209+(((-1.0)*x1196*x1205))+(((-1.0)*x1195*x1199))+(((-1.0)*x1197*x1199))+(((-1.0)*x1215))+(((-1.0)*x1192*x1196)));
evalcond[2]=(x1209+((x1193*x1201))+((x1200*x1207))+(((-1.0)*r20*x1193*x1196))+(((-1.0)*x1215))+(((-1.0)*r21*x1199*x1200))+((r22*x1208))+((r22*x1204)));
evalcond[3]=((((-0.335)*x1209))+(((-0.21066117)*sj1))+(((-1.0)*r22*x1190))+(((-1.0)*pz))+((r20*x1206))+(((-1.0)*x1203*x1207))+(((-0.17676784)*cj1))+((x1201*x1203))+(((0.335)*x1213))+((r22*x1202))+(((-1.0)*r21*x1189))+((x1198*x1201))+(((-1.0)*x1198*x1207)));
evalcond[4]=((((-1.0)*x1199*x1200*x1205))+(((-1.0)*x1193*x1195*x1196))+((x1197*x1212))+(((-1.0)*x1192*x1199*x1200))+((gconst4*x1192*x1193))+((x1191*x1204))+((x1191*x1208))+((x1194*x1208))+((x1194*x1204))+((gconst4*x1193*x1205))+(((-1.0)*x1193*x1196*x1197))+((x1195*x1212))+(((-1.0)*x1214))+(((-1.0)*x1210)));
evalcond[5]=(((gconst4*x1198*x1205))+(((-1.0)*x1189*x1192))+(((-1.0)*x1190*x1194))+(((-1.0)*x1190*x1191))+(((-0.21066117)*cj1))+(((0.17676784)*sj1))+(((-1.0)*x1189*x1205))+(((-1.0)*gconst5*x1197*x1203))+((gconst4*x1192*x1198))+((x1191*x1202))+(((-1.0)*gconst5*x1195*x1198))+(((-1.0)*gconst5*x1197*x1198))+((x1197*x1206))+((x1194*x1202))+((x1195*x1206))+(((-1.0)*py*sj0))+((gconst4*x1192*x1203))+(((-1.0)*gconst5*x1195*x1203))+((gconst4*x1203*x1205))+(((-1.0)*cj0*px))+(((0.335)*x1210))+(((0.335)*x1214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1216=(cj3*sj1);
IkReal x1217=(gconst5*r20);
IkReal x1218=(r22*sj5);
IkReal x1219=(cj5*r22);
IkReal x1220=((1.0)*sj5);
IkReal x1221=(gconst4*r21);
IkReal x1222=(sj3*sj4);
IkReal x1223=(cj0*gconst5*r01);
IkReal x1224=(gconst4*r10*sj0);
IkReal x1225=(cj1*cj4*sj3);
IkReal x1226=(sj5*x1221);
IkReal x1227=((1.0)*cj1*cj3);
IkReal x1228=(gconst5*r11*sj0);
IkReal x1229=(cj0*gconst4*r00);
IkReal x1230=(cj4*sj1*sj3);
IkReal x1231=((1.0)*sj1*x1222);
IkReal x1232=(cj1*cj5*x1222);
CheckValue<IkReal> x1233=IKPowWithIntegerCheck(IKsign((cj3*sj3)),-1);
if(!x1233.valid){
continue;
}
CheckValue<IkReal> x1234 = IKatan2WithCheck(IkReal(((((-1.0)*x1224*x1227))+(((-1.0)*x1218*x1231))+((x1219*x1230))+((cj5*sj1*x1221*x1222))+(((-1.0)*x1227*x1228))+(((-1.0)*x1227*x1229))+(((-1.0)*x1217*x1220*x1230))+(((-1.0)*cj5*x1217*x1231))+((x1226*x1230))+(((-1.0)*x1223*x1227)))),IkReal((((x1216*x1229))+((x1216*x1228))+((x1216*x1223))+((x1216*x1224))+((x1219*x1225))+(((-1.0)*x1217*x1232))+((x1225*x1226))+(((-1.0)*x1217*x1220*x1225))+((x1221*x1232))+(((-1.0)*cj1*x1218*x1222)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1234.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1233.value)))+(x1234.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1235=IKcos(j2);
IkReal x1236=IKsin(j2);
IkReal x1237=(cj0*r02);
IkReal x1238=((1.11e-6)*sj5);
IkReal x1239=((1.0)*gconst4);
IkReal x1240=(r12*sj0);
IkReal x1241=((1.11e-6)*cj5);
IkReal x1242=(cj5*r22);
IkReal x1243=(r10*sj0);
IkReal x1244=(cj4*cj5);
IkReal x1245=(gconst4*r21);
IkReal x1246=((1.0)*gconst5);
IkReal x1247=(cj5*sj4);
IkReal x1248=(cj4*sj5);
IkReal x1249=(cj0*r00);
IkReal x1250=((0.15)*sj5);
IkReal x1251=((1.8e-7)*gconst5);
IkReal x1252=(gconst5*r20);
IkReal x1253=(r11*sj0);
IkReal x1254=((0.15)*cj5);
IkReal x1255=(cj0*gconst4*r01);
IkReal x1256=(sj4*x1245);
IkReal x1257=((1.0)*sj4*sj5);
IkReal x1258=(cj1*x1236);
IkReal x1259=(sj1*x1235);
IkReal x1260=(gconst4*sj5*x1253);
IkReal x1261=((1.0)*x1258);
IkReal x1262=((1.0)*cj1*x1235);
IkReal x1263=((1.0)*sj1*x1236);
evalcond[0]=((((-1.0)*r20*x1239))+(((-1.0)*r21*x1246))+(((-1.0)*sj3*x1262))+(((-1.0)*sj3*x1263)));
evalcond[1]=((((-1.0)*x1239*x1243))+(((-1.0)*x1239*x1249))+(((-1.0)*sj3*x1261))+(((-1.0)*x1246*x1253))+(((-1.0)*cj0*r01*x1246))+((sj3*x1259)));
evalcond[2]=(x1258+((sj5*x1256))+(((-1.0)*r21*x1239*x1244))+((r22*x1248))+(((-1.0)*x1259))+(((-1.0)*r20*sj4*sj5*x1246))+((sj4*x1242))+((x1244*x1252)));
evalcond[3]=((((-1.0)*cj3*x1263))+(((-1.0)*cj3*x1262))+((cj4*x1242))+(((-1.0)*r22*x1257))+((x1245*x1247))+((x1245*x1248))+(((-1.0)*r20*x1246*x1248))+(((-1.0)*r20*x1246*x1247)));
evalcond[4]=((((-0.21066117)*sj1))+((x1245*x1250))+(((-0.335)*x1258))+(((0.15)*x1242))+(((-1.0)*x1241*x1252))+(((-1.8e-7)*x1245))+(((-1.0)*pz))+(((-0.17676784)*cj1))+(((0.335)*x1259))+(((-1.0)*x1250*x1252))+((x1241*x1245))+((r20*x1251))+(((-1.0)*r22*x1238)));
evalcond[5]=((((-1.0)*x1239*x1244*x1253))+(((-1.0)*cj0*r01*x1239*x1244))+((x1240*x1247))+((x1240*x1248))+((gconst5*x1243*x1244))+((sj4*x1260))+(((-1.0)*sj4*sj5*x1246*x1249))+(((-1.0)*sj4*sj5*x1243*x1246))+((gconst5*x1244*x1249))+((sj4*sj5*x1255))+(((-1.0)*x1262))+(((-1.0)*x1263))+((x1237*x1247))+((x1237*x1248)));
evalcond[6]=(((x1247*x1255))+(((-1.0)*x1237*x1257))+(((-1.0)*x1246*x1247*x1249))+(((-1.0)*x1243*x1246*x1248))+(((-1.0)*x1243*x1246*x1247))+(((-1.0)*cj3*x1261))+((x1240*x1244))+((cj3*x1259))+((gconst4*x1248*x1253))+((gconst4*x1247*x1253))+((x1248*x1255))+(((-1.0)*x1240*x1257))+(((-1.0)*x1246*x1248*x1249))+((x1237*x1244)));
evalcond[7]=(((gconst4*x1241*x1253))+(((-0.21066117)*cj1))+((x1241*x1255))+(((-1.0)*gconst5*x1243*x1250))+((x1243*x1251))+(((0.335)*sj1*x1236))+(((0.17676784)*sj1))+(((-1.8e-7)*gconst4*x1253))+(((-1.0)*gconst5*x1241*x1243))+(((-1.0)*gconst5*x1241*x1249))+(((-1.0)*x1237*x1238))+((x1237*x1254))+((x1250*x1255))+(((-1.0)*x1238*x1240))+(((-1.0)*gconst5*x1249*x1250))+(((-1.0)*py*sj0))+(((0.335)*cj1*x1235))+((x1240*x1254))+((x1249*x1251))+(((-1.8e-7)*x1255))+((gconst4*x1250*x1253))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1264=(r20*sj1);
IkReal x1265=(gconst5*sj3);
IkReal x1266=(cj4*cj5);
IkReal x1267=((1.0)*gconst4);
IkReal x1268=(sj1*sj3);
IkReal x1269=(r21*sj3);
IkReal x1270=((1.0)*cj1);
IkReal x1271=(gconst5*r21);
IkReal x1272=(sj4*sj5);
IkReal x1273=(cj1*x1272);
IkReal x1274=(cj5*r22*sj4);
IkReal x1275=(cj4*r22*sj5);
CheckValue<IkReal> x1276=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1276.valid){
continue;
}
CheckValue<IkReal> x1277 = IKatan2WithCheck(IkReal(((((-1.0)*x1264*x1267))+((r20*x1265*x1273))+((cj1*gconst4*x1266*x1269))+(((-1.0)*r20*x1265*x1266*x1270))+(((-1.0)*sj1*x1271))+(((-1.0)*x1267*x1269*x1273))+(((-1.0)*sj3*x1270*x1275))+(((-1.0)*sj3*x1270*x1274)))),IkReal(((((-1.0)*x1270*x1271))+((x1264*x1265*x1266))+(((-1.0)*cj1*r20*x1267))+((x1268*x1274))+((x1268*x1275))+((gconst4*r21*x1268*x1272))+(((-1.0)*x1264*x1265*x1272))+(((-1.0)*r21*x1266*x1267*x1268)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1277.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1276.value)))+(x1277.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1278=IKcos(j2);
IkReal x1279=IKsin(j2);
IkReal x1280=(cj0*r02);
IkReal x1281=((1.11e-6)*sj5);
IkReal x1282=((1.0)*gconst4);
IkReal x1283=(r12*sj0);
IkReal x1284=((1.11e-6)*cj5);
IkReal x1285=(cj5*r22);
IkReal x1286=(r10*sj0);
IkReal x1287=(cj4*cj5);
IkReal x1288=(gconst4*r21);
IkReal x1289=((1.0)*gconst5);
IkReal x1290=(cj5*sj4);
IkReal x1291=(cj4*sj5);
IkReal x1292=(cj0*r00);
IkReal x1293=((0.15)*sj5);
IkReal x1294=((1.8e-7)*gconst5);
IkReal x1295=(gconst5*r20);
IkReal x1296=(r11*sj0);
IkReal x1297=((0.15)*cj5);
IkReal x1298=(cj0*gconst4*r01);
IkReal x1299=(sj4*x1288);
IkReal x1300=((1.0)*sj4*sj5);
IkReal x1301=(cj1*x1279);
IkReal x1302=(sj1*x1278);
IkReal x1303=(gconst4*sj5*x1296);
IkReal x1304=((1.0)*x1301);
IkReal x1305=((1.0)*cj1*x1278);
IkReal x1306=((1.0)*sj1*x1279);
evalcond[0]=((((-1.0)*r21*x1289))+(((-1.0)*sj3*x1306))+(((-1.0)*sj3*x1305))+(((-1.0)*r20*x1282)));
evalcond[1]=(((sj3*x1302))+(((-1.0)*cj0*r01*x1289))+(((-1.0)*x1289*x1296))+(((-1.0)*x1282*x1292))+(((-1.0)*sj3*x1304))+(((-1.0)*x1282*x1286)));
evalcond[2]=(((sj5*x1299))+x1301+(((-1.0)*r20*sj4*sj5*x1289))+(((-1.0)*r21*x1282*x1287))+((x1287*x1295))+((sj4*x1285))+(((-1.0)*x1302))+((r22*x1291)));
evalcond[3]=((((-1.0)*cj3*x1305))+(((-1.0)*cj3*x1306))+((cj4*x1285))+(((-1.0)*r22*x1300))+((x1288*x1290))+((x1288*x1291))+(((-1.0)*r20*x1289*x1290))+(((-1.0)*r20*x1289*x1291)));
evalcond[4]=((((-0.335)*x1301))+(((-1.0)*x1284*x1295))+((r20*x1294))+(((0.15)*x1285))+(((-1.0)*r22*x1281))+(((-0.21066117)*sj1))+((x1284*x1288))+(((0.335)*x1302))+(((-1.0)*pz))+(((-1.0)*x1293*x1295))+((x1288*x1293))+(((-0.17676784)*cj1))+(((-1.8e-7)*x1288)));
evalcond[5]=((((-1.0)*sj4*sj5*x1286*x1289))+(((-1.0)*cj0*r01*x1282*x1287))+(((-1.0)*sj4*sj5*x1289*x1292))+((x1280*x1290))+((x1280*x1291))+((gconst5*x1287*x1292))+(((-1.0)*x1306))+(((-1.0)*x1305))+((sj4*sj5*x1298))+((gconst5*x1286*x1287))+(((-1.0)*x1282*x1287*x1296))+((sj4*x1303))+((x1283*x1290))+((x1283*x1291)));
evalcond[6]=((((-1.0)*x1289*x1291*x1292))+((gconst4*x1291*x1296))+(((-1.0)*cj3*x1304))+(((-1.0)*x1289*x1290*x1292))+(((-1.0)*x1286*x1289*x1291))+(((-1.0)*x1286*x1289*x1290))+((x1290*x1298))+((x1291*x1298))+(((-1.0)*x1283*x1300))+((x1283*x1287))+((cj3*x1302))+((gconst4*x1290*x1296))+((x1280*x1287))+(((-1.0)*x1280*x1300)));
evalcond[7]=((((0.335)*sj1*x1279))+(((-0.21066117)*cj1))+((x1286*x1294))+(((-1.8e-7)*x1298))+(((0.335)*cj1*x1278))+(((0.17676784)*sj1))+(((-1.0)*gconst5*x1284*x1292))+((x1280*x1297))+((x1293*x1298))+(((-1.0)*gconst5*x1286*x1293))+((gconst4*x1293*x1296))+(((-1.0)*py*sj0))+((x1284*x1298))+(((-1.8e-7)*gconst4*x1296))+(((-1.0)*gconst5*x1292*x1293))+((gconst4*x1284*x1296))+(((-1.0)*x1280*x1281))+((x1292*x1294))+((x1283*x1297))+(((-1.0)*cj0*px))+(((-1.0)*gconst5*x1284*x1286))+(((-1.0)*x1281*x1283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1307=(gconst5*r01);
IkReal x1308=(gconst4*r00);
IkReal x1309=((1.0)*sj1);
IkReal x1310=(gconst4*r20);
IkReal x1311=(cj0*sj1);
IkReal x1312=(gconst5*r21);
IkReal x1313=(sj0*sj1);
IkReal x1314=(gconst5*r11);
IkReal x1315=((1.0)*cj1);
IkReal x1316=(gconst4*r10);
IkReal x1317=(cj0*x1315);
CheckValue<IkReal> x1318 = IKatan2WithCheck(IkReal(((((-1.0)*x1308*x1317))+(((-1.0)*sj0*x1314*x1315))+(((-1.0)*x1307*x1317))+(((-1.0)*sj0*x1315*x1316))+(((-1.0)*x1309*x1310))+(((-1.0)*x1309*x1312)))),IkReal((((x1313*x1314))+((x1313*x1316))+((x1307*x1311))+((x1308*x1311))+(((-1.0)*x1310*x1315))+(((-1.0)*x1312*x1315)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1318.valid){
continue;
}
CheckValue<IkReal> x1319=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1319.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1318.value)+(((1.5707963267949)*(x1319.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1320=IKcos(j2);
IkReal x1321=IKsin(j2);
IkReal x1322=(cj0*r02);
IkReal x1323=((1.11e-6)*sj5);
IkReal x1324=((1.0)*gconst4);
IkReal x1325=(r12*sj0);
IkReal x1326=((1.11e-6)*cj5);
IkReal x1327=(cj5*r22);
IkReal x1328=(r10*sj0);
IkReal x1329=(cj4*cj5);
IkReal x1330=(gconst4*r21);
IkReal x1331=((1.0)*gconst5);
IkReal x1332=(cj5*sj4);
IkReal x1333=(cj4*sj5);
IkReal x1334=(cj0*r00);
IkReal x1335=((0.15)*sj5);
IkReal x1336=((1.8e-7)*gconst5);
IkReal x1337=(gconst5*r20);
IkReal x1338=(r11*sj0);
IkReal x1339=((0.15)*cj5);
IkReal x1340=(cj0*gconst4*r01);
IkReal x1341=(sj4*x1330);
IkReal x1342=((1.0)*sj4*sj5);
IkReal x1343=(cj1*x1321);
IkReal x1344=(sj1*x1320);
IkReal x1345=(gconst4*sj5*x1338);
IkReal x1346=((1.0)*x1343);
IkReal x1347=((1.0)*cj1*x1320);
IkReal x1348=((1.0)*sj1*x1321);
evalcond[0]=((((-1.0)*sj3*x1347))+(((-1.0)*sj3*x1348))+(((-1.0)*r20*x1324))+(((-1.0)*r21*x1331)));
evalcond[1]=((((-1.0)*x1324*x1328))+(((-1.0)*x1324*x1334))+(((-1.0)*sj3*x1346))+(((-1.0)*x1331*x1338))+(((-1.0)*cj0*r01*x1331))+((sj3*x1344)));
evalcond[2]=(x1343+((x1329*x1337))+(((-1.0)*r21*x1324*x1329))+((sj4*x1327))+((r22*x1333))+(((-1.0)*r20*sj4*sj5*x1331))+((sj5*x1341))+(((-1.0)*x1344)));
evalcond[3]=(((cj4*x1327))+(((-1.0)*cj3*x1347))+(((-1.0)*cj3*x1348))+(((-1.0)*r20*x1331*x1333))+(((-1.0)*r20*x1331*x1332))+(((-1.0)*r22*x1342))+((x1330*x1333))+((x1330*x1332)));
evalcond[4]=((((-1.0)*x1335*x1337))+(((-1.8e-7)*x1330))+(((-1.0)*x1326*x1337))+(((0.335)*x1344))+(((-1.0)*r22*x1323))+(((-0.21066117)*sj1))+((r20*x1336))+(((-1.0)*pz))+((x1326*x1330))+(((-0.17676784)*cj1))+(((0.15)*x1327))+((x1330*x1335))+(((-0.335)*x1343)));
evalcond[5]=((((-1.0)*x1348))+(((-1.0)*x1347))+((sj4*x1345))+((x1325*x1333))+((x1325*x1332))+(((-1.0)*sj4*sj5*x1328*x1331))+((gconst5*x1328*x1329))+(((-1.0)*cj0*r01*x1324*x1329))+((x1322*x1332))+((x1322*x1333))+(((-1.0)*x1324*x1329*x1338))+(((-1.0)*sj4*sj5*x1331*x1334))+((sj4*sj5*x1340))+((gconst5*x1329*x1334)));
evalcond[6]=((((-1.0)*x1331*x1333*x1334))+(((-1.0)*x1331*x1332*x1334))+((x1333*x1340))+((x1332*x1340))+((x1322*x1329))+(((-1.0)*cj3*x1346))+((gconst4*x1332*x1338))+(((-1.0)*x1325*x1342))+((gconst4*x1333*x1338))+(((-1.0)*x1328*x1331*x1333))+(((-1.0)*x1328*x1331*x1332))+((x1325*x1329))+(((-1.0)*x1322*x1342))+((cj3*x1344)));
evalcond[7]=(((x1326*x1340))+((gconst4*x1335*x1338))+(((-1.0)*x1323*x1325))+((gconst4*x1326*x1338))+(((-1.8e-7)*gconst4*x1338))+(((-0.21066117)*cj1))+(((-1.0)*x1322*x1323))+(((0.17676784)*sj1))+(((0.335)*sj1*x1321))+(((-1.8e-7)*x1340))+((x1325*x1339))+(((-1.0)*gconst5*x1328*x1335))+((x1328*x1336))+(((-1.0)*gconst5*x1326*x1328))+(((-1.0)*gconst5*x1334*x1335))+(((-1.0)*py*sj0))+((x1335*x1340))+((x1322*x1339))+(((0.335)*cj1*x1320))+((x1334*x1336))+(((-1.0)*cj0*px))+(((-1.0)*gconst5*x1326*x1334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1349=(gconst5*r10);
IkReal x1350=((1.0)*gconst4);
IkReal x1351=(gconst5*r00);
IkReal x1352=(sj3*sj4*sj5);
IkReal x1353=(cj4*cj5*gconst4*sj3);
IkReal x1354=((1.0)*cj4*sj3*sj5);
IkReal x1355=((1.0)*cj4*cj5*sj3);
IkReal x1356=((1.0)*cj5*sj3*sj4);
CheckValue<IkReal> x1357 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x1356))+(((-1.0)*r12*x1354))+((x1349*x1352))+((r11*x1353))+(((-1.0)*x1349*x1355))+(((-1.0)*r11*x1350*x1352)))),IkReal(((((-1.0)*r02*x1354))+(((-1.0)*r02*x1356))+(((-1.0)*r01*x1350*x1352))+((x1351*x1352))+(((-1.0)*x1351*x1355))+((r01*x1353)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1357.valid){
continue;
}
CheckValue<IkReal> x1358=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x1358.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1357.value)+(((1.5707963267949)*(x1358.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1359=IKcos(j0);
IkReal x1360=IKsin(j0);
IkReal x1361=((1.11e-6)*cj5);
IkReal x1362=((1.0)*sj5);
IkReal x1363=(gconst5*sj4);
IkReal x1364=((1.0)*gconst4);
IkReal x1365=(cj4*sj5);
IkReal x1366=((0.15)*sj5);
IkReal x1367=(cj4*cj5);
IkReal x1368=((1.0)*cj5);
IkReal x1369=(gconst4*sj4);
IkReal x1370=(cj5*sj4);
IkReal x1371=((1.8e-7)*gconst4);
IkReal x1372=((0.15)*cj5);
IkReal x1373=(r00*x1360);
IkReal x1374=(r02*x1360);
IkReal x1375=(r01*x1360);
IkReal x1376=(r12*x1359);
IkReal x1377=(r11*x1359);
IkReal x1378=(gconst5*r10*x1359);
IkReal x1379=(sj5*x1376);
IkReal x1380=(cj4*gconst4*x1377);
evalcond[0]=(((gconst4*r10*x1359))+(((-1.0)*x1364*x1373))+(((-1.0)*gconst5*x1375))+(((-1.0)*cj3))+((gconst5*x1377)));
evalcond[1]=(((x1365*x1374))+((gconst5*x1367*x1373))+(((-1.0)*sj4*x1368*x1376))+(((-1.0)*x1364*x1367*x1375))+(((-1.0)*x1367*x1378))+(((-1.0)*x1362*x1363*x1373))+((gconst4*x1367*x1377))+(((-1.0)*x1362*x1369*x1377))+((x1370*x1374))+((sj5*x1369*x1375))+((r10*sj5*x1359*x1363))+(((-1.0)*cj4*x1362*x1376)));
evalcond[2]=(((x1365*x1378))+sj3+((cj5*r10*x1359*x1363))+((x1367*x1374))+((cj5*x1369*x1375))+(((-1.0)*x1367*x1376))+(((-1.0)*cj4*gconst5*x1362*x1373))+((sj4*x1379))+(((-1.0)*x1364*x1370*x1377))+(((-1.0)*x1363*x1368*x1373))+(((-1.0)*x1362*x1380))+((gconst4*x1365*x1375))+(((-1.0)*sj4*x1362*x1374)));
evalcond[3]=((-0.0005)+((x1372*x1374))+(((-1.0)*x1371*x1375))+(((-1.0)*gconst5*x1361*x1373))+(((-1.11e-6)*sj5*x1374))+((x1366*x1378))+(((-1.0)*px*x1360))+(((-1.0)*x1372*x1376))+((gconst4*x1366*x1375))+(((-1.0)*gconst5*x1366*x1373))+((gconst4*x1361*x1375))+((x1371*x1377))+(((-1.0)*gconst4*x1366*x1377))+(((1.11e-6)*x1379))+(((-1.0)*gconst4*x1361*x1377))+(((-1.8e-7)*x1378))+((py*x1359))+(((1.8e-7)*gconst5*x1373))+((x1361*x1378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((((4.2073668924196e-7)*gconst4*r11*sj0))+(((5.01408419187776e-7)*gconst5*r20))+(((2.33742605134422)*py*sj0))+(((-0.783037727200315)*cj0*gconst4*r01*sj4*sj5))+(((-2.78560232882098)*pz))+(((-0.783037727200315)*cj5*r12*sj0*sj4))+(((-4.2073668924196e-7)*gconst5*r10*sj0))+(((-0.783037727200315)*cj0*cj5*r02*sj4))+(((-0.350613907701634)*cj5*r12*sj0))+(((2.59454291699209e-6)*cj0*cj5*gconst5*r00))+(((-0.417840349323147)*gconst5*r20*sj5))+(((-0.783037727200315)*cj0*cj4*cj5*gconst5*r00))+(((-0.783037727200315)*cj4*cj5*gconst5*r10*sj0))+(((2.59454291699209e-6)*cj0*r02*sj5))+(((-0.933176780155028)*cj4*cj5*gconst4*r21))+(((-5.01408419187776e-7)*gconst4*r21))+(((-2.59454291699209e-6)*cj0*cj5*gconst4*r01))+(((0.350613907701634)*gconst5*r10*sj0*sj5))+(((0.933176780155028)*gconst4*r21*sj4*sj5))+(((2.33742605134422)*cj0*px))+(((0.783037727200315)*cj4*cj5*gconst4*r11*sj0))+(((3.09201858499129e-6)*cj5*gconst4*r21))+(((0.783037727200315)*gconst5*r10*sj0*sj4*sj5))+(((-0.783037727200315)*cj0*cj4*r02*sj5))+(((-0.350613907701634)*cj0*gconst4*r01*sj5))+(((0.933176780155028)*cj4*cj5*gconst5*r20))+(((0.783037727200315)*cj0*cj4*cj5*gconst4*r01))+(((-0.933176780155028)*gconst5*r20*sj4*sj5))+(((0.933176780155028)*cj4*r22*sj5))+(((2.59454291699209e-6)*cj5*gconst5*r10*sj0))+(((-0.783037727200315)*cj4*r12*sj0*sj5))+(((4.2073668924196e-7)*cj0*gconst4*r01))+(((-3.09201858499129e-6)*cj5*gconst5*r20))+(((0.933176780155028)*cj5*r22*sj4))+(((0.417840349323147)*cj5*r22))+(((-3.09201858499129e-6)*r22*sj5))+(((0.417840349323147)*gconst4*r21*sj5))+(((-2.59454291699209e-6)*cj5*gconst4*r11*sj0))+(((2.59454291699209e-6)*r12*sj0*sj5))+(((-0.350613907701634)*gconst4*r11*sj0*sj5))+(((0.783037727200315)*cj0*gconst5*r00*sj4*sj5))+(((-0.783037727200315)*gconst4*r11*sj0*sj4*sj5))+(((-0.350613907701634)*cj0*cj5*r02))+(((-4.2073668924196e-7)*cj0*gconst5*r00))+(((0.350613907701634)*cj0*gconst5*r00*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-5.01408419187776e-7)*cj0*gconst4*r01))+(((-3.09201858499129e-6)*cj5*gconst5*r10*sj0))+(((0.933176780155028)*cj0*cj4*cj5*gconst5*r00))+(((0.933176780155028)*cj4*cj5*gconst5*r10*sj0))+(((-0.933176780155028)*gconst5*r10*sj0*sj4*sj5))+(((-5.01408419187776e-7)*gconst4*r11*sj0))+(((0.417840349323147)*gconst4*r11*sj0*sj5))+(((0.783037727200315)*cj4*r22*sj5))+(((-2.59454291699209e-6)*cj5*gconst5*r20))+(((-0.933176780155028)*cj0*gconst5*r00*sj4*sj5))+(((-0.783037727200315)*gconst5*r20*sj4*sj5))+(((-2.33742605134422)*pz))+(((2.59454291699209e-6)*cj5*gconst4*r21))+(((0.933176780155028)*cj5*r12*sj0*sj4))+(((0.933176780155028)*cj0*gconst4*r01*sj4*sj5))+(((3.09201858499129e-6)*cj5*gconst4*r11*sj0))+(((-3.09201858499129e-6)*r12*sj0*sj5))+(((-0.417840349323147)*gconst5*r10*sj0*sj5))+(((0.350613907701634)*cj5*r22))+(((0.933176780155028)*cj0*cj4*r02*sj5))+(((-0.350613907701634)*gconst5*r20*sj5))+(((4.2073668924196e-7)*gconst5*r20))+(((-0.417840349323147)*cj0*gconst5*r00*sj5))+(((3.09201858499129e-6)*cj0*cj5*gconst4*r01))+(((0.350613907701634)*gconst4*r21*sj5))+(((0.783037727200315)*gconst4*r21*sj4*sj5))+(((-2.59454291699209e-6)*r22*sj5))+(((5.01408419187776e-7)*gconst5*r10*sj0))+(((5.01408419187776e-7)*cj0*gconst5*r00))+(((0.933176780155028)*cj4*r12*sj0*sj5))+(((-3.09201858499129e-6)*cj0*cj5*gconst5*r00))+(((-4.2073668924196e-7)*gconst4*r21))+(((-0.933176780155028)*cj0*cj4*cj5*gconst4*r01))+(((-3.09201858499129e-6)*cj0*r02*sj5))+(((-0.783037727200315)*cj4*cj5*gconst4*r21))+(((-2.78560232882098)*py*sj0))+(((0.933176780155028)*cj0*cj5*r02*sj4))+(((0.417840349323147)*cj0*cj5*r02))+(((0.417840349323147)*cj5*r12*sj0))+(((0.783037727200315)*cj4*cj5*gconst5*r20))+(((-0.933176780155028)*cj4*cj5*gconst4*r11*sj0))+(((-2.78560232882098)*cj0*px))+(((0.417840349323147)*cj0*gconst4*r01*sj5))+(((0.783037727200315)*cj5*r22*sj4))+(((0.933176780155028)*gconst4*r11*sj0*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((4.2073668924196e-7)*gconst4*r11*sj0))+(((5.01408419187776e-7)*gconst5*r20))+(((2.33742605134422)*py*sj0))+(((-0.783037727200315)*cj0*gconst4*r01*sj4*sj5))+(((-2.78560232882098)*pz))+(((-0.783037727200315)*cj5*r12*sj0*sj4))+(((-4.2073668924196e-7)*gconst5*r10*sj0))+(((-0.783037727200315)*cj0*cj5*r02*sj4))+(((-0.350613907701634)*cj5*r12*sj0))+(((2.59454291699209e-6)*cj0*cj5*gconst5*r00))+(((-0.417840349323147)*gconst5*r20*sj5))+(((-0.783037727200315)*cj0*cj4*cj5*gconst5*r00))+(((-0.783037727200315)*cj4*cj5*gconst5*r10*sj0))+(((2.59454291699209e-6)*cj0*r02*sj5))+(((-0.933176780155028)*cj4*cj5*gconst4*r21))+(((-5.01408419187776e-7)*gconst4*r21))+(((-2.59454291699209e-6)*cj0*cj5*gconst4*r01))+(((0.350613907701634)*gconst5*r10*sj0*sj5))+(((0.933176780155028)*gconst4*r21*sj4*sj5))+(((2.33742605134422)*cj0*px))+(((0.783037727200315)*cj4*cj5*gconst4*r11*sj0))+(((3.09201858499129e-6)*cj5*gconst4*r21))+(((0.783037727200315)*gconst5*r10*sj0*sj4*sj5))+(((-0.783037727200315)*cj0*cj4*r02*sj5))+(((-0.350613907701634)*cj0*gconst4*r01*sj5))+(((0.933176780155028)*cj4*cj5*gconst5*r20))+(((0.783037727200315)*cj0*cj4*cj5*gconst4*r01))+(((-0.933176780155028)*gconst5*r20*sj4*sj5))+(((0.933176780155028)*cj4*r22*sj5))+(((2.59454291699209e-6)*cj5*gconst5*r10*sj0))+(((-0.783037727200315)*cj4*r12*sj0*sj5))+(((4.2073668924196e-7)*cj0*gconst4*r01))+(((-3.09201858499129e-6)*cj5*gconst5*r20))+(((0.933176780155028)*cj5*r22*sj4))+(((0.417840349323147)*cj5*r22))+(((-3.09201858499129e-6)*r22*sj5))+(((0.417840349323147)*gconst4*r21*sj5))+(((-2.59454291699209e-6)*cj5*gconst4*r11*sj0))+(((2.59454291699209e-6)*r12*sj0*sj5))+(((-0.350613907701634)*gconst4*r11*sj0*sj5))+(((0.783037727200315)*cj0*gconst5*r00*sj4*sj5))+(((-0.783037727200315)*gconst4*r11*sj0*sj4*sj5))+(((-0.350613907701634)*cj0*cj5*r02))+(((-4.2073668924196e-7)*cj0*gconst5*r00))+(((0.350613907701634)*cj0*gconst5*r00*sj5))))+IKsqr(((((-5.01408419187776e-7)*cj0*gconst4*r01))+(((-3.09201858499129e-6)*cj5*gconst5*r10*sj0))+(((0.933176780155028)*cj0*cj4*cj5*gconst5*r00))+(((0.933176780155028)*cj4*cj5*gconst5*r10*sj0))+(((-0.933176780155028)*gconst5*r10*sj0*sj4*sj5))+(((-5.01408419187776e-7)*gconst4*r11*sj0))+(((0.417840349323147)*gconst4*r11*sj0*sj5))+(((0.783037727200315)*cj4*r22*sj5))+(((-2.59454291699209e-6)*cj5*gconst5*r20))+(((-0.933176780155028)*cj0*gconst5*r00*sj4*sj5))+(((-0.783037727200315)*gconst5*r20*sj4*sj5))+(((-2.33742605134422)*pz))+(((2.59454291699209e-6)*cj5*gconst4*r21))+(((0.933176780155028)*cj5*r12*sj0*sj4))+(((0.933176780155028)*cj0*gconst4*r01*sj4*sj5))+(((3.09201858499129e-6)*cj5*gconst4*r11*sj0))+(((-3.09201858499129e-6)*r12*sj0*sj5))+(((-0.417840349323147)*gconst5*r10*sj0*sj5))+(((0.350613907701634)*cj5*r22))+(((0.933176780155028)*cj0*cj4*r02*sj5))+(((-0.350613907701634)*gconst5*r20*sj5))+(((4.2073668924196e-7)*gconst5*r20))+(((-0.417840349323147)*cj0*gconst5*r00*sj5))+(((3.09201858499129e-6)*cj0*cj5*gconst4*r01))+(((0.350613907701634)*gconst4*r21*sj5))+(((0.783037727200315)*gconst4*r21*sj4*sj5))+(((-2.59454291699209e-6)*r22*sj5))+(((5.01408419187776e-7)*gconst5*r10*sj0))+(((5.01408419187776e-7)*cj0*gconst5*r00))+(((0.933176780155028)*cj4*r12*sj0*sj5))+(((-3.09201858499129e-6)*cj0*cj5*gconst5*r00))+(((-4.2073668924196e-7)*gconst4*r21))+(((-0.933176780155028)*cj0*cj4*cj5*gconst4*r01))+(((-3.09201858499129e-6)*cj0*r02*sj5))+(((-0.783037727200315)*cj4*cj5*gconst4*r21))+(((-2.78560232882098)*py*sj0))+(((0.933176780155028)*cj0*cj5*r02*sj4))+(((0.417840349323147)*cj0*cj5*r02))+(((0.417840349323147)*cj5*r12*sj0))+(((0.783037727200315)*cj4*cj5*gconst5*r20))+(((-0.933176780155028)*cj4*cj5*gconst4*r11*sj0))+(((-2.78560232882098)*cj0*px))+(((0.417840349323147)*cj0*gconst4*r01*sj5))+(((0.783037727200315)*cj5*r22*sj4))+(((0.933176780155028)*gconst4*r11*sj0*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((4.2073668924196e-7)*gconst4*r11*sj0))+(((5.01408419187776e-7)*gconst5*r20))+(((2.33742605134422)*py*sj0))+(((-0.783037727200315)*cj0*gconst4*r01*sj4*sj5))+(((-2.78560232882098)*pz))+(((-0.783037727200315)*cj5*r12*sj0*sj4))+(((-4.2073668924196e-7)*gconst5*r10*sj0))+(((-0.783037727200315)*cj0*cj5*r02*sj4))+(((-0.350613907701634)*cj5*r12*sj0))+(((2.59454291699209e-6)*cj0*cj5*gconst5*r00))+(((-0.417840349323147)*gconst5*r20*sj5))+(((-0.783037727200315)*cj0*cj4*cj5*gconst5*r00))+(((-0.783037727200315)*cj4*cj5*gconst5*r10*sj0))+(((2.59454291699209e-6)*cj0*r02*sj5))+(((-0.933176780155028)*cj4*cj5*gconst4*r21))+(((-5.01408419187776e-7)*gconst4*r21))+(((-2.59454291699209e-6)*cj0*cj5*gconst4*r01))+(((0.350613907701634)*gconst5*r10*sj0*sj5))+(((0.933176780155028)*gconst4*r21*sj4*sj5))+(((2.33742605134422)*cj0*px))+(((0.783037727200315)*cj4*cj5*gconst4*r11*sj0))+(((3.09201858499129e-6)*cj5*gconst4*r21))+(((0.783037727200315)*gconst5*r10*sj0*sj4*sj5))+(((-0.783037727200315)*cj0*cj4*r02*sj5))+(((-0.350613907701634)*cj0*gconst4*r01*sj5))+(((0.933176780155028)*cj4*cj5*gconst5*r20))+(((0.783037727200315)*cj0*cj4*cj5*gconst4*r01))+(((-0.933176780155028)*gconst5*r20*sj4*sj5))+(((0.933176780155028)*cj4*r22*sj5))+(((2.59454291699209e-6)*cj5*gconst5*r10*sj0))+(((-0.783037727200315)*cj4*r12*sj0*sj5))+(((4.2073668924196e-7)*cj0*gconst4*r01))+(((-3.09201858499129e-6)*cj5*gconst5*r20))+(((0.933176780155028)*cj5*r22*sj4))+(((0.417840349323147)*cj5*r22))+(((-3.09201858499129e-6)*r22*sj5))+(((0.417840349323147)*gconst4*r21*sj5))+(((-2.59454291699209e-6)*cj5*gconst4*r11*sj0))+(((2.59454291699209e-6)*r12*sj0*sj5))+(((-0.350613907701634)*gconst4*r11*sj0*sj5))+(((0.783037727200315)*cj0*gconst5*r00*sj4*sj5))+(((-0.783037727200315)*gconst4*r11*sj0*sj4*sj5))+(((-0.350613907701634)*cj0*cj5*r02))+(((-4.2073668924196e-7)*cj0*gconst5*r00))+(((0.350613907701634)*cj0*gconst5*r00*sj5))), ((((-5.01408419187776e-7)*cj0*gconst4*r01))+(((-3.09201858499129e-6)*cj5*gconst5*r10*sj0))+(((0.933176780155028)*cj0*cj4*cj5*gconst5*r00))+(((0.933176780155028)*cj4*cj5*gconst5*r10*sj0))+(((-0.933176780155028)*gconst5*r10*sj0*sj4*sj5))+(((-5.01408419187776e-7)*gconst4*r11*sj0))+(((0.417840349323147)*gconst4*r11*sj0*sj5))+(((0.783037727200315)*cj4*r22*sj5))+(((-2.59454291699209e-6)*cj5*gconst5*r20))+(((-0.933176780155028)*cj0*gconst5*r00*sj4*sj5))+(((-0.783037727200315)*gconst5*r20*sj4*sj5))+(((-2.33742605134422)*pz))+(((2.59454291699209e-6)*cj5*gconst4*r21))+(((0.933176780155028)*cj5*r12*sj0*sj4))+(((0.933176780155028)*cj0*gconst4*r01*sj4*sj5))+(((3.09201858499129e-6)*cj5*gconst4*r11*sj0))+(((-3.09201858499129e-6)*r12*sj0*sj5))+(((-0.417840349323147)*gconst5*r10*sj0*sj5))+(((0.350613907701634)*cj5*r22))+(((0.933176780155028)*cj0*cj4*r02*sj5))+(((-0.350613907701634)*gconst5*r20*sj5))+(((4.2073668924196e-7)*gconst5*r20))+(((-0.417840349323147)*cj0*gconst5*r00*sj5))+(((3.09201858499129e-6)*cj0*cj5*gconst4*r01))+(((0.350613907701634)*gconst4*r21*sj5))+(((0.783037727200315)*gconst4*r21*sj4*sj5))+(((-2.59454291699209e-6)*r22*sj5))+(((5.01408419187776e-7)*gconst5*r10*sj0))+(((5.01408419187776e-7)*cj0*gconst5*r00))+(((0.933176780155028)*cj4*r12*sj0*sj5))+(((-3.09201858499129e-6)*cj0*cj5*gconst5*r00))+(((-4.2073668924196e-7)*gconst4*r21))+(((-0.933176780155028)*cj0*cj4*cj5*gconst4*r01))+(((-3.09201858499129e-6)*cj0*r02*sj5))+(((-0.783037727200315)*cj4*cj5*gconst4*r21))+(((-2.78560232882098)*py*sj0))+(((0.933176780155028)*cj0*cj5*r02*sj4))+(((0.417840349323147)*cj0*cj5*r02))+(((0.417840349323147)*cj5*r12*sj0))+(((0.783037727200315)*cj4*cj5*gconst5*r20))+(((-0.933176780155028)*cj4*cj5*gconst4*r11*sj0))+(((-2.78560232882098)*cj0*px))+(((0.417840349323147)*cj0*gconst4*r01*sj5))+(((0.783037727200315)*cj5*r22*sj4))+(((0.933176780155028)*gconst4*r11*sj0*sj4*sj5))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1381=IKsin(j1);
IkReal x1382=IKcos(j1);
IkReal x1383=((0.335)*cj5);
IkReal x1384=(gconst4*r21);
IkReal x1385=(r12*sj0);
IkReal x1386=((0.15)*cj3);
IkReal x1387=(sj0*sj5);
IkReal x1388=(gconst4*r11);
IkReal x1389=(gconst5*r20);
IkReal x1390=((1.11e-6)*sj3);
IkReal x1391=(gconst5*r10);
IkReal x1392=(cj5*sj0);
IkReal x1393=((1.0)*pz);
IkReal x1394=((1.8e-7)*sj3);
IkReal x1395=((1.11e-6)*cj3);
IkReal x1396=((0.335)*sj4);
IkReal x1397=((0.335)*gconst5);
IkReal x1398=((1.8e-7)*cj3);
IkReal x1399=(cj5*r22);
IkReal x1400=((0.15)*sj3);
IkReal x1401=((0.15)*sj5);
IkReal x1402=((0.335)*gconst4);
IkReal x1403=(cj0*r02);
IkReal x1404=(sj0*sj4);
IkReal x1405=(cj4*sj0);
IkReal x1406=((1.8e-7)*sj0);
IkReal x1407=((1.11e-6)*sj5);
IkReal x1408=((0.335)*cj4);
IkReal x1409=(r22*sj5);
IkReal x1410=((1.11e-6)*cj5);
IkReal x1411=(cj0*gconst4*r01);
IkReal x1412=((0.21066117)*x1381);
IkReal x1413=((0.17676784)*x1382);
IkReal x1414=(sj5*x1396);
IkReal x1415=((0.17676784)*x1381);
IkReal x1416=((1.0)*py*sj0);
IkReal x1417=(sj5*x1403);
IkReal x1418=(sj5*x1408);
IkReal x1419=(cj0*gconst5*r00);
IkReal x1420=((0.21066117)*x1382);
IkReal x1421=(cj5*x1403);
IkReal x1422=((1.0)*cj0*px);
evalcond[0]=((((0.15)*x1399))+(((-1.0)*x1389*x1401))+((cj4*x1383*x1389))+(((-1.8e-7)*x1384))+(((-1.0)*x1413))+(((-1.0)*x1412))+(((-1.0)*x1389*x1414))+(((-1.0)*x1389*x1410))+(((-1.0)*r22*x1407))+(((-1.0)*cj4*x1383*x1384))+(((1.8e-7)*x1389))+((x1384*x1414))+((x1384*x1410))+((x1408*x1409))+(((-1.0)*x1393))+((r22*sj4*x1383))+((x1384*x1401)));
evalcond[1]=(((sj4*x1383*x1403))+((x1387*x1388*x1396))+(((-1.0)*x1383*x1388*x1405))+(((-1.0)*x1416))+(((-1.0)*cj4*x1383*x1411))+(((0.15)*x1421))+(((1.8e-7)*x1419))+(((0.15)*cj5*x1385))+(((-1.0)*x1414*x1419))+((x1391*x1406))+((x1401*x1411))+((x1383*x1391*x1405))+(((-1.0)*x1388*x1406))+(((-1.0)*x1401*x1419))+((cj4*x1383*x1419))+((x1411*x1414))+(((-1.0)*x1410*x1419))+(((-1.11e-6)*x1391*x1392))+((x1410*x1411))+(((1.11e-6)*x1388*x1392))+x1415+((x1385*x1418))+(((-1.0)*x1387*x1391*x1396))+(((-1.0)*x1385*x1407))+(((0.15)*x1387*x1388))+((sj4*x1383*x1385))+(((-1.0)*x1403*x1407))+((x1408*x1417))+(((-1.8e-7)*x1411))+(((-1.0)*x1422))+(((-1.0)*x1420))+(((-0.15)*x1387*x1391)));
evalcond[2]=((((-1.0)*x1389*x1394))+(((-1.0)*cj0*r01*x1397))+(((-1.0)*x1399*x1400))+((sj5*x1389*x1400))+(((-1.0)*cj0*r00*x1402))+(((-1.0)*sj5*x1384*x1400))+(((-1.0)*r10*sj0*x1402))+((pz*sj3))+((x1384*x1394))+(((-1.0)*r11*sj0*x1397))+(((-1.0)*cj5*x1384*x1390))+((x1390*x1409))+((sj3*x1413))+((sj3*x1412))+((cj5*x1389*x1390)));
evalcond[3]=((((-1.0)*x1390*x1417))+((sj0*x1391*x1394))+((x1387*x1388*x1400))+(((-1.0)*r21*x1397))+(((-1.0)*sj0*x1388*x1394))+((cj5*x1385*x1400))+((cj5*x1390*x1411))+(((-1.0)*sj5*x1400*x1419))+((x1400*x1421))+(((-1.0)*x1390*x1391*x1392))+((x1394*x1419))+(((-1.0)*x1387*x1391*x1400))+((sj5*x1400*x1411))+(((-1.0)*sj3*x1422))+(((-1.0)*sj3*x1420))+(((-1.0)*sj3*x1416))+(((-1.0)*sj5*x1385*x1390))+(((-1.0)*cj5*x1390*x1419))+(((-1.0)*x1394*x1411))+((x1388*x1390*x1392))+(((-1.0)*r20*x1402))+((sj3*x1415)));
evalcond[4]=((((-1.0)*sj4*x1383*x1411))+(((-1.0)*cj5*x1389*x1395))+(((-1.0)*x1384*x1398))+(((-1.0)*x1387*x1388*x1408))+(((-1.0)*x1383*x1388*x1404))+((sj4*x1383*x1419))+(((-1.0)*cj3*x1412))+(((-1.0)*cj3*x1413))+((x1383*x1391*x1404))+(((-1.0)*sj5*x1386*x1389))+(((-1.0)*cj4*x1383*x1385))+((x1387*x1391*x1408))+(((-1.0)*cj3*x1393))+((x1386*x1399))+(((-1.0)*cj0*cj4*r01*sj5*x1402))+((x1389*x1398))+((x1385*x1414))+(((-1.0)*cj4*x1383*x1403))+((sj5*x1384*x1386))+((cj5*x1384*x1395))+(((-1.0)*x1395*x1409))+((cj0*cj4*r00*sj5*x1397))+((x1403*x1414)));
evalcond[5]=(((sj0*x1391*x1398))+((cj5*x1395*x1411))+((x1388*x1392*x1395))+(((-1.0)*sj0*x1388*x1398))+((sj5*x1386*x1411))+(((-1.0)*x1389*x1418))+(((-1.0)*cj3*x1416))+((x1398*x1419))+(((-1.0)*cj5*x1395*x1419))+(((-1.0)*x1398*x1411))+((cj5*x1385*x1386))+(((-1.0)*sj5*x1385*x1395))+((x1384*x1418))+((x1386*x1421))+(((-1.0)*sj5*x1386*x1419))+(((-1.0)*x1386*x1387*x1391))+(((-1.0)*cj3*x1420))+(((-1.0)*cj3*x1422))+(((-1.0)*x1396*x1409))+((x1386*x1387*x1388))+((sj4*x1383*x1384))+((cj4*r22*x1383))+(((-1.0)*sj4*x1383*x1389))+(((-1.0)*x1395*x1417))+(((-1.0)*x1391*x1392*x1395))+((cj3*x1415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
CheckValue<IkReal> x1425 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1425.valid){
continue;
}
IkReal x1423=((1.0)*(x1425.value));
IkReal x1424=x940;
sj6=gconst4;
cj6=gconst5;
j6=((3.14159265)+(((-1.0)*x1423)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x1423)));
IkReal gconst4=((1.0)*r21*x1424);
IkReal gconst5=((-1.0)*r20*x1424);
IkReal x1426=r22*r22;
CheckValue<IkReal> x1431=IKPowWithIntegerCheck(((-1.0)+x1426),-1);
if(!x1431.valid){
continue;
}
IkReal x1427=x1431.value;
if((((1.0)+(((-1.0)*x1426)))) < -0.00001)
continue;
IkReal x1428=IKsqrt(((1.0)+(((-1.0)*x1426))));
IkReal x1429=(r02*sj0*x1427*x1428);
IkReal x1430=(cj0*r12*x1427*x1428);
j2eval[0]=sj3;
j2eval[1]=((IKabs(((((-1.0)*sj1*x1429))+((sj1*x1430)))))+(IKabs(((((-1.0)*cj1*x1430))+((cj1*x1429))))));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
CheckValue<IkReal> x1434 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1434.valid){
continue;
}
IkReal x1432=((1.0)*(x1434.value));
IkReal x1433=x940;
sj6=gconst4;
cj6=gconst5;
j6=((3.14159265)+(((-1.0)*x1432)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x1432)));
IkReal gconst4=((1.0)*r21*x1433);
IkReal gconst5=((-1.0)*r20*x1433);
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
CheckValue<IkReal> x1437 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1437.valid){
continue;
}
IkReal x1435=((1.0)*(x1437.value));
IkReal x1436=x940;
sj6=gconst4;
cj6=gconst5;
j6=((3.14159265)+(((-1.0)*x1435)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x1435)));
IkReal gconst4=((1.0)*r21*x1436);
IkReal gconst5=((-1.0)*r20*x1436);
IkReal x1438=(cj3*sj3);
j2eval[0]=x1438;
j2eval[1]=IKsign(x1438);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1439=(gconst5*r20);
IkReal x1440=(r22*sj5);
IkReal x1441=((1.0)*cj4);
IkReal x1442=(sj1*sj5);
IkReal x1443=(cj5*r22);
IkReal x1444=(gconst4*r21);
IkReal x1445=(cj5*sj1);
IkReal x1446=(cj1*cj4);
IkReal x1447=(cj1*cj5);
IkReal x1448=(cj4*sj1);
IkReal x1449=(cj1*sj5);
IkReal x1450=((1.0)*sj1*sj4);
IkReal x1451=((1.0)*cj1*sj4);
if( IKabs(((((-1.0)*cj1*x1440*x1441))+((x1443*x1448))+((sj4*x1439*x1449))+((cj5*x1444*x1446))+(((-1.0)*x1440*x1450))+(((-1.0)*x1439*x1441*x1442))+(((-1.0)*x1439*x1441*x1447))+((cj4*x1442*x1444))+(((-1.0)*sj4*x1439*x1445))+((sj4*x1444*x1445))+(((-1.0)*x1443*x1451))+(((-1.0)*sj4*x1444*x1449)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*sj4*x1443))+((x1443*x1446))+((x1440*x1448))+(((-1.0)*x1440*x1451))+(((-1.0)*x1439*x1441*x1449))+(((-1.0)*x1441*x1444*x1445))+(((-1.0)*sj4*x1439*x1442))+(((-1.0)*sj4*x1439*x1447))+((sj4*x1444*x1447))+((sj5*x1444*x1446))+((cj4*x1439*x1445))+((sj4*x1442*x1444)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x1440*x1441))+((x1443*x1448))+((sj4*x1439*x1449))+((cj5*x1444*x1446))+(((-1.0)*x1440*x1450))+(((-1.0)*x1439*x1441*x1442))+(((-1.0)*x1439*x1441*x1447))+((cj4*x1442*x1444))+(((-1.0)*sj4*x1439*x1445))+((sj4*x1444*x1445))+(((-1.0)*x1443*x1451))+(((-1.0)*sj4*x1444*x1449))))+IKsqr((((sj1*sj4*x1443))+((x1443*x1446))+((x1440*x1448))+(((-1.0)*x1440*x1451))+(((-1.0)*x1439*x1441*x1449))+(((-1.0)*x1441*x1444*x1445))+(((-1.0)*sj4*x1439*x1442))+(((-1.0)*sj4*x1439*x1447))+((sj4*x1444*x1447))+((sj5*x1444*x1446))+((cj4*x1439*x1445))+((sj4*x1442*x1444))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x1440*x1441))+((x1443*x1448))+((sj4*x1439*x1449))+((cj5*x1444*x1446))+(((-1.0)*x1440*x1450))+(((-1.0)*x1439*x1441*x1442))+(((-1.0)*x1439*x1441*x1447))+((cj4*x1442*x1444))+(((-1.0)*sj4*x1439*x1445))+((sj4*x1444*x1445))+(((-1.0)*x1443*x1451))+(((-1.0)*sj4*x1444*x1449))), (((sj1*sj4*x1443))+((x1443*x1446))+((x1440*x1448))+(((-1.0)*x1440*x1451))+(((-1.0)*x1439*x1441*x1449))+(((-1.0)*x1441*x1444*x1445))+(((-1.0)*sj4*x1439*x1442))+(((-1.0)*sj4*x1439*x1447))+((sj4*x1444*x1447))+((sj5*x1444*x1446))+((cj4*x1439*x1445))+((sj4*x1442*x1444))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1452=IKsin(j2);
IkReal x1453=IKcos(j2);
IkReal x1454=((0.15)*sj0);
IkReal x1455=(cj5*r12);
IkReal x1456=(sj0*sj4);
IkReal x1457=((1.0)*sj5);
IkReal x1458=((1.8e-7)*gconst4);
IkReal x1459=(cj0*r02);
IkReal x1460=((1.11e-6)*sj5);
IkReal x1461=(cj4*sj0);
IkReal x1462=(cj5*gconst5);
IkReal x1463=(cj0*r00);
IkReal x1464=(r11*sj0);
IkReal x1465=(gconst5*r10);
IkReal x1466=((1.0)*sj4);
IkReal x1467=(gconst5*sj4);
IkReal x1468=(cj4*cj5);
IkReal x1469=(gconst4*sj5);
IkReal x1470=(cj0*r01);
IkReal x1471=(cj5*gconst4);
IkReal x1472=(r21*sj4);
IkReal x1473=((0.15)*cj5);
IkReal x1474=(r22*sj4);
IkReal x1475=((1.0)*gconst4);
IkReal x1476=((1.8e-7)*gconst5);
IkReal x1477=(cj4*sj5);
IkReal x1478=(r11*x1469);
IkReal x1479=(cj4*gconst5*r20);
IkReal x1480=(cj1*x1452);
IkReal x1481=((1.0)*x1453);
IkReal x1482=(sj1*x1452);
IkReal x1483=((0.15)*gconst5*sj5);
IkReal x1484=(sj1*x1453);
IkReal x1485=((1.0)*x1482);
IkReal x1486=(cj1*x1481);
IkReal x1487=(x1486+x1485);
evalcond[0]=(((cj5*x1474))+((r22*x1477))+(((-1.0)*r21*x1468*x1475))+(((-1.0)*sj1*x1481))+x1480+(((-1.0)*r20*x1457*x1467))+((cj4*r20*x1462))+((x1469*x1472)));
evalcond[1]=(((x1471*x1472))+(((-1.0)*r20*x1462*x1466))+(((-1.0)*x1457*x1479))+(((-1.0)*x1457*x1474))+(((-1.0)*x1487))+((r22*x1468))+((cj4*r21*x1469)));
evalcond[2]=((((-0.21066117)*sj1))+(((1.11e-6)*r21*x1471))+((r22*x1473))+(((-1.0)*r20*x1483))+(((0.335)*x1484))+(((-1.0)*r22*x1460))+(((0.15)*r21*x1469))+(((-1.0)*pz))+(((-0.335)*x1480))+(((-1.11e-6)*r20*x1462))+(((-0.17676784)*cj1))+((r20*x1476))+(((-1.0)*r21*x1458)));
evalcond[3]=(((r12*sj5*x1461))+(((-1.0)*x1468*x1470*x1475))+((x1455*x1456))+((x1456*x1478))+(((-1.0)*x1487))+(((-1.0)*x1457*x1463*x1467))+((cj5*sj4*x1459))+((cj4*x1462*x1463))+(((-1.0)*r11*x1461*x1471))+((r10*x1461*x1462))+((sj4*x1469*x1470))+(((-1.0)*x1456*x1457*x1465))+((x1459*x1477)));
evalcond[4]=((((-1.0)*r12*x1456*x1457))+(((-1.0)*cj4*gconst5*x1457*x1463))+((x1459*x1468))+(((-1.0)*sj4*x1457*x1459))+((x1455*x1461))+(((-1.0)*x1462*x1463*x1466))+((sj4*x1470*x1471))+(((-1.0)*x1480))+((r11*x1456*x1471))+(((-1.0)*x1457*x1461*x1465))+x1484+((cj4*x1469*x1470))+(((-1.0)*r10*x1456*x1462))+((x1461*x1478)));
evalcond[5]=(((x1454*x1478))+(((-1.0)*x1463*x1483))+(((-1.0)*x1458*x1464))+(((-0.21066117)*cj1))+(((1.11e-6)*x1470*x1471))+((x1454*x1455))+(((0.17676784)*sj1))+(((-1.0)*x1459*x1460))+(((0.335)*x1482))+(((-1.0)*sj5*x1454*x1465))+(((-1.0)*r12*sj0*x1460))+(((1.11e-6)*x1464*x1471))+((x1463*x1476))+(((-1.11e-6)*r10*sj0*x1462))+(((1.8e-7)*sj0*x1465))+(((0.15)*x1469*x1470))+(((-1.0)*x1458*x1470))+(((-1.0)*py*sj0))+(((-1.11e-6)*x1462*x1463))+(((-1.0)*cj0*px))+((x1459*x1473))+(((0.335)*cj1*x1453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1488=((1.0)*gconst4);
IkReal x1489=(cj0*cj1);
IkReal x1490=(gconst5*r01);
IkReal x1491=(cj0*sj1);
IkReal x1492=(gconst5*sj1);
IkReal x1493=((1.0)*r21);
IkReal x1494=(r11*sj0);
IkReal x1495=(r10*sj0);
IkReal x1496=(cj1*gconst5);
if( IKabs(((((-1.0)*x1489*x1490))+(((-1.0)*x1492*x1493))+(((-1.0)*cj1*x1488*x1495))+(((-1.0)*x1494*x1496))+(((-1.0)*r00*x1488*x1489))+(((-1.0)*r20*sj1*x1488)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*r20*x1488))+(((-1.0)*x1493*x1496))+((x1492*x1494))+((gconst4*r00*x1491))+((x1490*x1491))+((gconst4*sj1*x1495)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1489*x1490))+(((-1.0)*x1492*x1493))+(((-1.0)*cj1*x1488*x1495))+(((-1.0)*x1494*x1496))+(((-1.0)*r00*x1488*x1489))+(((-1.0)*r20*sj1*x1488))))+IKsqr(((((-1.0)*cj1*r20*x1488))+(((-1.0)*x1493*x1496))+((x1492*x1494))+((gconst4*r00*x1491))+((x1490*x1491))+((gconst4*sj1*x1495))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1489*x1490))+(((-1.0)*x1492*x1493))+(((-1.0)*cj1*x1488*x1495))+(((-1.0)*x1494*x1496))+(((-1.0)*r00*x1488*x1489))+(((-1.0)*r20*sj1*x1488))), ((((-1.0)*cj1*r20*x1488))+(((-1.0)*x1493*x1496))+((x1492*x1494))+((gconst4*r00*x1491))+((x1490*x1491))+((gconst4*sj1*x1495))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1497=IKcos(j2);
IkReal x1498=IKsin(j2);
IkReal x1499=((0.15)*sj0);
IkReal x1500=(cj5*r12);
IkReal x1501=(sj0*sj4);
IkReal x1502=((1.8e-7)*gconst4);
IkReal x1503=((1.11e-6)*sj5);
IkReal x1504=(cj0*r02);
IkReal x1505=(r12*sj0);
IkReal x1506=(cj0*r00);
IkReal x1507=(r11*sj0);
IkReal x1508=((1.0)*gconst4);
IkReal x1509=(cj4*cj5);
IkReal x1510=(gconst4*r21);
IkReal x1511=(sj4*sj5);
IkReal x1512=((0.15)*cj5);
IkReal x1513=((0.15)*sj5);
IkReal x1514=(cj5*sj4);
IkReal x1515=((1.11e-6)*cj5);
IkReal x1516=(cj4*sj5);
IkReal x1517=(cj0*r01);
IkReal x1518=(gconst5*r10);
IkReal x1519=(gconst5*r20);
IkReal x1520=((1.0)*gconst5);
IkReal x1521=(r10*sj0);
IkReal x1522=(gconst4*r11*sj5);
IkReal x1523=(gconst5*x1509);
IkReal x1524=(sj5*x1520);
IkReal x1525=(cj1*x1498);
IkReal x1526=((1.0)*x1497);
IkReal x1527=(sj1*x1498);
IkReal x1528=(sj1*x1497);
IkReal x1529=((1.0)*x1527);
IkReal x1530=(cj1*x1526);
IkReal x1531=(x1529+x1530);
evalcond[0]=((((-1.0)*r20*x1508))+(((-1.0)*x1531))+(((-1.0)*r21*x1520)));
evalcond[1]=((((-1.0)*x1507*x1520))+(((-1.0)*x1506*x1508))+x1528+(((-1.0)*x1517*x1520))+(((-1.0)*x1508*x1521))+(((-1.0)*x1525)));
evalcond[2]=(((x1509*x1519))+((x1510*x1511))+(((-1.0)*x1511*x1519))+(((-1.0)*sj1*x1526))+x1525+(((-1.0)*r21*x1508*x1509))+((r22*x1516))+((r22*x1514)));
evalcond[3]=((((-1.0)*x1515*x1519))+((x1510*x1515))+((x1510*x1513))+(((-1.0)*r22*x1503))+(((-0.21066117)*sj1))+(((1.8e-7)*x1519))+(((-1.0)*x1513*x1519))+(((-1.0)*pz))+(((0.335)*x1528))+(((-0.17676784)*cj1))+((r22*x1512))+(((-0.335)*x1525))+(((-1.0)*r21*x1502)));
evalcond[4]=((((-1.0)*x1506*x1511*x1520))+((x1501*x1522))+((x1504*x1514))+((x1504*x1516))+(((-1.0)*x1531))+((x1506*x1523))+(((-1.0)*x1508*x1509*x1517))+(((-1.0)*sj5*x1501*x1518))+((x1500*x1501))+((gconst4*x1511*x1517))+((x1505*x1516))+(((-1.0)*x1507*x1508*x1509))+((sj0*x1509*x1518)));
evalcond[5]=(((gconst4*x1507*x1515))+((x1499*x1500))+(((-0.21066117)*cj1))+(((1.8e-7)*sj0*x1518))+(((0.335)*cj1*x1497))+(((-1.0)*sj5*x1499*x1518))+((gconst4*x1515*x1517))+((x1504*x1512))+((x1499*x1522))+(((0.17676784)*sj1))+(((-1.0)*gconst5*x1506*x1513))+(((-1.0)*gconst5*x1506*x1515))+(((0.335)*x1527))+((gconst4*x1513*x1517))+(((-1.0)*py*sj0))+(((-1.0)*x1503*x1505))+(((-1.0)*x1503*x1504))+(((1.8e-7)*gconst5*x1506))+(((-1.0)*x1502*x1507))+(((-1.0)*sj0*x1515*x1518))+(((-1.0)*x1502*x1517))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1532=((1.0)*r22);
IkReal x1533=(gconst5*r20);
IkReal x1534=(gconst4*r21);
IkReal x1535=(cj5*sj4);
IkReal x1536=(sj1*sj5);
IkReal x1537=(r22*sj4);
IkReal x1538=((1.0)*sj4);
IkReal x1539=(cj1*sj5);
IkReal x1540=(cj4*x1539);
IkReal x1541=(cj1*cj4*cj5);
IkReal x1542=(cj4*cj5*sj1);
if( IKabs((((sj1*x1533*x1535))+(((-1.0)*x1534*x1538*x1539))+((sj4*x1533*x1539))+((x1536*x1537))+(((-1.0)*cj1*x1532*x1535))+(((-1.0)*x1532*x1542))+(((-1.0)*x1532*x1540))+((x1534*x1541))+(((-1.0)*x1533*x1541))+(((-1.0)*sj1*x1534*x1535))+(((-1.0)*cj4*x1534*x1536))+((cj4*x1533*x1536)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj4*x1534*x1536))+(((-1.0)*x1533*x1536*x1538))+(((-1.0)*x1534*x1542))+(((-1.0)*x1534*x1540))+((x1533*x1542))+((x1533*x1540))+((x1537*x1539))+(((-1.0)*x1532*x1541))+((r22*sj1*x1535))+((cj1*x1533*x1535))+((cj4*r22*x1536))+(((-1.0)*cj1*x1534*x1535)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x1533*x1535))+(((-1.0)*x1534*x1538*x1539))+((sj4*x1533*x1539))+((x1536*x1537))+(((-1.0)*cj1*x1532*x1535))+(((-1.0)*x1532*x1542))+(((-1.0)*x1532*x1540))+((x1534*x1541))+(((-1.0)*x1533*x1541))+(((-1.0)*sj1*x1534*x1535))+(((-1.0)*cj4*x1534*x1536))+((cj4*x1533*x1536))))+IKsqr((((sj4*x1534*x1536))+(((-1.0)*x1533*x1536*x1538))+(((-1.0)*x1534*x1542))+(((-1.0)*x1534*x1540))+((x1533*x1542))+((x1533*x1540))+((x1537*x1539))+(((-1.0)*x1532*x1541))+((r22*sj1*x1535))+((cj1*x1533*x1535))+((cj4*r22*x1536))+(((-1.0)*cj1*x1534*x1535))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x1533*x1535))+(((-1.0)*x1534*x1538*x1539))+((sj4*x1533*x1539))+((x1536*x1537))+(((-1.0)*cj1*x1532*x1535))+(((-1.0)*x1532*x1542))+(((-1.0)*x1532*x1540))+((x1534*x1541))+(((-1.0)*x1533*x1541))+(((-1.0)*sj1*x1534*x1535))+(((-1.0)*cj4*x1534*x1536))+((cj4*x1533*x1536))), (((sj4*x1534*x1536))+(((-1.0)*x1533*x1536*x1538))+(((-1.0)*x1534*x1542))+(((-1.0)*x1534*x1540))+((x1533*x1542))+((x1533*x1540))+((x1537*x1539))+(((-1.0)*x1532*x1541))+((r22*sj1*x1535))+((cj1*x1533*x1535))+((cj4*r22*x1536))+(((-1.0)*cj1*x1534*x1535))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1543=IKcos(j2);
IkReal x1544=IKsin(j2);
IkReal x1545=((1.0)*sj5);
IkReal x1546=((1.8e-7)*gconst4);
IkReal x1547=(cj0*r02);
IkReal x1548=((1.11e-6)*sj5);
IkReal x1549=(r12*sj0);
IkReal x1550=(cj5*gconst5);
IkReal x1551=(cj0*r00);
IkReal x1552=(r11*sj0);
IkReal x1553=(gconst5*sj4);
IkReal x1554=(r10*sj0);
IkReal x1555=((1.0)*sj4);
IkReal x1556=(cj4*cj5);
IkReal x1557=(gconst4*sj5);
IkReal x1558=(cj0*r01);
IkReal x1559=((1.0)*gconst4);
IkReal x1560=(r21*sj4);
IkReal x1561=((0.15)*cj5);
IkReal x1562=(cj4*gconst5);
IkReal x1563=((1.0)*sj1);
IkReal x1564=(cj5*gconst4);
IkReal x1565=(r22*sj4);
IkReal x1566=((1.8e-7)*gconst5);
IkReal x1567=(cj4*sj5);
IkReal x1568=(cj1*x1544);
IkReal x1569=(cj1*x1543);
IkReal x1570=(cj5*x1549);
IkReal x1571=(r20*x1562);
IkReal x1572=(sj1*x1544);
IkReal x1573=((0.15)*gconst5*sj5);
IkReal x1574=(x1543*x1563);
IkReal x1575=(x1552*x1557);
evalcond[0]=(((cj5*x1565))+(((-1.0)*r20*x1545*x1553))+(((-1.0)*r21*x1556*x1559))+((cj4*r20*x1550))+x1568+((x1557*x1560))+((r22*x1567))+(((-1.0)*x1574)));
evalcond[1]=(((x1560*x1564))+((cj4*r21*x1557))+((r22*x1556))+x1569+x1572+(((-1.0)*r20*x1550*x1555))+(((-1.0)*x1545*x1571))+(((-1.0)*x1545*x1565)));
evalcond[2]=(((r20*x1566))+(((-0.21066117)*sj1))+(((0.15)*r21*x1557))+(((-1.0)*r22*x1548))+(((1.11e-6)*r21*x1564))+(((-0.335)*x1568))+(((-1.0)*pz))+(((-1.0)*r21*x1546))+(((-1.0)*r20*x1573))+(((-0.17676784)*cj1))+(((0.335)*sj1*x1543))+((r22*x1561))+(((-1.11e-6)*r20*x1550)));
evalcond[3]=((((-1.0)*x1552*x1556*x1559))+((x1547*x1567))+((sj4*x1570))+((sj4*x1575))+((x1549*x1567))+(((-1.0)*x1545*x1551*x1553))+(((-1.0)*x1556*x1558*x1559))+((cj5*sj4*x1547))+(((-1.0)*x1544*x1563))+((sj4*x1557*x1558))+(((-1.0)*x1545*x1553*x1554))+(((-1.0)*x1569))+((cj4*x1550*x1554))+((cj4*x1550*x1551)));
evalcond[4]=(((cj4*x1575))+((cj4*x1557*x1558))+((x1547*x1556))+((sj4*x1558*x1564))+(((-1.0)*x1545*x1554*x1562))+((sj4*x1552*x1564))+(((-1.0)*x1550*x1551*x1555))+((x1549*x1556))+x1568+(((-1.0)*x1545*x1551*x1562))+(((-1.0)*sj4*x1545*x1549))+(((-1.0)*sj4*x1545*x1547))+(((-1.0)*x1574))+(((-1.0)*x1550*x1554*x1555)));
evalcond[5]=((((1.11e-6)*x1552*x1564))+(((-1.0)*x1546*x1552))+(((-1.0)*x1546*x1558))+(((-0.21066117)*cj1))+(((-1.0)*x1548*x1549))+(((0.335)*x1569))+((x1547*x1561))+(((0.335)*x1572))+(((1.11e-6)*x1558*x1564))+(((0.17676784)*sj1))+(((0.15)*x1575))+(((0.15)*x1557*x1558))+((x1549*x1561))+((x1554*x1566))+(((-1.11e-6)*x1550*x1551))+(((-1.11e-6)*x1550*x1554))+(((-1.0)*x1547*x1548))+(((-1.0)*py*sj0))+(((-1.0)*x1551*x1573))+(((-1.0)*x1554*x1573))+(((-1.0)*cj0*px))+((x1551*x1566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1576=(gconst5*r01);
IkReal x1577=(gconst4*r00);
IkReal x1578=(cj1*gconst4);
IkReal x1579=(gconst5*r21);
IkReal x1580=((1.0)*sj1);
IkReal x1581=(r10*sj0);
IkReal x1582=(cj0*cj1);
IkReal x1583=(cj0*x1580);
IkReal x1584=(gconst5*r11*sj0);
if( IKabs((((cj1*x1584))+((gconst4*r20*sj1))+((x1576*x1582))+((sj1*x1579))+((x1577*x1582))+((x1578*x1581)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x1578))+(((-1.0)*x1580*x1584))+(((-1.0)*x1577*x1583))+((cj1*x1579))+(((-1.0)*gconst4*x1580*x1581))+(((-1.0)*x1576*x1583)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x1584))+((gconst4*r20*sj1))+((x1576*x1582))+((sj1*x1579))+((x1577*x1582))+((x1578*x1581))))+IKsqr((((r20*x1578))+(((-1.0)*x1580*x1584))+(((-1.0)*x1577*x1583))+((cj1*x1579))+(((-1.0)*gconst4*x1580*x1581))+(((-1.0)*x1576*x1583))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x1584))+((gconst4*r20*sj1))+((x1576*x1582))+((sj1*x1579))+((x1577*x1582))+((x1578*x1581))), (((r20*x1578))+(((-1.0)*x1580*x1584))+(((-1.0)*x1577*x1583))+((cj1*x1579))+(((-1.0)*gconst4*x1580*x1581))+(((-1.0)*x1576*x1583))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1585=IKsin(j2);
IkReal x1586=IKcos(j2);
IkReal x1587=((1.8e-7)*gconst4);
IkReal x1588=((1.11e-6)*sj5);
IkReal x1589=(cj0*r02);
IkReal x1590=(r11*sj0);
IkReal x1591=(sj4*sj5);
IkReal x1592=(r12*sj0);
IkReal x1593=(cj0*r00);
IkReal x1594=((1.0)*gconst5);
IkReal x1595=(r10*sj0);
IkReal x1596=((0.15)*sj5);
IkReal x1597=((1.0)*gconst4);
IkReal x1598=(cj4*cj5);
IkReal x1599=(gconst4*r21);
IkReal x1600=((0.15)*cj5);
IkReal x1601=((1.11e-6)*cj5);
IkReal x1602=(cj5*sj4);
IkReal x1603=(cj0*r01);
IkReal x1604=((1.8e-7)*gconst5);
IkReal x1605=(gconst5*r20);
IkReal x1606=(cj4*sj5);
IkReal x1607=(cj1*x1585);
IkReal x1608=(cj1*x1586);
IkReal x1609=(cj5*x1592);
IkReal x1610=(gconst5*x1598);
IkReal x1611=(sj1*x1586);
IkReal x1612=(sj1*x1585);
IkReal x1613=((1.0)*x1611);
evalcond[0]=(x1612+x1608+(((-1.0)*r20*x1597))+(((-1.0)*r21*x1594)));
evalcond[1]=((((-1.0)*x1594*x1603))+(((-1.0)*x1593*x1597))+x1607+(((-1.0)*x1613))+(((-1.0)*x1595*x1597))+(((-1.0)*x1590*x1594)));
evalcond[2]=((((-1.0)*r20*x1591*x1594))+x1607+(((-1.0)*x1613))+((x1591*x1599))+((r22*x1602))+((r22*x1606))+(((-1.0)*r21*x1597*x1598))+((x1598*x1605)));
evalcond[3]=(((x1596*x1599))+(((-0.21066117)*sj1))+((x1599*x1601))+(((-1.0)*x1601*x1605))+(((-0.335)*x1607))+(((-1.0)*pz))+(((0.335)*x1611))+((r22*x1600))+(((-0.17676784)*cj1))+(((-1.0)*r22*x1588))+(((-1.0)*x1596*x1605))+(((-1.0)*r21*x1587))+((r20*x1604)));
evalcond[4]=(((gconst4*x1590*x1591))+((x1589*x1602))+((x1589*x1606))+(((-1.0)*x1612))+(((-1.0)*x1608))+(((-1.0)*x1591*x1593*x1594))+((x1593*x1610))+(((-1.0)*x1597*x1598*x1603))+((x1592*x1602))+((x1592*x1606))+(((-1.0)*x1591*x1594*x1595))+((gconst4*x1591*x1603))+(((-1.0)*x1590*x1597*x1598))+((x1595*x1610)));
evalcond[5]=(((gconst4*x1590*x1596))+((x1589*x1600))+(((-0.21066117)*cj1))+((x1595*x1604))+(((-1.0)*gconst5*x1593*x1601))+(((0.335)*x1608))+(((0.17676784)*sj1))+(((-1.0)*x1588*x1592))+(((-1.0)*x1588*x1589))+(((0.335)*x1612))+((gconst4*x1590*x1601))+(((-1.0)*x1587*x1603))+((x1592*x1600))+((x1593*x1604))+(((-1.0)*py*sj0))+((gconst4*x1601*x1603))+(((-1.0)*gconst5*x1593*x1596))+((gconst4*x1596*x1603))+(((-1.0)*gconst5*x1595*x1596))+(((-1.0)*cj0*px))+(((-1.0)*x1587*x1590))+(((-1.0)*gconst5*x1595*x1601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1614=(cj3*sj1);
IkReal x1615=(gconst5*r20);
IkReal x1616=(r22*sj5);
IkReal x1617=(cj5*r22);
IkReal x1618=((1.0)*sj5);
IkReal x1619=(gconst4*r21);
IkReal x1620=(sj3*sj4);
IkReal x1621=(cj0*gconst5*r01);
IkReal x1622=(gconst4*r10*sj0);
IkReal x1623=(cj1*cj4*sj3);
IkReal x1624=(sj5*x1619);
IkReal x1625=((1.0)*cj1*cj3);
IkReal x1626=(gconst5*r11*sj0);
IkReal x1627=(cj0*gconst4*r00);
IkReal x1628=(cj4*sj1*sj3);
IkReal x1629=((1.0)*sj1*x1620);
IkReal x1630=(cj1*cj5*x1620);
CheckValue<IkReal> x1631=IKPowWithIntegerCheck(IKsign((cj3*sj3)),-1);
if(!x1631.valid){
continue;
}
CheckValue<IkReal> x1632 = IKatan2WithCheck(IkReal(((((-1.0)*x1616*x1629))+((x1617*x1628))+(((-1.0)*cj5*x1615*x1629))+(((-1.0)*x1615*x1618*x1628))+(((-1.0)*x1625*x1627))+(((-1.0)*x1625*x1626))+(((-1.0)*x1621*x1625))+(((-1.0)*x1622*x1625))+((cj5*sj1*x1619*x1620))+((x1624*x1628)))),IkReal(((((-1.0)*cj1*x1616*x1620))+((x1619*x1630))+((x1623*x1624))+((x1617*x1623))+((x1614*x1627))+((x1614*x1626))+((x1614*x1621))+((x1614*x1622))+(((-1.0)*x1615*x1618*x1623))+(((-1.0)*x1615*x1630)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1632.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1631.value)))+(x1632.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1633=IKcos(j2);
IkReal x1634=IKsin(j2);
IkReal x1635=(cj0*r02);
IkReal x1636=((1.11e-6)*sj5);
IkReal x1637=((1.0)*gconst4);
IkReal x1638=(r12*sj0);
IkReal x1639=((1.11e-6)*cj5);
IkReal x1640=(cj5*r22);
IkReal x1641=(r10*sj0);
IkReal x1642=(cj4*cj5);
IkReal x1643=(gconst4*r21);
IkReal x1644=((1.0)*gconst5);
IkReal x1645=(cj5*sj4);
IkReal x1646=(cj4*sj5);
IkReal x1647=(cj0*r00);
IkReal x1648=((0.15)*sj5);
IkReal x1649=((1.8e-7)*gconst5);
IkReal x1650=(gconst5*r20);
IkReal x1651=(r11*sj0);
IkReal x1652=((0.15)*cj5);
IkReal x1653=(cj0*gconst4*r01);
IkReal x1654=(sj4*x1643);
IkReal x1655=((1.0)*sj4*sj5);
IkReal x1656=(cj1*x1634);
IkReal x1657=(sj1*x1633);
IkReal x1658=(gconst4*sj5*x1651);
IkReal x1659=((1.0)*x1656);
IkReal x1660=((1.0)*cj1*x1633);
IkReal x1661=((1.0)*sj1*x1634);
evalcond[0]=((((-1.0)*sj3*x1660))+(((-1.0)*sj3*x1661))+(((-1.0)*r20*x1637))+(((-1.0)*r21*x1644)));
evalcond[1]=((((-1.0)*x1644*x1651))+(((-1.0)*sj3*x1659))+((sj3*x1657))+(((-1.0)*x1637*x1647))+(((-1.0)*x1637*x1641))+(((-1.0)*cj0*r01*x1644)));
evalcond[2]=(x1656+((sj5*x1654))+(((-1.0)*r21*x1637*x1642))+(((-1.0)*x1657))+((sj4*x1640))+(((-1.0)*r20*sj4*sj5*x1644))+((r22*x1646))+((x1642*x1650)));
evalcond[3]=((((-1.0)*r22*x1655))+(((-1.0)*cj3*x1661))+(((-1.0)*cj3*x1660))+((x1643*x1646))+((x1643*x1645))+(((-1.0)*r20*x1644*x1646))+(((-1.0)*r20*x1644*x1645))+((cj4*x1640)));
evalcond[4]=((((-1.0)*r22*x1636))+(((-0.21066117)*sj1))+((r20*x1649))+(((-1.8e-7)*x1643))+(((-0.335)*x1656))+(((-1.0)*x1639*x1650))+(((-1.0)*pz))+(((0.15)*x1640))+(((-0.17676784)*cj1))+((x1639*x1643))+(((0.335)*x1657))+((x1643*x1648))+(((-1.0)*x1648*x1650)));
evalcond[5]=((((-1.0)*x1637*x1642*x1651))+(((-1.0)*sj4*sj5*x1641*x1644))+((gconst5*x1642*x1647))+((gconst5*x1641*x1642))+(((-1.0)*sj4*sj5*x1644*x1647))+((sj4*sj5*x1653))+(((-1.0)*x1660))+(((-1.0)*x1661))+(((-1.0)*cj0*r01*x1637*x1642))+((x1635*x1645))+((x1635*x1646))+((x1638*x1645))+((x1638*x1646))+((sj4*x1658)));
evalcond[6]=((((-1.0)*x1635*x1655))+(((-1.0)*x1644*x1646*x1647))+((gconst4*x1645*x1651))+((x1645*x1653))+((x1646*x1653))+((cj3*x1657))+(((-1.0)*x1638*x1655))+(((-1.0)*x1644*x1645*x1647))+((gconst4*x1646*x1651))+(((-1.0)*cj3*x1659))+((x1635*x1642))+(((-1.0)*x1641*x1644*x1645))+(((-1.0)*x1641*x1644*x1646))+((x1638*x1642)));
evalcond[7]=((((0.335)*cj1*x1633))+(((-1.0)*x1635*x1636))+((gconst4*x1639*x1651))+((x1638*x1652))+(((-0.21066117)*cj1))+(((-1.0)*gconst5*x1647*x1648))+((x1648*x1653))+(((0.17676784)*sj1))+(((-1.8e-7)*gconst4*x1651))+((x1641*x1649))+(((0.335)*sj1*x1634))+(((-1.8e-7)*x1653))+((x1647*x1649))+(((-1.0)*x1636*x1638))+((x1639*x1653))+(((-1.0)*py*sj0))+(((-1.0)*gconst5*x1641*x1648))+((x1635*x1652))+((gconst4*x1648*x1651))+(((-1.0)*cj0*px))+(((-1.0)*gconst5*x1639*x1647))+(((-1.0)*gconst5*x1639*x1641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1662=(r20*sj1);
IkReal x1663=(gconst5*sj3);
IkReal x1664=(cj4*cj5);
IkReal x1665=((1.0)*gconst4);
IkReal x1666=(sj1*sj3);
IkReal x1667=(r21*sj3);
IkReal x1668=((1.0)*cj1);
IkReal x1669=(gconst5*r21);
IkReal x1670=(sj4*sj5);
IkReal x1671=(cj1*x1670);
IkReal x1672=(cj5*r22*sj4);
IkReal x1673=(cj4*r22*sj5);
CheckValue<IkReal> x1674=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1674.valid){
continue;
}
CheckValue<IkReal> x1675 = IKatan2WithCheck(IkReal(((((-1.0)*x1662*x1665))+(((-1.0)*r20*x1663*x1664*x1668))+((r20*x1663*x1671))+((cj1*gconst4*x1664*x1667))+(((-1.0)*x1665*x1667*x1671))+(((-1.0)*sj3*x1668*x1673))+(((-1.0)*sj3*x1668*x1672))+(((-1.0)*sj1*x1669)))),IkReal(((((-1.0)*x1662*x1663*x1670))+((x1666*x1673))+((x1666*x1672))+(((-1.0)*r21*x1664*x1665*x1666))+((x1662*x1663*x1664))+(((-1.0)*x1668*x1669))+((gconst4*r21*x1666*x1670))+(((-1.0)*cj1*r20*x1665)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1675.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1674.value)))+(x1675.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1676=IKcos(j2);
IkReal x1677=IKsin(j2);
IkReal x1678=(cj0*r02);
IkReal x1679=((1.11e-6)*sj5);
IkReal x1680=((1.0)*gconst4);
IkReal x1681=(r12*sj0);
IkReal x1682=((1.11e-6)*cj5);
IkReal x1683=(cj5*r22);
IkReal x1684=(r10*sj0);
IkReal x1685=(cj4*cj5);
IkReal x1686=(gconst4*r21);
IkReal x1687=((1.0)*gconst5);
IkReal x1688=(cj5*sj4);
IkReal x1689=(cj4*sj5);
IkReal x1690=(cj0*r00);
IkReal x1691=((0.15)*sj5);
IkReal x1692=((1.8e-7)*gconst5);
IkReal x1693=(gconst5*r20);
IkReal x1694=(r11*sj0);
IkReal x1695=((0.15)*cj5);
IkReal x1696=(cj0*gconst4*r01);
IkReal x1697=(sj4*x1686);
IkReal x1698=((1.0)*sj4*sj5);
IkReal x1699=(cj1*x1677);
IkReal x1700=(sj1*x1676);
IkReal x1701=(gconst4*sj5*x1694);
IkReal x1702=((1.0)*x1699);
IkReal x1703=((1.0)*cj1*x1676);
IkReal x1704=((1.0)*sj1*x1677);
evalcond[0]=((((-1.0)*r20*x1680))+(((-1.0)*r21*x1687))+(((-1.0)*sj3*x1704))+(((-1.0)*sj3*x1703)));
evalcond[1]=((((-1.0)*x1687*x1694))+(((-1.0)*x1680*x1690))+(((-1.0)*sj3*x1702))+(((-1.0)*x1680*x1684))+(((-1.0)*cj0*r01*x1687))+((sj3*x1700)));
evalcond[2]=((((-1.0)*r21*x1680*x1685))+(((-1.0)*x1700))+x1699+((r22*x1689))+((sj4*x1683))+(((-1.0)*r20*sj4*sj5*x1687))+((x1685*x1693))+((sj5*x1697)));
evalcond[3]=((((-1.0)*cj3*x1703))+(((-1.0)*cj3*x1704))+((cj4*x1683))+(((-1.0)*r22*x1698))+((x1686*x1689))+((x1686*x1688))+(((-1.0)*r20*x1687*x1689))+(((-1.0)*r20*x1687*x1688)));
evalcond[4]=(((r20*x1692))+(((-0.21066117)*sj1))+(((-0.335)*x1699))+(((0.335)*x1700))+(((-1.0)*x1682*x1693))+(((0.15)*x1683))+(((-1.0)*x1691*x1693))+(((-1.0)*pz))+((x1686*x1691))+(((-0.17676784)*cj1))+((x1682*x1686))+(((-1.8e-7)*x1686))+(((-1.0)*r22*x1679)));
evalcond[5]=((((-1.0)*sj4*sj5*x1684*x1687))+((x1681*x1689))+((x1681*x1688))+((sj4*x1701))+((sj4*sj5*x1696))+(((-1.0)*x1680*x1685*x1694))+(((-1.0)*x1704))+(((-1.0)*x1703))+((gconst5*x1684*x1685))+((gconst5*x1685*x1690))+(((-1.0)*sj4*sj5*x1687*x1690))+(((-1.0)*cj0*r01*x1680*x1685))+((x1678*x1689))+((x1678*x1688)));
evalcond[6]=(((x1681*x1685))+(((-1.0)*cj3*x1702))+(((-1.0)*x1681*x1698))+((gconst4*x1688*x1694))+(((-1.0)*x1678*x1698))+(((-1.0)*x1684*x1687*x1688))+(((-1.0)*x1684*x1687*x1689))+(((-1.0)*x1687*x1688*x1690))+((x1689*x1696))+((x1688*x1696))+(((-1.0)*x1687*x1689*x1690))+((cj3*x1700))+((gconst4*x1689*x1694))+((x1678*x1685)));
evalcond[7]=((((-1.0)*gconst5*x1684*x1691))+((x1690*x1692))+(((-1.8e-7)*x1696))+(((-0.21066117)*cj1))+(((-1.0)*x1678*x1679))+(((0.17676784)*sj1))+(((-1.0)*gconst5*x1690*x1691))+((x1691*x1696))+(((-1.8e-7)*gconst4*x1694))+(((-1.0)*x1679*x1681))+(((0.335)*sj1*x1677))+(((-1.0)*py*sj0))+((x1682*x1696))+((gconst4*x1691*x1694))+(((0.335)*cj1*x1676))+((gconst4*x1682*x1694))+(((-1.0)*gconst5*x1682*x1690))+((x1684*x1692))+(((-1.0)*gconst5*x1682*x1684))+(((-1.0)*cj0*px))+((x1681*x1695))+((x1678*x1695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1705=(gconst5*r01);
IkReal x1706=(gconst4*r00);
IkReal x1707=((1.0)*sj1);
IkReal x1708=(gconst4*r20);
IkReal x1709=(cj0*sj1);
IkReal x1710=(gconst5*r21);
IkReal x1711=(sj0*sj1);
IkReal x1712=(gconst5*r11);
IkReal x1713=((1.0)*cj1);
IkReal x1714=(gconst4*r10);
IkReal x1715=(cj0*x1713);
CheckValue<IkReal> x1716=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1716.valid){
continue;
}
CheckValue<IkReal> x1717 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*x1713*x1714))+(((-1.0)*x1707*x1710))+(((-1.0)*x1707*x1708))+(((-1.0)*sj0*x1712*x1713))+(((-1.0)*x1706*x1715))+(((-1.0)*x1705*x1715)))),IkReal(((((-1.0)*x1710*x1713))+(((-1.0)*x1708*x1713))+((x1706*x1709))+((x1705*x1709))+((x1711*x1714))+((x1711*x1712)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1717.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1716.value)))+(x1717.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1718=IKcos(j2);
IkReal x1719=IKsin(j2);
IkReal x1720=(cj0*r02);
IkReal x1721=((1.11e-6)*sj5);
IkReal x1722=((1.0)*gconst4);
IkReal x1723=(r12*sj0);
IkReal x1724=((1.11e-6)*cj5);
IkReal x1725=(cj5*r22);
IkReal x1726=(r10*sj0);
IkReal x1727=(cj4*cj5);
IkReal x1728=(gconst4*r21);
IkReal x1729=((1.0)*gconst5);
IkReal x1730=(cj5*sj4);
IkReal x1731=(cj4*sj5);
IkReal x1732=(cj0*r00);
IkReal x1733=((0.15)*sj5);
IkReal x1734=((1.8e-7)*gconst5);
IkReal x1735=(gconst5*r20);
IkReal x1736=(r11*sj0);
IkReal x1737=((0.15)*cj5);
IkReal x1738=(cj0*gconst4*r01);
IkReal x1739=(sj4*x1728);
IkReal x1740=((1.0)*sj4*sj5);
IkReal x1741=(cj1*x1719);
IkReal x1742=(sj1*x1718);
IkReal x1743=(gconst4*sj5*x1736);
IkReal x1744=((1.0)*x1741);
IkReal x1745=((1.0)*cj1*x1718);
IkReal x1746=((1.0)*sj1*x1719);
evalcond[0]=((((-1.0)*sj3*x1746))+(((-1.0)*sj3*x1745))+(((-1.0)*r21*x1729))+(((-1.0)*r20*x1722)));
evalcond[1]=((((-1.0)*x1722*x1726))+(((-1.0)*x1722*x1732))+(((-1.0)*x1729*x1736))+(((-1.0)*cj0*r01*x1729))+(((-1.0)*sj3*x1744))+((sj3*x1742)));
evalcond[2]=(((sj5*x1739))+x1741+(((-1.0)*r20*sj4*sj5*x1729))+((r22*x1731))+(((-1.0)*x1742))+((sj4*x1725))+(((-1.0)*r21*x1722*x1727))+((x1727*x1735)));
evalcond[3]=(((x1728*x1731))+((x1728*x1730))+(((-1.0)*r20*x1729*x1731))+(((-1.0)*r20*x1729*x1730))+(((-1.0)*r22*x1740))+(((-1.0)*cj3*x1745))+(((-1.0)*cj3*x1746))+((cj4*x1725)));
evalcond[4]=((((-1.0)*x1733*x1735))+((x1728*x1733))+(((-1.0)*r22*x1721))+((x1724*x1728))+(((-1.8e-7)*x1728))+(((-0.21066117)*sj1))+(((0.15)*x1725))+(((0.335)*x1742))+(((-1.0)*pz))+(((-0.17676784)*cj1))+(((-1.0)*x1724*x1735))+((r20*x1734))+(((-0.335)*x1741)));
evalcond[5]=(((x1723*x1731))+((x1723*x1730))+((sj4*sj5*x1738))+((sj4*x1743))+((x1720*x1730))+((x1720*x1731))+(((-1.0)*x1746))+(((-1.0)*x1745))+(((-1.0)*sj4*sj5*x1726*x1729))+((gconst5*x1726*x1727))+(((-1.0)*sj4*sj5*x1729*x1732))+(((-1.0)*cj0*r01*x1722*x1727))+(((-1.0)*x1722*x1727*x1736))+((gconst5*x1727*x1732)));
evalcond[6]=(((x1730*x1738))+((x1723*x1727))+((gconst4*x1731*x1736))+((x1731*x1738))+(((-1.0)*x1726*x1729*x1731))+(((-1.0)*x1726*x1729*x1730))+((cj3*x1742))+((x1720*x1727))+(((-1.0)*cj3*x1744))+(((-1.0)*x1723*x1740))+((gconst4*x1730*x1736))+(((-1.0)*x1720*x1740))+(((-1.0)*x1729*x1730*x1732))+(((-1.0)*x1729*x1731*x1732)));
evalcond[7]=(((x1723*x1737))+(((-1.8e-7)*gconst4*x1736))+(((-1.8e-7)*x1738))+(((-0.21066117)*cj1))+((x1724*x1738))+((gconst4*x1733*x1736))+(((0.17676784)*sj1))+((x1726*x1734))+(((-1.0)*gconst5*x1724*x1726))+(((-1.0)*gconst5*x1724*x1732))+(((-1.0)*x1720*x1721))+(((0.335)*sj1*x1719))+(((-1.0)*gconst5*x1732*x1733))+((x1720*x1737))+((x1732*x1734))+(((-1.0)*py*sj0))+((x1733*x1738))+(((-1.0)*gconst5*x1726*x1733))+(((0.335)*cj1*x1718))+(((-1.0)*cj0*px))+(((-1.0)*x1721*x1723))+((gconst4*x1724*x1736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x1747=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1747);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1747);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1748=(sj4*sj5);
IkReal x1749=((1.0)*cj3);
IkReal x1750=(r11*sj6);
IkReal x1751=(cj3*cj6);
IkReal x1752=(cj4*cj5);
IkReal x1753=(r01*sj6);
IkReal x1754=(((r22*x1748))+(((-1.0)*r22*x1752)));
j0eval[0]=x1754;
j0eval[1]=((IKabs((((cj3*x1750*x1752))+(((-1.0)*cj6*r10*x1749*x1752))+(((-1.0)*x1748*x1749*x1750))+((r10*x1748*x1751)))))+(IKabs((((r00*x1748*x1751))+(((-1.0)*x1748*x1749*x1753))+(((-1.0)*cj6*r00*x1749*x1752))+((cj3*x1752*x1753))))));
j0eval[2]=IKsign(x1754);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x1755=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1755);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1755);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1756=(sj4*sj5);
IkReal x1757=((1.0)*sj6);
IkReal x1758=(cj4*cj5);
IkReal x1759=((2000.0)*cj6*rxp0_2);
IkReal x1760=((2000.0)*rxp1_2*sj6);
IkReal x1761=((1.0)*cj6*x1758);
j0eval[0]=(((cj6*rxp0_2*x1756))+(((-1.0)*rxp1_2*x1756*x1757))+(((-1.0)*rxp0_2*x1761))+((rxp1_2*sj6*x1758)));
j0eval[1]=IKsign(((((-1.0)*x1758*x1759))+(((-1.0)*x1756*x1760))+((x1758*x1760))+((x1756*x1759))));
j0eval[2]=((IKabs((((r11*sj6*x1758))+(((-1.0)*r10*x1761))+(((-1.0)*r11*x1756*x1757))+((cj6*r10*x1756)))))+(IKabs((((r01*sj6*x1758))+(((-1.0)*r00*x1761))+(((-1.0)*r01*x1756*x1757))+((cj6*r00*x1756))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1762=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1762);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1762);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1763=(((cj5*r22*sj4))+((cj4*r22*sj5)));
j0eval[0]=x1763;
j0eval[1]=IKsign(x1763);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x1764=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1764);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1764);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1765=(((cj5*r22*sj4))+((cj4*r22*sj5)));
j0eval[0]=x1765;
j0eval[1]=IKsign(x1765);
j0eval[2]=((sj6*sj6)+(cj6*cj6));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x1766=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1766);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1766);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1767=(cj6*rxp1_2);
IkReal x1768=(rxp0_2*sj6);
IkReal x1769=(r22*sj5);
IkReal x1770=(cj5*r22);
j0eval[0]=(r22+(((-833333.333333333)*x1769))+(((5555555.55555556)*x1767))+(((5555555.55555556)*x1768))+(((-6.16666666666667)*x1770)));
j0eval[1]=IKsign(((((0.00036)*r22))+(((2000.0)*x1767))+(((2000.0)*x1768))+(((-300.0)*x1769))+(((-0.00222)*x1770))));
j0eval[2]=((sj6*sj6)+(cj6*cj6));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x1771=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1771);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1771);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1772=cj5*cj5;
IkReal x1773=cj4*cj4;
IkReal x1774=(cj4*sj5);
IkReal x1775=(cj5*sj4);
IkReal x1776=(cj6*r10);
IkReal x1777=(r01*sj6);
IkReal x1778=((1.0)*cj6*r00);
IkReal x1779=((1.0)*r11*sj6);
IkReal x1780=((((2.0)*x1772*x1773))+(((-1.0)*x1772))+(((-1.0)*x1773))+(((-2.0)*x1774*x1775)));
j0eval[0]=x1780;
j0eval[1]=IKsign(x1780);
j0eval[2]=((IKabs((((x1775*x1776))+((x1774*x1776))+(((-1.0)*x1775*x1779))+(((-1.0)*x1774*x1779)))))+(IKabs((((x1775*x1777))+((x1774*x1777))+(((-1.0)*x1775*x1778))+(((-1.0)*x1774*x1778))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j5), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x1781=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1781);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1781);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4=0;
sj4=0;
cj4=1.0;
j5=0;
sj5=0;
cj5=1.0;
IkReal x1782=(cj6*rxp0_2);
IkReal x1783=(rxp1_2*sj6);
j0eval[0]=(x1783+(((-1.0)*x1782)));
j0eval[1]=((sj6*sj6)+(cj6*cj6));
j0eval[2]=IKsign(((((-2000.0)*x1782))+(((2000.0)*x1783))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x1784=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1784);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1784);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4=0;
sj4=0;
cj4=1.0;
j5=0;
sj5=0;
cj5=1.0;
IkReal x1785=(cj6*rxp1_2);
IkReal x1786=(rxp0_2*sj6);
j0eval[0]=((((1075268.8172043)*x1786))+(((1075268.8172043)*x1785))+(((-1.0)*r22)));
j0eval[1]=IKsign(((((-0.00186)*r22))+(((2000.0)*x1786))+(((2000.0)*x1785))));
j0eval[2]=((sj6*sj6)+(cj6*cj6));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1787=IKPowWithIntegerCheck(IKsign(((((-0.00186)*r22))+(((2000.0)*rxp0_2*sj6))+(((2000.0)*cj6*rxp1_2)))),-1);
if(!x1787.valid){
continue;
}
CheckValue<IkReal> x1788 = IKatan2WithCheck(IkReal((((r10*sj6))+((cj6*r11)))),IkReal((((r00*sj6))+((cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1788.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1787.value)))+(x1788.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1789=IKcos(j0);
IkReal x1790=IKsin(j0);
IkReal x1791=((1.0)*r01);
IkReal x1792=(cj6*x1789);
IkReal x1793=(cj6*x1790);
IkReal x1794=((1.0)*x1790);
IkReal x1795=(sj6*x1790);
IkReal x1796=(r11*sj6*x1789);
evalcond[0]=((((-1.0)*r00*sj6*x1794))+((r10*sj6*x1789))+((r11*x1792))+(((-1.0)*x1791*x1793)));
evalcond[1]=(((r00*x1793))+x1796+(((-1.0)*r10*x1792))+(((-1.0)*x1791*x1795)));
evalcond[2]=((-0.0005)+(((-9.3e-7)*x1796))+(((-9.3e-7)*r00*x1793))+((py*x1789))+(((9.3e-7)*r01*x1795))+(((9.3e-7)*r10*x1792))+(((-1.0)*px*x1794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1797=((2.17380622775013e-6)*sj0);
IkReal x1798=(cj6*r10);
IkReal x1799=(r11*sj6);
IkReal x1800=(cj0*px);
IkReal x1801=((2.59061016580351e-6)*sj0);
IkReal x1802=(py*sj0);
IkReal x1803=(cj0*cj6*r00);
IkReal x1804=(cj0*r01*sj6);
if( IKabs(((((-2.78560232882098)*pz))+(((-2.17380622775013e-6)*x1804))+((x1797*x1798))+(((2.33742605134422)*x1800))+(((2.33742605134422)*x1802))+(((2.17380622775013e-6)*x1803))+(((-1.0)*x1797*x1799)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.59061016580351e-6)*x1803))+((x1799*x1801))+(((-1.0)*x1798*x1801))+(((-2.33742605134422)*pz))+(((2.59061016580351e-6)*x1804))+(((-2.78560232882098)*x1802))+(((-2.78560232882098)*x1800)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.78560232882098)*pz))+(((-2.17380622775013e-6)*x1804))+((x1797*x1798))+(((2.33742605134422)*x1800))+(((2.33742605134422)*x1802))+(((2.17380622775013e-6)*x1803))+(((-1.0)*x1797*x1799))))+IKsqr(((((-2.59061016580351e-6)*x1803))+((x1799*x1801))+(((-1.0)*x1798*x1801))+(((-2.33742605134422)*pz))+(((2.59061016580351e-6)*x1804))+(((-2.78560232882098)*x1802))+(((-2.78560232882098)*x1800))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.78560232882098)*pz))+(((-2.17380622775013e-6)*x1804))+((x1797*x1798))+(((2.33742605134422)*x1800))+(((2.33742605134422)*x1802))+(((2.17380622775013e-6)*x1803))+(((-1.0)*x1797*x1799))), ((((-2.59061016580351e-6)*x1803))+((x1799*x1801))+(((-1.0)*x1798*x1801))+(((-2.33742605134422)*pz))+(((2.59061016580351e-6)*x1804))+(((-2.78560232882098)*x1802))+(((-2.78560232882098)*x1800))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[3];
IkReal x1805=IKsin(j1);
IkReal x1806=IKcos(j1);
IkReal x1807=(cj0*r01);
IkReal x1808=((9.3e-7)*sj6);
IkReal x1809=((0.335)*cj6);
IkReal x1810=(r10*sj0);
IkReal x1811=((9.3e-7)*cj6);
IkReal x1812=(r11*sj0);
IkReal x1813=((0.335)*sj6);
IkReal x1814=(cj0*r00);
IkReal x1815=((((0.17676784)*x1806))+(((0.21066117)*x1805))+(((1.0)*pz)));
evalcond[0]=((((-1.0)*x1815))+((x1813*x1814))+((x1809*x1812))+((x1807*x1809))+((x1810*x1813)));
evalcond[1]=((((0.17676784)*x1805))+(((-1.0)*x1811*x1814))+(((-1.0)*x1810*x1811))+(((-0.21066117)*x1806))+((x1808*x1812))+(((-1.0)*py*sj0))+((x1807*x1808))+(((-1.0)*cj0*px)));
evalcond[2]=((-1.0)*x1815);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1816=cj1*cj1;
IkReal x1817=((2.98507462686567)*pz);
IkReal x1818=(cj1*sj1);
if( IKabs(((((-0.628839313432836)*x1818))+(((-1.0)*cj1*x1817))+(((-0.527665194029851)*x1816)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.628839313432836)+(((-0.628839313432836)*x1816))+(((0.527665194029851)*x1818))+((sj1*x1817)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.628839313432836)*x1818))+(((-1.0)*cj1*x1817))+(((-0.527665194029851)*x1816))))+IKsqr(((0.628839313432836)+(((-0.628839313432836)*x1816))+(((0.527665194029851)*x1818))+((sj1*x1817))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.628839313432836)*x1818))+(((-1.0)*cj1*x1817))+(((-0.527665194029851)*x1816))), ((0.628839313432836)+(((-0.628839313432836)*x1816))+(((0.527665194029851)*x1818))+((sj1*x1817))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x1819=IKsin(j2);
IkReal x1820=IKcos(j2);
IkReal x1821=((1.0)*cj6);
IkReal x1822=(cj0*r01);
IkReal x1823=(r11*sj0);
IkReal x1824=((9.3e-7)*sj6);
IkReal x1825=((9.3e-7)*cj6);
IkReal x1826=(r10*sj0);
IkReal x1827=(cj0*r00);
IkReal x1828=((1.0)*sj6);
IkReal x1829=(cj1*x1819);
IkReal x1830=((1.0)*x1820);
IkReal x1831=(sj1*x1819);
IkReal x1832=(sj1*x1820);
evalcond[0]=((((-1.0)*sj1*x1830))+x1829);
evalcond[1]=((((-1.0)*x1831))+(((-1.0)*cj1*x1830)));
evalcond[2]=((((-0.21066117)*sj1))+(((-1.0)*pz))+(((0.335)*x1832))+(((-0.17676784)*cj1))+(((-0.335)*x1829)));
evalcond[3]=((((-1.0)*x1821*x1822))+(((-1.0)*x1821*x1823))+(((-1.0)*x1829))+(((-1.0)*x1826*x1828))+(((-1.0)*x1827*x1828))+x1832);
evalcond[4]=((((-0.21066117)*cj1))+(((0.335)*cj1*x1820))+(((0.17676784)*sj1))+((x1822*x1824))+((x1823*x1824))+(((-1.0)*x1825*x1826))+(((-1.0)*x1825*x1827))+(((0.335)*x1831))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1833=((1.0)*cj6);
CheckValue<IkReal> x1834 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x1833))+((r11*sj6)))),IkReal((((r01*sj6))+(((-1.0)*r00*x1833)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1834.valid){
continue;
}
CheckValue<IkReal> x1835=IKPowWithIntegerCheck(IKsign(((((-2000.0)*cj6*rxp0_2))+(((2000.0)*rxp1_2*sj6)))),-1);
if(!x1835.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1834.value)+(((1.5707963267949)*(x1835.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1836=IKcos(j0);
IkReal x1837=IKsin(j0);
IkReal x1838=((1.0)*r01);
IkReal x1839=(cj6*x1836);
IkReal x1840=(cj6*x1837);
IkReal x1841=((1.0)*x1837);
IkReal x1842=(sj6*x1837);
IkReal x1843=(r11*sj6*x1836);
evalcond[0]=((((-1.0)*r00*sj6*x1841))+((r10*sj6*x1836))+((r11*x1839))+(((-1.0)*x1838*x1840)));
evalcond[1]=(((r00*x1840))+x1843+(((-1.0)*x1838*x1842))+(((-1.0)*r10*x1839)));
evalcond[2]=((-0.0005)+(((-1.0)*px*x1841))+(((9.3e-7)*r10*x1839))+(((-9.3e-7)*x1843))+(((-9.3e-7)*r00*x1840))+((py*x1836))+(((9.3e-7)*r01*x1842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1844=((2.17380622775013e-6)*sj0);
IkReal x1845=(cj6*r10);
IkReal x1846=(r11*sj6);
IkReal x1847=(cj0*px);
IkReal x1848=((2.59061016580351e-6)*sj0);
IkReal x1849=(py*sj0);
IkReal x1850=(cj0*cj6*r00);
IkReal x1851=(cj0*r01*sj6);
if( IKabs(((((-2.78560232882098)*pz))+(((-2.17380622775013e-6)*x1851))+(((2.17380622775013e-6)*x1850))+((x1844*x1845))+(((2.33742605134422)*x1849))+(((2.33742605134422)*x1847))+(((-1.0)*x1844*x1846)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.59061016580351e-6)*x1851))+(((-2.78560232882098)*x1849))+(((-2.78560232882098)*x1847))+(((-2.33742605134422)*pz))+((x1846*x1848))+(((-2.59061016580351e-6)*x1850))+(((-1.0)*x1845*x1848)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.78560232882098)*pz))+(((-2.17380622775013e-6)*x1851))+(((2.17380622775013e-6)*x1850))+((x1844*x1845))+(((2.33742605134422)*x1849))+(((2.33742605134422)*x1847))+(((-1.0)*x1844*x1846))))+IKsqr(((((2.59061016580351e-6)*x1851))+(((-2.78560232882098)*x1849))+(((-2.78560232882098)*x1847))+(((-2.33742605134422)*pz))+((x1846*x1848))+(((-2.59061016580351e-6)*x1850))+(((-1.0)*x1845*x1848))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.78560232882098)*pz))+(((-2.17380622775013e-6)*x1851))+(((2.17380622775013e-6)*x1850))+((x1844*x1845))+(((2.33742605134422)*x1849))+(((2.33742605134422)*x1847))+(((-1.0)*x1844*x1846))), ((((2.59061016580351e-6)*x1851))+(((-2.78560232882098)*x1849))+(((-2.78560232882098)*x1847))+(((-2.33742605134422)*pz))+((x1846*x1848))+(((-2.59061016580351e-6)*x1850))+(((-1.0)*x1845*x1848))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[3];
IkReal x1852=IKsin(j1);
IkReal x1853=IKcos(j1);
IkReal x1854=(cj0*r01);
IkReal x1855=((9.3e-7)*sj6);
IkReal x1856=((0.335)*cj6);
IkReal x1857=(r10*sj0);
IkReal x1858=((9.3e-7)*cj6);
IkReal x1859=(r11*sj0);
IkReal x1860=((0.335)*sj6);
IkReal x1861=(cj0*r00);
IkReal x1862=((((0.21066117)*x1852))+(((1.0)*pz))+(((0.17676784)*x1853)));
evalcond[0]=(((x1860*x1861))+((x1856*x1859))+((x1854*x1856))+((x1857*x1860))+(((-1.0)*x1862)));
evalcond[1]=((((-1.0)*x1857*x1858))+((x1855*x1859))+((x1854*x1855))+(((-0.21066117)*x1853))+(((-1.0)*py*sj0))+(((-1.0)*x1858*x1861))+(((-1.0)*cj0*px))+(((0.17676784)*x1852)));
evalcond[2]=((-1.0)*x1862);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1863=cj1*cj1;
IkReal x1864=((2.98507462686567)*pz);
IkReal x1865=(cj1*sj1);
if( IKabs(((((-0.628839313432836)*x1865))+(((-0.527665194029851)*x1863))+(((-1.0)*cj1*x1864)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.628839313432836)+(((-0.628839313432836)*x1863))+(((0.527665194029851)*x1865))+((sj1*x1864)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.628839313432836)*x1865))+(((-0.527665194029851)*x1863))+(((-1.0)*cj1*x1864))))+IKsqr(((0.628839313432836)+(((-0.628839313432836)*x1863))+(((0.527665194029851)*x1865))+((sj1*x1864))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.628839313432836)*x1865))+(((-0.527665194029851)*x1863))+(((-1.0)*cj1*x1864))), ((0.628839313432836)+(((-0.628839313432836)*x1863))+(((0.527665194029851)*x1865))+((sj1*x1864))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x1866=IKsin(j2);
IkReal x1867=IKcos(j2);
IkReal x1868=((1.0)*cj6);
IkReal x1869=(cj0*r01);
IkReal x1870=(r11*sj0);
IkReal x1871=((9.3e-7)*sj6);
IkReal x1872=((9.3e-7)*cj6);
IkReal x1873=(r10*sj0);
IkReal x1874=(cj0*r00);
IkReal x1875=((1.0)*sj6);
IkReal x1876=(cj1*x1866);
IkReal x1877=((1.0)*x1867);
IkReal x1878=(sj1*x1866);
IkReal x1879=(sj1*x1867);
evalcond[0]=((((-1.0)*sj1*x1877))+x1876);
evalcond[1]=((((-1.0)*cj1*x1877))+(((-1.0)*x1878)));
evalcond[2]=((((-0.335)*x1876))+(((-0.21066117)*sj1))+(((-1.0)*pz))+(((0.335)*x1879))+(((-0.17676784)*cj1)));
evalcond[3]=((((-1.0)*x1873*x1875))+(((-1.0)*x1868*x1870))+(((-1.0)*x1874*x1875))+x1879+(((-1.0)*x1868*x1869))+(((-1.0)*x1876)));
evalcond[4]=((((-1.0)*x1872*x1873))+(((-1.0)*x1872*x1874))+(((-0.21066117)*cj1))+(((0.17676784)*sj1))+(((0.335)*x1878))+(((-1.0)*py*sj0))+((x1869*x1871))+(((0.335)*cj1*x1867))+((x1870*x1871))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j5, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x1880=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1880);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1880);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4=0;
sj4=0;
cj4=1.0;
j5=3.14159265358979;
sj5=0;
cj5=-1.0;
IkReal x1881=(rxp1_2*sj6);
IkReal x1882=(cj6*rxp0_2);
j0eval[0]=(x1882+(((-1.0)*x1881)));
j0eval[1]=IKsign(((((-2000.0)*x1881))+(((2000.0)*x1882))));
j0eval[2]=((sj6*sj6)+(cj6*cj6));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x1883=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1883);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1883);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4=0;
sj4=0;
cj4=1.0;
j5=3.14159265358979;
sj5=0;
cj5=-1.0;
IkReal x1884=(cj6*rxp1_2);
IkReal x1885=(rxp0_2*sj6);
j0eval[0]=((((775193.798449612)*x1884))+(((775193.798449612)*x1885))+r22);
j0eval[1]=IKsign(((((2000.0)*x1884))+(((2000.0)*x1885))+(((0.00258)*r22))));
j0eval[2]=((sj6*sj6)+(cj6*cj6));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1886=IKPowWithIntegerCheck(IKsign(((((2000.0)*rxp0_2*sj6))+(((0.00258)*r22))+(((2000.0)*cj6*rxp1_2)))),-1);
if(!x1886.valid){
continue;
}
CheckValue<IkReal> x1887 = IKatan2WithCheck(IkReal((((r10*sj6))+((cj6*r11)))),IkReal((((r00*sj6))+((cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1887.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1886.value)))+(x1887.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1888=IKcos(j0);
IkReal x1889=IKsin(j0);
IkReal x1890=((1.29e-6)*sj6);
IkReal x1891=((1.0)*sj6);
IkReal x1892=(r11*x1888);
IkReal x1893=(r01*x1889);
IkReal x1894=(cj6*r00*x1889);
IkReal x1895=(cj6*r10*x1888);
evalcond[0]=(((cj6*x1892))+((r10*sj6*x1888))+(((-1.0)*cj6*x1893))+(((-1.0)*r00*x1889*x1891)));
evalcond[1]=(((sj6*x1893))+(((-1.0)*x1891*x1892))+(((-1.0)*x1894))+x1895);
evalcond[2]=((-0.0005)+(((1.29e-6)*x1894))+((py*x1888))+(((-1.29e-6)*x1895))+(((-1.0)*x1890*x1893))+(((-1.0)*px*x1889))+((x1890*x1892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1896=((3.59342700417906e-6)*sj0);
IkReal x1897=(cj6*r10);
IkReal x1898=(r11*sj6);
IkReal x1899=(cj0*px);
IkReal x1900=((3.01527960623405e-6)*sj0);
IkReal x1901=(py*sj0);
IkReal x1902=(cj0*cj6*r00);
IkReal x1903=(cj0*r01*sj6);
if( IKabs(((((-2.78560232882098)*pz))+((x1898*x1900))+(((-3.01527960623405e-6)*x1902))+(((3.01527960623405e-6)*x1903))+(((2.33742605134422)*x1901))+(((-1.0)*x1897*x1900))+(((2.33742605134422)*x1899)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1896*x1897))+(((3.59342700417906e-6)*x1902))+(((-2.33742605134422)*pz))+(((-2.78560232882098)*x1899))+(((-3.59342700417906e-6)*x1903))+(((-2.78560232882098)*x1901))+(((-1.0)*x1896*x1898)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.78560232882098)*pz))+((x1898*x1900))+(((-3.01527960623405e-6)*x1902))+(((3.01527960623405e-6)*x1903))+(((2.33742605134422)*x1901))+(((-1.0)*x1897*x1900))+(((2.33742605134422)*x1899))))+IKsqr((((x1896*x1897))+(((3.59342700417906e-6)*x1902))+(((-2.33742605134422)*pz))+(((-2.78560232882098)*x1899))+(((-3.59342700417906e-6)*x1903))+(((-2.78560232882098)*x1901))+(((-1.0)*x1896*x1898))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.78560232882098)*pz))+((x1898*x1900))+(((-3.01527960623405e-6)*x1902))+(((3.01527960623405e-6)*x1903))+(((2.33742605134422)*x1901))+(((-1.0)*x1897*x1900))+(((2.33742605134422)*x1899))), (((x1896*x1897))+(((3.59342700417906e-6)*x1902))+(((-2.33742605134422)*pz))+(((-2.78560232882098)*x1899))+(((-3.59342700417906e-6)*x1903))+(((-2.78560232882098)*x1901))+(((-1.0)*x1896*x1898))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[3];
IkReal x1904=IKsin(j1);
IkReal x1905=IKcos(j1);
IkReal x1906=(cj0*cj6);
IkReal x1907=((1.29e-6)*sj0);
IkReal x1908=((0.335)*sj0);
IkReal x1909=(cj0*sj6);
IkReal x1910=((((0.17676784)*x1905))+(((1.0)*pz))+(((0.21066117)*x1904)));
evalcond[0]=(((cj6*r11*x1908))+(((0.335)*r00*x1909))+(((0.335)*r01*x1906))+((r10*sj6*x1908))+(((-1.0)*x1910)));
evalcond[1]=((((-1.0)*r11*sj6*x1907))+(((-1.0)*py*sj0))+(((-1.29e-6)*r01*x1909))+(((0.17676784)*x1904))+(((1.29e-6)*r00*x1906))+(((-1.0)*cj0*px))+(((-0.21066117)*x1905))+((cj6*r10*x1907)));
evalcond[2]=((-1.0)*x1910);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1911=cj1*cj1;
IkReal x1912=((2.98507462686567)*pz);
IkReal x1913=(cj1*sj1);
if( IKabs(((((-0.527665194029851)*x1911))+(((-1.0)*cj1*x1912))+(((-0.628839313432836)*x1913)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.628839313432836)+(((-0.628839313432836)*x1911))+((sj1*x1912))+(((0.527665194029851)*x1913)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.527665194029851)*x1911))+(((-1.0)*cj1*x1912))+(((-0.628839313432836)*x1913))))+IKsqr(((0.628839313432836)+(((-0.628839313432836)*x1911))+((sj1*x1912))+(((0.527665194029851)*x1913))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.527665194029851)*x1911))+(((-1.0)*cj1*x1912))+(((-0.628839313432836)*x1913))), ((0.628839313432836)+(((-0.628839313432836)*x1911))+((sj1*x1912))+(((0.527665194029851)*x1913))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x1914=IKsin(j2);
IkReal x1915=IKcos(j2);
IkReal x1916=(cj0*cj6);
IkReal x1917=((1.29e-6)*sj6);
IkReal x1918=(r11*sj0);
IkReal x1919=(r10*sj0);
IkReal x1920=((1.0)*cj0);
IkReal x1921=(cj1*x1914);
IkReal x1922=((1.0)*x1915);
IkReal x1923=(sj1*x1914);
IkReal x1924=(sj1*x1915);
evalcond[0]=(x1921+(((-1.0)*sj1*x1922)));
evalcond[1]=((((-1.0)*cj1*x1922))+(((-1.0)*x1923)));
evalcond[2]=((((-0.21066117)*sj1))+(((0.335)*x1924))+(((-1.0)*pz))+(((-0.17676784)*cj1))+(((-0.335)*x1921)));
evalcond[3]=((((-1.0)*sj6*x1919))+(((-1.0)*x1921))+x1924+(((-1.0)*r00*sj6*x1920))+(((-1.0)*cj6*x1918))+(((-1.0)*r01*x1916)));
evalcond[4]=((((-1.0)*x1917*x1918))+(((-0.21066117)*cj1))+(((0.17676784)*sj1))+(((-1.0)*cj0*r01*x1917))+(((0.335)*x1923))+(((-1.0)*px*x1920))+(((1.29e-6)*r00*x1916))+(((1.29e-6)*cj6*x1919))+(((-1.0)*py*sj0))+(((0.335)*cj1*x1915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1925=((1.0)*sj6);
CheckValue<IkReal> x1926=IKPowWithIntegerCheck(IKsign(((((-2000.0)*rxp1_2*sj6))+(((2000.0)*cj6*rxp0_2)))),-1);
if(!x1926.valid){
continue;
}
CheckValue<IkReal> x1927 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x1925))+((cj6*r10)))),IkReal(((((-1.0)*r01*x1925))+((cj6*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1927.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1926.value)))+(x1927.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1928=IKcos(j0);
IkReal x1929=IKsin(j0);
IkReal x1930=((1.29e-6)*sj6);
IkReal x1931=((1.0)*sj6);
IkReal x1932=(r11*x1928);
IkReal x1933=(r01*x1929);
IkReal x1934=(cj6*r00*x1929);
IkReal x1935=(cj6*r10*x1928);
evalcond[0]=((((-1.0)*r00*x1929*x1931))+((r10*sj6*x1928))+((cj6*x1932))+(((-1.0)*cj6*x1933)));
evalcond[1]=((((-1.0)*x1934))+x1935+(((-1.0)*x1931*x1932))+((sj6*x1933)));
evalcond[2]=((-0.0005)+(((-1.0)*x1930*x1933))+((x1930*x1932))+(((-1.0)*px*x1929))+(((-1.29e-6)*x1935))+(((1.29e-6)*x1934))+((py*x1928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1936=((3.59342700417906e-6)*sj0);
IkReal x1937=(cj6*r10);
IkReal x1938=(r11*sj6);
IkReal x1939=(cj0*px);
IkReal x1940=((3.01527960623405e-6)*sj0);
IkReal x1941=(py*sj0);
IkReal x1942=(cj0*cj6*r00);
IkReal x1943=(cj0*r01*sj6);
if( IKabs((((x1938*x1940))+(((-2.78560232882098)*pz))+(((-1.0)*x1937*x1940))+(((2.33742605134422)*x1941))+(((2.33742605134422)*x1939))+(((-3.01527960623405e-6)*x1942))+(((3.01527960623405e-6)*x1943)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.59342700417906e-6)*x1943))+(((3.59342700417906e-6)*x1942))+(((-2.33742605134422)*pz))+((x1936*x1937))+(((-2.78560232882098)*x1939))+(((-2.78560232882098)*x1941))+(((-1.0)*x1936*x1938)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1938*x1940))+(((-2.78560232882098)*pz))+(((-1.0)*x1937*x1940))+(((2.33742605134422)*x1941))+(((2.33742605134422)*x1939))+(((-3.01527960623405e-6)*x1942))+(((3.01527960623405e-6)*x1943))))+IKsqr(((((-3.59342700417906e-6)*x1943))+(((3.59342700417906e-6)*x1942))+(((-2.33742605134422)*pz))+((x1936*x1937))+(((-2.78560232882098)*x1939))+(((-2.78560232882098)*x1941))+(((-1.0)*x1936*x1938))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((x1938*x1940))+(((-2.78560232882098)*pz))+(((-1.0)*x1937*x1940))+(((2.33742605134422)*x1941))+(((2.33742605134422)*x1939))+(((-3.01527960623405e-6)*x1942))+(((3.01527960623405e-6)*x1943))), ((((-3.59342700417906e-6)*x1943))+(((3.59342700417906e-6)*x1942))+(((-2.33742605134422)*pz))+((x1936*x1937))+(((-2.78560232882098)*x1939))+(((-2.78560232882098)*x1941))+(((-1.0)*x1936*x1938))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[3];
IkReal x1944=IKsin(j1);
IkReal x1945=IKcos(j1);
IkReal x1946=(cj0*cj6);
IkReal x1947=((1.29e-6)*sj0);
IkReal x1948=((0.335)*sj0);
IkReal x1949=(cj0*sj6);
IkReal x1950=((((1.0)*pz))+(((0.21066117)*x1944))+(((0.17676784)*x1945)));
evalcond[0]=((((0.335)*r01*x1946))+(((-1.0)*x1950))+(((0.335)*r00*x1949))+((r10*sj6*x1948))+((cj6*r11*x1948)));
evalcond[1]=((((-1.0)*r11*sj6*x1947))+(((-1.29e-6)*r01*x1949))+(((-0.21066117)*x1945))+(((1.29e-6)*r00*x1946))+(((-1.0)*py*sj0))+((cj6*r10*x1947))+(((-1.0)*cj0*px))+(((0.17676784)*x1944)));
evalcond[2]=((-1.0)*x1950);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1951=cj1*cj1;
IkReal x1952=((2.98507462686567)*pz);
IkReal x1953=(cj1*sj1);
if( IKabs(((((-0.628839313432836)*x1953))+(((-0.527665194029851)*x1951))+(((-1.0)*cj1*x1952)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.628839313432836)+(((-0.628839313432836)*x1951))+((sj1*x1952))+(((0.527665194029851)*x1953)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.628839313432836)*x1953))+(((-0.527665194029851)*x1951))+(((-1.0)*cj1*x1952))))+IKsqr(((0.628839313432836)+(((-0.628839313432836)*x1951))+((sj1*x1952))+(((0.527665194029851)*x1953))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.628839313432836)*x1953))+(((-0.527665194029851)*x1951))+(((-1.0)*cj1*x1952))), ((0.628839313432836)+(((-0.628839313432836)*x1951))+((sj1*x1952))+(((0.527665194029851)*x1953))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x1954=IKsin(j2);
IkReal x1955=IKcos(j2);
IkReal x1956=(cj0*cj6);
IkReal x1957=((1.29e-6)*sj6);
IkReal x1958=(r11*sj0);
IkReal x1959=(r10*sj0);
IkReal x1960=((1.0)*cj0);
IkReal x1961=(cj1*x1954);
IkReal x1962=((1.0)*x1955);
IkReal x1963=(sj1*x1954);
IkReal x1964=(sj1*x1955);
evalcond[0]=((((-1.0)*sj1*x1962))+x1961);
evalcond[1]=((((-1.0)*x1963))+(((-1.0)*cj1*x1962)));
evalcond[2]=((((0.335)*x1964))+(((-0.21066117)*sj1))+(((-0.335)*x1961))+(((-1.0)*pz))+(((-0.17676784)*cj1)));
evalcond[3]=((((-1.0)*cj6*x1958))+(((-1.0)*sj6*x1959))+(((-1.0)*x1961))+(((-1.0)*r01*x1956))+x1964+(((-1.0)*r00*sj6*x1960)));
evalcond[4]=((((0.335)*x1963))+(((-1.0)*x1957*x1958))+(((-1.0)*cj0*r01*x1957))+(((-0.21066117)*cj1))+(((0.17676784)*sj1))+(((1.29e-6)*r00*x1956))+(((-1.0)*px*x1960))+(((0.335)*cj1*x1955))+(((1.29e-6)*cj6*x1959))+(((-1.0)*py*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x1965=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1965);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1965);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4=1.5707963267949;
sj4=1.0;
cj4=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
IkReal x1966=(rxp1_2*sj6);
IkReal x1967=(cj6*rxp0_2);
j0eval[0]=((((-1.0)*x1966))+x1967);
j0eval[1]=IKsign(((((-2000.0)*x1966))+(((2000.0)*x1967))));
j0eval[2]=((sj6*sj6)+(cj6*cj6));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x1968=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1968);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1968);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4=1.5707963267949;
sj4=1.0;
cj4=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
IkReal x1969=(rxp0_2*sj6);
IkReal x1970=(cj6*rxp1_2);
j0eval[0]=((((6.66667466667627)*x1969))+(((6.66667466667627)*x1970))+(((-1.0)*r22)));
j0eval[1]=IKsign(((((2000.0)*x1970))+(((2000.0)*x1969))+(((-299.99964)*r22))));
j0eval[2]=((sj6*sj6)+(cj6*cj6));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1971=IKPowWithIntegerCheck(IKsign(((((2000.0)*rxp0_2*sj6))+(((-299.99964)*r22))+(((2000.0)*cj6*rxp1_2)))),-1);
if(!x1971.valid){
continue;
}
CheckValue<IkReal> x1972 = IKatan2WithCheck(IkReal((((r10*sj6))+((cj6*r11)))),IkReal((((r00*sj6))+((cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1972.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1971.value)))+(x1972.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1973=IKcos(j0);
IkReal x1974=IKsin(j0);
IkReal x1975=(cj6*r00);
IkReal x1976=(r01*sj6);
IkReal x1977=((1.0)*x1974);
IkReal x1978=((0.14999982)*x1974);
IkReal x1979=(cj6*x1973);
IkReal x1980=(r11*sj6*x1973);
evalcond[0]=(((r11*x1979))+(((-1.0)*cj6*r01*x1977))+(((-1.0)*r00*sj6*x1977))+((r10*sj6*x1973)));
evalcond[1]=((((-1.0)*x1975*x1977))+((r10*x1979))+((x1974*x1976))+(((-1.0)*x1980)));
evalcond[2]=((-0.0005)+(((0.14999982)*r10*x1979))+(((-0.14999982)*x1980))+(((-1.0)*x1975*x1978))+((x1976*x1978))+((py*x1973))+(((-1.0)*px*x1977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1981=((0.350613486964944)*cj6);
IkReal x1982=(r10*sj0);
IkReal x1983=((0.417839847914728)*cj0);
IkReal x1984=(r01*sj6);
IkReal x1985=(cj0*px);
IkReal x1986=(py*sj0);
IkReal x1987=(r11*sj0*sj6);
if( IKabs(((((-2.78560232882098)*pz))+(((2.33742605134422)*x1985))+(((2.33742605134422)*x1986))+((cj0*r00*x1981))+((x1981*x1982))+(((-0.350613486964944)*cj0*x1984))+(((-0.350613486964944)*x1987)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.417839847914728)*cj6*x1982))+(((-2.33742605134422)*pz))+(((-2.78560232882098)*x1985))+(((-2.78560232882098)*x1986))+(((0.417839847914728)*x1987))+(((-1.0)*cj6*r00*x1983))+((x1983*x1984)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.78560232882098)*pz))+(((2.33742605134422)*x1985))+(((2.33742605134422)*x1986))+((cj0*r00*x1981))+((x1981*x1982))+(((-0.350613486964944)*cj0*x1984))+(((-0.350613486964944)*x1987))))+IKsqr(((((-0.417839847914728)*cj6*x1982))+(((-2.33742605134422)*pz))+(((-2.78560232882098)*x1985))+(((-2.78560232882098)*x1986))+(((0.417839847914728)*x1987))+(((-1.0)*cj6*r00*x1983))+((x1983*x1984))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.78560232882098)*pz))+(((2.33742605134422)*x1985))+(((2.33742605134422)*x1986))+((cj0*r00*x1981))+((x1981*x1982))+(((-0.350613486964944)*cj0*x1984))+(((-0.350613486964944)*x1987))), ((((-0.417839847914728)*cj6*x1982))+(((-2.33742605134422)*pz))+(((-2.78560232882098)*x1985))+(((-2.78560232882098)*x1986))+(((0.417839847914728)*x1987))+(((-1.0)*cj6*r00*x1983))+((x1983*x1984))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[3];
IkReal x1988=IKsin(j1);
IkReal x1989=IKcos(j1);
IkReal x1990=(cj0*cj6);
IkReal x1991=((0.14999982)*sj0);
IkReal x1992=(cj0*sj6);
IkReal x1993=((0.335)*sj0);
IkReal x1994=((((0.17676784)*x1989))+(((0.21066117)*x1988))+(((1.0)*pz)));
evalcond[0]=((((0.335)*r01*x1990))+(((0.335)*r00*x1992))+((r10*sj6*x1993))+(((-1.0)*x1994))+((cj6*r11*x1993)));
evalcond[1]=((((0.17676784)*x1988))+(((-0.14999982)*r00*x1990))+(((-0.21066117)*x1989))+(((-1.0)*cj6*r10*x1991))+(((-1.0)*py*sj0))+(((0.14999982)*r01*x1992))+((r11*sj6*x1991))+(((-1.0)*cj0*px)));
evalcond[2]=((-1.0)*x1994);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1995=cj1*cj1;
IkReal x1996=((2.98507462686567)*pz);
IkReal x1997=(cj1*sj1);
if( IKabs(((((-0.628839313432836)*x1997))+(((-0.527665194029851)*x1995))+(((-1.0)*cj1*x1996)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.628839313432836)+((sj1*x1996))+(((-0.628839313432836)*x1995))+(((0.527665194029851)*x1997)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.628839313432836)*x1997))+(((-0.527665194029851)*x1995))+(((-1.0)*cj1*x1996))))+IKsqr(((0.628839313432836)+((sj1*x1996))+(((-0.628839313432836)*x1995))+(((0.527665194029851)*x1997))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.628839313432836)*x1997))+(((-0.527665194029851)*x1995))+(((-1.0)*cj1*x1996))), ((0.628839313432836)+((sj1*x1996))+(((-0.628839313432836)*x1995))+(((0.527665194029851)*x1997))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x1998=IKsin(j2);
IkReal x1999=IKcos(j2);
IkReal x2000=((0.14999982)*sj0);
IkReal x2001=((1.0)*cj6);
IkReal x2002=(cj0*r01);
IkReal x2003=((1.0)*sj0);
IkReal x2004=(cj0*r00);
IkReal x2005=(cj1*x1998);
IkReal x2006=((1.0)*x1999);
IkReal x2007=(sj1*x1998);
IkReal x2008=(sj1*x1999);
evalcond[0]=(x2005+(((-1.0)*sj1*x2006)));
evalcond[1]=((((-1.0)*cj1*x2006))+(((-1.0)*x2007)));
evalcond[2]=((((-0.335)*x2005))+(((-0.21066117)*sj1))+(((-1.0)*pz))+(((0.335)*x2008))+(((-0.17676784)*cj1)));
evalcond[3]=((((-1.0)*r10*sj6*x2003))+(((-1.0)*r11*sj0*x2001))+x2008+(((-1.0)*x2001*x2002))+(((-1.0)*x2005))+(((-1.0)*sj6*x2004)));
evalcond[4]=((((-0.21066117)*cj1))+(((-1.0)*py*x2003))+(((0.17676784)*sj1))+(((0.335)*x2007))+(((0.335)*cj1*x1999))+((r11*sj6*x2000))+(((-1.0)*cj6*r10*x2000))+(((-0.14999982)*cj6*x2004))+(((0.14999982)*sj6*x2002))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2009=((1.0)*sj6);
CheckValue<IkReal> x2010=IKPowWithIntegerCheck(IKsign(((((-2000.0)*rxp1_2*sj6))+(((2000.0)*cj6*rxp0_2)))),-1);
if(!x2010.valid){
continue;
}
CheckValue<IkReal> x2011 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x2009))+((cj6*r10)))),IkReal(((((-1.0)*r01*x2009))+((cj6*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2011.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2010.value)))+(x2011.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x2012=IKcos(j0);
IkReal x2013=IKsin(j0);
IkReal x2014=(cj6*r00);
IkReal x2015=(r01*sj6);
IkReal x2016=((1.0)*x2013);
IkReal x2017=((0.14999982)*x2013);
IkReal x2018=(cj6*x2012);
IkReal x2019=(r11*sj6*x2012);
evalcond[0]=((((-1.0)*r00*sj6*x2016))+(((-1.0)*cj6*r01*x2016))+((r11*x2018))+((r10*sj6*x2012)));
evalcond[1]=(((r10*x2018))+(((-1.0)*x2014*x2016))+(((-1.0)*x2019))+((x2013*x2015)));
evalcond[2]=((-0.0005)+((py*x2012))+((x2015*x2017))+(((-1.0)*x2014*x2017))+(((0.14999982)*r10*x2018))+(((-0.14999982)*x2019))+(((-1.0)*px*x2016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2020=((0.350613486964944)*cj6);
IkReal x2021=(r10*sj0);
IkReal x2022=((0.417839847914728)*cj0);
IkReal x2023=(r01*sj6);
IkReal x2024=(cj0*px);
IkReal x2025=(py*sj0);
IkReal x2026=(r11*sj0*sj6);
if( IKabs((((x2020*x2021))+(((-2.78560232882098)*pz))+(((-0.350613486964944)*x2026))+(((-0.350613486964944)*cj0*x2023))+(((2.33742605134422)*x2025))+(((2.33742605134422)*x2024))+((cj0*r00*x2020)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.33742605134422)*pz))+((x2022*x2023))+(((-0.417839847914728)*cj6*x2021))+(((-2.78560232882098)*x2024))+(((-2.78560232882098)*x2025))+(((0.417839847914728)*x2026))+(((-1.0)*cj6*r00*x2022)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2020*x2021))+(((-2.78560232882098)*pz))+(((-0.350613486964944)*x2026))+(((-0.350613486964944)*cj0*x2023))+(((2.33742605134422)*x2025))+(((2.33742605134422)*x2024))+((cj0*r00*x2020))))+IKsqr(((((-2.33742605134422)*pz))+((x2022*x2023))+(((-0.417839847914728)*cj6*x2021))+(((-2.78560232882098)*x2024))+(((-2.78560232882098)*x2025))+(((0.417839847914728)*x2026))+(((-1.0)*cj6*r00*x2022))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((x2020*x2021))+(((-2.78560232882098)*pz))+(((-0.350613486964944)*x2026))+(((-0.350613486964944)*cj0*x2023))+(((2.33742605134422)*x2025))+(((2.33742605134422)*x2024))+((cj0*r00*x2020))), ((((-2.33742605134422)*pz))+((x2022*x2023))+(((-0.417839847914728)*cj6*x2021))+(((-2.78560232882098)*x2024))+(((-2.78560232882098)*x2025))+(((0.417839847914728)*x2026))+(((-1.0)*cj6*r00*x2022))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[3];
IkReal x2027=IKsin(j1);
IkReal x2028=IKcos(j1);
IkReal x2029=(cj0*cj6);
IkReal x2030=((0.14999982)*sj0);
IkReal x2031=(cj0*sj6);
IkReal x2032=((0.335)*sj0);
IkReal x2033=((((0.17676784)*x2028))+(((0.21066117)*x2027))+(((1.0)*pz)));
evalcond[0]=(((cj6*r11*x2032))+(((0.335)*r00*x2031))+(((0.335)*r01*x2029))+((r10*sj6*x2032))+(((-1.0)*x2033)));
evalcond[1]=((((-0.14999982)*r00*x2029))+(((0.17676784)*x2027))+((r11*sj6*x2030))+(((-1.0)*py*sj0))+(((-1.0)*cj6*r10*x2030))+(((0.14999982)*r01*x2031))+(((-0.21066117)*x2028))+(((-1.0)*cj0*px)));
evalcond[2]=((-1.0)*x2033);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2034=cj1*cj1;
IkReal x2035=((2.98507462686567)*pz);
IkReal x2036=(cj1*sj1);
if( IKabs(((((-1.0)*cj1*x2035))+(((-0.527665194029851)*x2034))+(((-0.628839313432836)*x2036)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.628839313432836)+((sj1*x2035))+(((0.527665194029851)*x2036))+(((-0.628839313432836)*x2034)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x2035))+(((-0.527665194029851)*x2034))+(((-0.628839313432836)*x2036))))+IKsqr(((0.628839313432836)+((sj1*x2035))+(((0.527665194029851)*x2036))+(((-0.628839313432836)*x2034))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x2035))+(((-0.527665194029851)*x2034))+(((-0.628839313432836)*x2036))), ((0.628839313432836)+((sj1*x2035))+(((0.527665194029851)*x2036))+(((-0.628839313432836)*x2034))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x2037=IKsin(j2);
IkReal x2038=IKcos(j2);
IkReal x2039=((0.14999982)*sj0);
IkReal x2040=((1.0)*cj6);
IkReal x2041=(cj0*r01);
IkReal x2042=((1.0)*sj0);
IkReal x2043=(cj0*r00);
IkReal x2044=(cj1*x2037);
IkReal x2045=((1.0)*x2038);
IkReal x2046=(sj1*x2037);
IkReal x2047=(sj1*x2038);
evalcond[0]=(x2044+(((-1.0)*sj1*x2045)));
evalcond[1]=((((-1.0)*x2046))+(((-1.0)*cj1*x2045)));
evalcond[2]=((((0.335)*x2047))+(((-0.21066117)*sj1))+(((-1.0)*pz))+(((-0.17676784)*cj1))+(((-0.335)*x2044)));
evalcond[3]=(x2047+(((-1.0)*r11*sj0*x2040))+(((-1.0)*x2044))+(((-1.0)*sj6*x2043))+(((-1.0)*x2040*x2041))+(((-1.0)*r10*sj6*x2042)));
evalcond[4]=((((-0.21066117)*cj1))+(((0.335)*cj1*x2038))+(((0.335)*x2046))+(((-0.14999982)*cj6*x2043))+(((0.14999982)*sj6*x2041))+(((0.17676784)*sj1))+((r11*sj6*x2039))+(((-1.0)*py*x2042))+(((-1.0)*cj6*r10*x2039))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x2048=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2048);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2048);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4=1.5707963267949;
sj4=1.0;
cj4=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
IkReal x2049=(cj6*rxp0_2);
IkReal x2050=(rxp1_2*sj6);
j0eval[0]=(x2050+(((-1.0)*x2049)));
j0eval[1]=((sj6*sj6)+(cj6*cj6));
j0eval[2]=IKsign(((((-2000.0)*x2049))+(((2000.0)*x2050))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x2051=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2051);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2051);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4=1.5707963267949;
sj4=1.0;
cj4=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
IkReal x2052=(cj6*rxp1_2);
IkReal x2053=(rxp0_2*sj6);
j0eval[0]=((((6.66665866667627)*x2052))+(((6.66665866667627)*x2053))+r22);
j0eval[1]=((sj6*sj6)+(cj6*cj6));
j0eval[2]=IKsign(((((300.00036)*r22))+(((2000.0)*x2052))+(((2000.0)*x2053))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2054=IKPowWithIntegerCheck(IKsign(((((300.00036)*r22))+(((2000.0)*rxp0_2*sj6))+(((2000.0)*cj6*rxp1_2)))),-1);
if(!x2054.valid){
continue;
}
CheckValue<IkReal> x2055 = IKatan2WithCheck(IkReal((((r10*sj6))+((cj6*r11)))),IkReal((((r00*sj6))+((cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2055.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2054.value)))+(x2055.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x2056=IKcos(j0);
IkReal x2057=IKsin(j0);
IkReal x2058=((1.0)*cj6);
IkReal x2059=((1.0)*sj6);
IkReal x2060=(r01*x2057);
IkReal x2061=(r00*x2057);
IkReal x2062=(cj6*x2056);
IkReal x2063=(r10*x2056);
IkReal x2064=(r11*sj6*x2056);
evalcond[0]=(((sj6*x2063))+(((-1.0)*x2058*x2060))+((r11*x2062))+(((-1.0)*x2059*x2061)));
evalcond[1]=((((-1.0)*x2058*x2063))+x2064+(((-1.0)*x2059*x2060))+((cj6*x2061)));
evalcond[2]=((-0.0005)+(((-0.15000018)*r10*x2062))+(((0.15000018)*x2064))+(((-1.0)*px*x2057))+(((0.15000018)*cj6*x2061))+((py*x2056))+(((-0.15000018)*sj6*x2060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2065=(cj0*px);
IkReal x2066=(py*sj0);
IkReal x2067=(r11*sj0*sj6);
IkReal x2068=(cj0*cj6*r00);
IkReal x2069=(cj6*r10*sj0);
IkReal x2070=(cj0*r01*sj6);
if( IKabs(((((0.350614328438323)*x2070))+(((-2.78560232882098)*pz))+(((2.33742605134422)*x2066))+(((2.33742605134422)*x2065))+(((-0.350614328438323)*x2068))+(((-0.350614328438323)*x2069))+(((0.350614328438323)*x2067)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.417840850731566)*x2069))+(((0.417840850731566)*x2068))+(((-0.417840850731566)*x2067))+(((-2.33742605134422)*pz))+(((-0.417840850731566)*x2070))+(((-2.78560232882098)*x2065))+(((-2.78560232882098)*x2066)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.350614328438323)*x2070))+(((-2.78560232882098)*pz))+(((2.33742605134422)*x2066))+(((2.33742605134422)*x2065))+(((-0.350614328438323)*x2068))+(((-0.350614328438323)*x2069))+(((0.350614328438323)*x2067))))+IKsqr(((((0.417840850731566)*x2069))+(((0.417840850731566)*x2068))+(((-0.417840850731566)*x2067))+(((-2.33742605134422)*pz))+(((-0.417840850731566)*x2070))+(((-2.78560232882098)*x2065))+(((-2.78560232882098)*x2066))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((0.350614328438323)*x2070))+(((-2.78560232882098)*pz))+(((2.33742605134422)*x2066))+(((2.33742605134422)*x2065))+(((-0.350614328438323)*x2068))+(((-0.350614328438323)*x2069))+(((0.350614328438323)*x2067))), ((((0.417840850731566)*x2069))+(((0.417840850731566)*x2068))+(((-0.417840850731566)*x2067))+(((-2.33742605134422)*pz))+(((-0.417840850731566)*x2070))+(((-2.78560232882098)*x2065))+(((-2.78560232882098)*x2066))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[3];
IkReal x2071=IKsin(j1);
IkReal x2072=IKcos(j1);
IkReal x2073=(cj0*r01);
IkReal x2074=((0.335)*cj6);
IkReal x2075=((0.15000018)*sj0);
IkReal x2076=(cj0*r00);
IkReal x2077=((0.335)*sj6);
IkReal x2078=((((0.17676784)*x2072))+(((1.0)*pz))+(((0.21066117)*x2071)));
evalcond[0]=(((r10*sj0*x2077))+(((-1.0)*x2078))+((x2076*x2077))+((x2073*x2074))+((r11*sj0*x2074)));
evalcond[1]=((((0.17676784)*x2071))+(((-1.0)*r11*sj6*x2075))+((cj6*r10*x2075))+(((-1.0)*py*sj0))+(((-0.15000018)*sj6*x2073))+(((0.15000018)*cj6*x2076))+(((-0.21066117)*x2072))+(((-1.0)*cj0*px)));
evalcond[2]=((-1.0)*x2078);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2079=cj1*cj1;
IkReal x2080=((2.98507462686567)*pz);
IkReal x2081=(cj1*sj1);
if( IKabs(((((-1.0)*cj1*x2080))+(((-0.628839313432836)*x2081))+(((-0.527665194029851)*x2079)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.628839313432836)+(((-0.628839313432836)*x2079))+((sj1*x2080))+(((0.527665194029851)*x2081)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x2080))+(((-0.628839313432836)*x2081))+(((-0.527665194029851)*x2079))))+IKsqr(((0.628839313432836)+(((-0.628839313432836)*x2079))+((sj1*x2080))+(((0.527665194029851)*x2081))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x2080))+(((-0.628839313432836)*x2081))+(((-0.527665194029851)*x2079))), ((0.628839313432836)+(((-0.628839313432836)*x2079))+((sj1*x2080))+(((0.527665194029851)*x2081))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x2082=IKsin(j2);
IkReal x2083=IKcos(j2);
IkReal x2084=(cj0*cj6);
IkReal x2085=(cj6*sj0);
IkReal x2086=(cj0*sj6);
IkReal x2087=((1.0)*sj0);
IkReal x2088=(cj1*x2082);
IkReal x2089=((1.0)*x2083);
IkReal x2090=(sj1*x2082);
IkReal x2091=(sj1*x2083);
evalcond[0]=((((-1.0)*sj1*x2089))+x2088);
evalcond[1]=((((-1.0)*cj1*x2089))+(((-1.0)*x2090)));
evalcond[2]=((((-0.21066117)*sj1))+(((-1.0)*pz))+(((-0.17676784)*cj1))+(((-0.335)*x2088))+(((0.335)*x2091)));
evalcond[3]=((((-1.0)*x2088))+(((-1.0)*r11*x2085))+x2091+(((-1.0)*r10*sj6*x2087))+(((-1.0)*r01*x2084))+(((-1.0)*r00*x2086)));
evalcond[4]=((((0.15000018)*r00*x2084))+(((-0.21066117)*cj1))+(((0.15000018)*r10*x2085))+(((0.17676784)*sj1))+(((-0.15000018)*r01*x2086))+(((-1.0)*py*x2087))+(((0.335)*cj1*x2083))+(((-0.15000018)*r11*sj0*sj6))+(((-1.0)*cj0*px))+(((0.335)*x2090)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2092=((1.0)*cj6);
CheckValue<IkReal> x2093 = IKatan2WithCheck(IkReal((((r11*sj6))+(((-1.0)*r10*x2092)))),IkReal((((r01*sj6))+(((-1.0)*r00*x2092)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2093.valid){
continue;
}
CheckValue<IkReal> x2094=IKPowWithIntegerCheck(IKsign(((((-2000.0)*cj6*rxp0_2))+(((2000.0)*rxp1_2*sj6)))),-1);
if(!x2094.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2093.value)+(((1.5707963267949)*(x2094.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x2095=IKcos(j0);
IkReal x2096=IKsin(j0);
IkReal x2097=((1.0)*cj6);
IkReal x2098=((1.0)*sj6);
IkReal x2099=(r01*x2096);
IkReal x2100=(r00*x2096);
IkReal x2101=(cj6*x2095);
IkReal x2102=(r10*x2095);
IkReal x2103=(r11*sj6*x2095);
evalcond[0]=(((sj6*x2102))+(((-1.0)*x2097*x2099))+((r11*x2101))+(((-1.0)*x2098*x2100)));
evalcond[1]=((((-1.0)*x2097*x2102))+x2103+((cj6*x2100))+(((-1.0)*x2098*x2099)));
evalcond[2]=((-0.0005)+(((-0.15000018)*r10*x2101))+(((0.15000018)*cj6*x2100))+(((-0.15000018)*sj6*x2099))+(((-1.0)*px*x2096))+(((0.15000018)*x2103))+((py*x2095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2104=(cj0*px);
IkReal x2105=(py*sj0);
IkReal x2106=(r11*sj0*sj6);
IkReal x2107=(cj0*cj6*r00);
IkReal x2108=(cj6*r10*sj0);
IkReal x2109=(cj0*r01*sj6);
if( IKabs(((((-2.78560232882098)*pz))+(((0.350614328438323)*x2106))+(((0.350614328438323)*x2109))+(((-0.350614328438323)*x2108))+(((-0.350614328438323)*x2107))+(((2.33742605134422)*x2104))+(((2.33742605134422)*x2105)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.33742605134422)*pz))+(((-2.78560232882098)*x2104))+(((-2.78560232882098)*x2105))+(((-0.417840850731566)*x2106))+(((-0.417840850731566)*x2109))+(((0.417840850731566)*x2107))+(((0.417840850731566)*x2108)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.78560232882098)*pz))+(((0.350614328438323)*x2106))+(((0.350614328438323)*x2109))+(((-0.350614328438323)*x2108))+(((-0.350614328438323)*x2107))+(((2.33742605134422)*x2104))+(((2.33742605134422)*x2105))))+IKsqr(((((-2.33742605134422)*pz))+(((-2.78560232882098)*x2104))+(((-2.78560232882098)*x2105))+(((-0.417840850731566)*x2106))+(((-0.417840850731566)*x2109))+(((0.417840850731566)*x2107))+(((0.417840850731566)*x2108))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.78560232882098)*pz))+(((0.350614328438323)*x2106))+(((0.350614328438323)*x2109))+(((-0.350614328438323)*x2108))+(((-0.350614328438323)*x2107))+(((2.33742605134422)*x2104))+(((2.33742605134422)*x2105))), ((((-2.33742605134422)*pz))+(((-2.78560232882098)*x2104))+(((-2.78560232882098)*x2105))+(((-0.417840850731566)*x2106))+(((-0.417840850731566)*x2109))+(((0.417840850731566)*x2107))+(((0.417840850731566)*x2108))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[3];
IkReal x2110=IKsin(j1);
IkReal x2111=IKcos(j1);
IkReal x2112=(cj0*r01);
IkReal x2113=((0.335)*cj6);
IkReal x2114=((0.15000018)*sj0);
IkReal x2115=(cj0*r00);
IkReal x2116=((0.335)*sj6);
IkReal x2117=((((0.17676784)*x2111))+(((0.21066117)*x2110))+(((1.0)*pz)));
evalcond[0]=(((r11*sj0*x2113))+(((-1.0)*x2117))+((r10*sj0*x2116))+((x2115*x2116))+((x2112*x2113)));
evalcond[1]=((((-1.0)*r11*sj6*x2114))+((cj6*r10*x2114))+(((0.17676784)*x2110))+(((0.15000018)*cj6*x2115))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px))+(((-0.15000018)*sj6*x2112))+(((-0.21066117)*x2111)));
evalcond[2]=((-1.0)*x2117);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2118=cj1*cj1;
IkReal x2119=((2.98507462686567)*pz);
IkReal x2120=(cj1*sj1);
if( IKabs(((((-0.628839313432836)*x2120))+(((-1.0)*cj1*x2119))+(((-0.527665194029851)*x2118)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.628839313432836)+((sj1*x2119))+(((0.527665194029851)*x2120))+(((-0.628839313432836)*x2118)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.628839313432836)*x2120))+(((-1.0)*cj1*x2119))+(((-0.527665194029851)*x2118))))+IKsqr(((0.628839313432836)+((sj1*x2119))+(((0.527665194029851)*x2120))+(((-0.628839313432836)*x2118))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.628839313432836)*x2120))+(((-1.0)*cj1*x2119))+(((-0.527665194029851)*x2118))), ((0.628839313432836)+((sj1*x2119))+(((0.527665194029851)*x2120))+(((-0.628839313432836)*x2118))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x2121=IKsin(j2);
IkReal x2122=IKcos(j2);
IkReal x2123=(cj0*cj6);
IkReal x2124=(cj6*sj0);
IkReal x2125=(cj0*sj6);
IkReal x2126=((1.0)*sj0);
IkReal x2127=(cj1*x2121);
IkReal x2128=((1.0)*x2122);
IkReal x2129=(sj1*x2121);
IkReal x2130=(sj1*x2122);
evalcond[0]=(x2127+(((-1.0)*sj1*x2128)));
evalcond[1]=((((-1.0)*cj1*x2128))+(((-1.0)*x2129)));
evalcond[2]=((((-0.21066117)*sj1))+(((-0.335)*x2127))+(((0.335)*x2130))+(((-1.0)*pz))+(((-0.17676784)*cj1)));
evalcond[3]=(x2130+(((-1.0)*x2127))+(((-1.0)*r10*sj6*x2126))+(((-1.0)*r11*x2124))+(((-1.0)*r00*x2125))+(((-1.0)*r01*x2123)));
evalcond[4]=((((-0.21066117)*cj1))+(((0.17676784)*sj1))+(((0.335)*cj1*x2122))+(((0.15000018)*r10*x2124))+(((-1.0)*py*x2126))+(((-0.15000018)*r11*sj0*sj6))+(((-1.0)*cj0*px))+(((0.15000018)*r00*x2123))+(((-0.15000018)*r01*x2125))+(((0.335)*x2129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j4, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j5), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x2131=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2131);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2131);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4=3.14159265358979;
sj4=0;
cj4=-1.0;
j5=0;
sj5=0;
cj5=1.0;
IkReal x2132=(rxp1_2*sj6);
IkReal x2133=(cj6*rxp0_2);
j0eval[0]=(x2133+(((-1.0)*x2132)));
j0eval[1]=IKsign(((((-2000.0)*x2132))+(((2000.0)*x2133))));
j0eval[2]=((sj6*sj6)+(cj6*cj6));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x2134=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2134);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2134);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4=3.14159265358979;
sj4=0;
cj4=-1.0;
j5=0;
sj5=0;
cj5=1.0;
IkReal x2135=(cj6*rxp1_2);
IkReal x2136=(rxp0_2*sj6);
j0eval[0]=((((-1.0)*r22))+(((1075268.8172043)*x2135))+(((1075268.8172043)*x2136)));
j0eval[1]=IKsign(((((-0.00186)*r22))+(((2000.0)*x2135))+(((2000.0)*x2136))));
j0eval[2]=((sj6*sj6)+(cj6*cj6));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2137=IKPowWithIntegerCheck(IKsign(((((-0.00186)*r22))+(((2000.0)*rxp0_2*sj6))+(((2000.0)*cj6*rxp1_2)))),-1);
if(!x2137.valid){
continue;
}
CheckValue<IkReal> x2138 = IKatan2WithCheck(IkReal((((r10*sj6))+((cj6*r11)))),IkReal((((r00*sj6))+((cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2138.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2137.value)))+(x2138.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x2139=IKcos(j0);
IkReal x2140=IKsin(j0);
IkReal x2141=(cj6*r10);
IkReal x2142=(r11*sj6);
IkReal x2143=((9.3e-7)*x2139);
IkReal x2144=(r00*x2140);
IkReal x2145=((1.0)*cj6*x2140);
IkReal x2146=(r01*sj6*x2140);
evalcond[0]=((((-1.0)*r01*x2145))+((cj6*r11*x2139))+((r10*sj6*x2139))+(((-1.0)*sj6*x2144)));
evalcond[1]=(x2146+(((-1.0)*cj6*x2144))+(((-1.0)*x2139*x2142))+((x2139*x2141)));
evalcond[2]=((-0.0005)+(((-1.0)*px*x2140))+(((-1.0)*x2142*x2143))+((py*x2139))+((x2141*x2143))+(((9.3e-7)*x2146))+(((-9.3e-7)*cj6*x2144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2147=((2.17380622775013e-6)*sj0);
IkReal x2148=(cj6*r10);
IkReal x2149=(r11*sj6);
IkReal x2150=(cj0*px);
IkReal x2151=((2.59061016580351e-6)*sj0);
IkReal x2152=(py*sj0);
IkReal x2153=(cj0*cj6*r00);
IkReal x2154=(cj0*r01*sj6);
if( IKabs(((((-2.17380622775013e-6)*x2154))+(((-2.78560232882098)*pz))+(((2.33742605134422)*x2150))+(((2.33742605134422)*x2152))+(((2.17380622775013e-6)*x2153))+(((-1.0)*x2147*x2149))+((x2147*x2148)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2149*x2151))+(((-1.0)*x2148*x2151))+(((2.59061016580351e-6)*x2154))+(((-2.78560232882098)*x2150))+(((-2.78560232882098)*x2152))+(((-2.33742605134422)*pz))+(((-2.59061016580351e-6)*x2153)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.17380622775013e-6)*x2154))+(((-2.78560232882098)*pz))+(((2.33742605134422)*x2150))+(((2.33742605134422)*x2152))+(((2.17380622775013e-6)*x2153))+(((-1.0)*x2147*x2149))+((x2147*x2148))))+IKsqr((((x2149*x2151))+(((-1.0)*x2148*x2151))+(((2.59061016580351e-6)*x2154))+(((-2.78560232882098)*x2150))+(((-2.78560232882098)*x2152))+(((-2.33742605134422)*pz))+(((-2.59061016580351e-6)*x2153))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.17380622775013e-6)*x2154))+(((-2.78560232882098)*pz))+(((2.33742605134422)*x2150))+(((2.33742605134422)*x2152))+(((2.17380622775013e-6)*x2153))+(((-1.0)*x2147*x2149))+((x2147*x2148))), (((x2149*x2151))+(((-1.0)*x2148*x2151))+(((2.59061016580351e-6)*x2154))+(((-2.78560232882098)*x2150))+(((-2.78560232882098)*x2152))+(((-2.33742605134422)*pz))+(((-2.59061016580351e-6)*x2153))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[3];
IkReal x2155=IKsin(j1);
IkReal x2156=IKcos(j1);
IkReal x2157=(cj0*r01);
IkReal x2158=((9.3e-7)*sj6);
IkReal x2159=((0.335)*cj6);
IkReal x2160=(r10*sj0);
IkReal x2161=((9.3e-7)*cj6);
IkReal x2162=(r11*sj0);
IkReal x2163=((0.335)*sj6);
IkReal x2164=(cj0*r00);
IkReal x2165=((((0.21066117)*x2155))+(((0.17676784)*x2156))+(((1.0)*pz)));
evalcond[0]=((((-1.0)*x2165))+((x2160*x2163))+((x2157*x2159))+((x2163*x2164))+((x2159*x2162)));
evalcond[1]=((((-1.0)*x2160*x2161))+(((-1.0)*x2161*x2164))+(((0.17676784)*x2155))+(((-1.0)*py*sj0))+(((-0.21066117)*x2156))+((x2158*x2162))+((x2157*x2158))+(((-1.0)*cj0*px)));
evalcond[2]=((-1.0)*x2165);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2166=cj1*cj1;
IkReal x2167=((2.98507462686567)*pz);
IkReal x2168=(cj1*sj1);
if( IKabs(((((-0.628839313432836)*x2168))+(((-1.0)*cj1*x2167))+(((-0.527665194029851)*x2166)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.628839313432836)+((sj1*x2167))+(((-0.628839313432836)*x2166))+(((0.527665194029851)*x2168)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.628839313432836)*x2168))+(((-1.0)*cj1*x2167))+(((-0.527665194029851)*x2166))))+IKsqr(((0.628839313432836)+((sj1*x2167))+(((-0.628839313432836)*x2166))+(((0.527665194029851)*x2168))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.628839313432836)*x2168))+(((-1.0)*cj1*x2167))+(((-0.527665194029851)*x2166))), ((0.628839313432836)+((sj1*x2167))+(((-0.628839313432836)*x2166))+(((0.527665194029851)*x2168))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x2169=IKsin(j2);
IkReal x2170=IKcos(j2);
IkReal x2171=((1.0)*cj6);
IkReal x2172=(cj0*r01);
IkReal x2173=(r11*sj0);
IkReal x2174=((9.3e-7)*sj6);
IkReal x2175=((9.3e-7)*cj6);
IkReal x2176=(r10*sj0);
IkReal x2177=(cj0*r00);
IkReal x2178=((1.0)*sj6);
IkReal x2179=(cj1*x2169);
IkReal x2180=((1.0)*x2170);
IkReal x2181=(sj1*x2169);
IkReal x2182=(sj1*x2170);
evalcond[0]=(x2179+(((-1.0)*sj1*x2180)));
evalcond[1]=((((-1.0)*x2181))+(((-1.0)*cj1*x2180)));
evalcond[2]=((((-0.21066117)*sj1))+(((-0.335)*x2179))+(((-1.0)*pz))+(((-0.17676784)*cj1))+(((0.335)*x2182)));
evalcond[3]=((((-1.0)*x2176*x2178))+(((-1.0)*x2171*x2173))+(((-1.0)*x2171*x2172))+x2182+(((-1.0)*x2179))+(((-1.0)*x2177*x2178)));
evalcond[4]=(((x2172*x2174))+(((-0.21066117)*cj1))+((x2173*x2174))+(((0.17676784)*sj1))+(((0.335)*cj1*x2170))+(((-1.0)*py*sj0))+(((0.335)*x2181))+(((-1.0)*x2175*x2177))+(((-1.0)*x2175*x2176))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2183=((1.0)*sj6);
CheckValue<IkReal> x2184 = IKatan2WithCheck(IkReal((((cj6*r10))+(((-1.0)*r11*x2183)))),IkReal((((cj6*r00))+(((-1.0)*r01*x2183)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2184.valid){
continue;
}
CheckValue<IkReal> x2185=IKPowWithIntegerCheck(IKsign(((((-2000.0)*rxp1_2*sj6))+(((2000.0)*cj6*rxp0_2)))),-1);
if(!x2185.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2184.value)+(((1.5707963267949)*(x2185.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x2186=IKcos(j0);
IkReal x2187=IKsin(j0);
IkReal x2188=(cj6*r10);
IkReal x2189=(r11*sj6);
IkReal x2190=((9.3e-7)*x2186);
IkReal x2191=(r00*x2187);
IkReal x2192=((1.0)*cj6*x2187);
IkReal x2193=(r01*sj6*x2187);
evalcond[0]=((((-1.0)*r01*x2192))+((cj6*r11*x2186))+((r10*sj6*x2186))+(((-1.0)*sj6*x2191)));
evalcond[1]=(((x2186*x2188))+x2193+(((-1.0)*cj6*x2191))+(((-1.0)*x2186*x2189)));
evalcond[2]=((-0.0005)+(((-9.3e-7)*cj6*x2191))+(((-1.0)*x2189*x2190))+((x2188*x2190))+(((-1.0)*px*x2187))+(((9.3e-7)*x2193))+((py*x2186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2194=((2.17380622775013e-6)*sj0);
IkReal x2195=(cj6*r10);
IkReal x2196=(r11*sj6);
IkReal x2197=(cj0*px);
IkReal x2198=((2.59061016580351e-6)*sj0);
IkReal x2199=(py*sj0);
IkReal x2200=(cj0*cj6*r00);
IkReal x2201=(cj0*r01*sj6);
if( IKabs(((((2.17380622775013e-6)*x2200))+(((-2.78560232882098)*pz))+(((-2.17380622775013e-6)*x2201))+((x2194*x2195))+(((2.33742605134422)*x2199))+(((2.33742605134422)*x2197))+(((-1.0)*x2194*x2196)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2196*x2198))+(((-2.78560232882098)*x2199))+(((-2.78560232882098)*x2197))+(((-2.59061016580351e-6)*x2200))+(((-1.0)*x2195*x2198))+(((-2.33742605134422)*pz))+(((2.59061016580351e-6)*x2201)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.17380622775013e-6)*x2200))+(((-2.78560232882098)*pz))+(((-2.17380622775013e-6)*x2201))+((x2194*x2195))+(((2.33742605134422)*x2199))+(((2.33742605134422)*x2197))+(((-1.0)*x2194*x2196))))+IKsqr((((x2196*x2198))+(((-2.78560232882098)*x2199))+(((-2.78560232882098)*x2197))+(((-2.59061016580351e-6)*x2200))+(((-1.0)*x2195*x2198))+(((-2.33742605134422)*pz))+(((2.59061016580351e-6)*x2201))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.17380622775013e-6)*x2200))+(((-2.78560232882098)*pz))+(((-2.17380622775013e-6)*x2201))+((x2194*x2195))+(((2.33742605134422)*x2199))+(((2.33742605134422)*x2197))+(((-1.0)*x2194*x2196))), (((x2196*x2198))+(((-2.78560232882098)*x2199))+(((-2.78560232882098)*x2197))+(((-2.59061016580351e-6)*x2200))+(((-1.0)*x2195*x2198))+(((-2.33742605134422)*pz))+(((2.59061016580351e-6)*x2201))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[3];
IkReal x2202=IKsin(j1);
IkReal x2203=IKcos(j1);
IkReal x2204=(cj0*r01);
IkReal x2205=((9.3e-7)*sj6);
IkReal x2206=((0.335)*cj6);
IkReal x2207=(r10*sj0);
IkReal x2208=((9.3e-7)*cj6);
IkReal x2209=(r11*sj0);
IkReal x2210=((0.335)*sj6);
IkReal x2211=(cj0*r00);
IkReal x2212=((((0.21066117)*x2202))+(((0.17676784)*x2203))+(((1.0)*pz)));
evalcond[0]=(((x2210*x2211))+(((-1.0)*x2212))+((x2206*x2209))+((x2204*x2206))+((x2207*x2210)));
evalcond[1]=((((-0.21066117)*x2203))+(((-1.0)*x2207*x2208))+(((-1.0)*x2208*x2211))+((x2204*x2205))+((x2205*x2209))+(((0.17676784)*x2202))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
evalcond[2]=((-1.0)*x2212);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2213=cj1*cj1;
IkReal x2214=((2.98507462686567)*pz);
IkReal x2215=(cj1*sj1);
if( IKabs(((((-0.628839313432836)*x2215))+(((-0.527665194029851)*x2213))+(((-1.0)*cj1*x2214)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.628839313432836)+(((-0.628839313432836)*x2213))+(((0.527665194029851)*x2215))+((sj1*x2214)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.628839313432836)*x2215))+(((-0.527665194029851)*x2213))+(((-1.0)*cj1*x2214))))+IKsqr(((0.628839313432836)+(((-0.628839313432836)*x2213))+(((0.527665194029851)*x2215))+((sj1*x2214))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.628839313432836)*x2215))+(((-0.527665194029851)*x2213))+(((-1.0)*cj1*x2214))), ((0.628839313432836)+(((-0.628839313432836)*x2213))+(((0.527665194029851)*x2215))+((sj1*x2214))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x2216=IKsin(j2);
IkReal x2217=IKcos(j2);
IkReal x2218=((1.0)*cj6);
IkReal x2219=(cj0*r01);
IkReal x2220=(r11*sj0);
IkReal x2221=((9.3e-7)*sj6);
IkReal x2222=((9.3e-7)*cj6);
IkReal x2223=(r10*sj0);
IkReal x2224=(cj0*r00);
IkReal x2225=((1.0)*sj6);
IkReal x2226=(cj1*x2216);
IkReal x2227=((1.0)*x2217);
IkReal x2228=(sj1*x2216);
IkReal x2229=(sj1*x2217);
evalcond[0]=(x2226+(((-1.0)*sj1*x2227)));
evalcond[1]=((((-1.0)*x2228))+(((-1.0)*cj1*x2227)));
evalcond[2]=((((0.335)*x2229))+(((-0.21066117)*sj1))+(((-0.335)*x2226))+(((-1.0)*pz))+(((-0.17676784)*cj1)));
evalcond[3]=(x2229+(((-1.0)*x2224*x2225))+(((-1.0)*x2218*x2219))+(((-1.0)*x2223*x2225))+(((-1.0)*x2226))+(((-1.0)*x2218*x2220)));
evalcond[4]=((((-1.0)*x2222*x2223))+(((-1.0)*x2222*x2224))+(((-0.21066117)*cj1))+(((0.335)*x2228))+(((0.17676784)*sj1))+(((0.335)*cj1*x2217))+((x2219*x2221))+(((-1.0)*py*sj0))+((x2220*x2221))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j4, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j5, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x2230=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2230);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2230);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4=3.14159265358979;
sj4=0;
cj4=-1.0;
j5=3.14159265358979;
sj5=0;
cj5=-1.0;
IkReal x2231=(cj6*rxp0_2);
IkReal x2232=(rxp1_2*sj6);
j0eval[0]=(x2232+(((-1.0)*x2231)));
j0eval[1]=((sj6*sj6)+(cj6*cj6));
j0eval[2]=IKsign(((((2000.0)*x2232))+(((-2000.0)*x2231))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x2233=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2233);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2233);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4=3.14159265358979;
sj4=0;
cj4=-1.0;
j5=3.14159265358979;
sj5=0;
cj5=-1.0;
IkReal x2234=(cj6*rxp1_2);
IkReal x2235=(rxp0_2*sj6);
j0eval[0]=((((775193.798449612)*x2234))+(((775193.798449612)*x2235))+r22);
j0eval[1]=IKsign(((((2000.0)*x2234))+(((2000.0)*x2235))+(((0.00258)*r22))));
j0eval[2]=((sj6*sj6)+(cj6*cj6));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2236=IKPowWithIntegerCheck(IKsign(((((2000.0)*rxp0_2*sj6))+(((0.00258)*r22))+(((2000.0)*cj6*rxp1_2)))),-1);
if(!x2236.valid){
continue;
}
CheckValue<IkReal> x2237 = IKatan2WithCheck(IkReal((((r10*sj6))+((cj6*r11)))),IkReal((((r00*sj6))+((cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2237.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2236.value)))+(x2237.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x2238=IKcos(j0);
IkReal x2239=IKsin(j0);
IkReal x2240=((1.0)*r01);
IkReal x2241=(cj6*x2239);
IkReal x2242=(cj6*x2238);
IkReal x2243=(sj6*x2239);
IkReal x2244=(r11*sj6*x2238);
evalcond[0]=(((r11*x2242))+((r10*sj6*x2238))+(((-1.0)*x2240*x2241))+(((-1.0)*r00*x2243)));
evalcond[1]=(x2244+(((-1.0)*r10*x2242))+(((-1.0)*x2240*x2243))+((r00*x2241)));
evalcond[2]=((-0.0005)+((py*x2238))+(((-1.29e-6)*r10*x2242))+(((-1.29e-6)*r01*x2243))+(((1.29e-6)*x2244))+(((-1.0)*px*x2239))+(((1.29e-6)*r00*x2241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2245=((3.59342700417906e-6)*sj0);
IkReal x2246=(cj6*r10);
IkReal x2247=(r11*sj6);
IkReal x2248=(cj0*px);
IkReal x2249=((3.01527960623405e-6)*sj0);
IkReal x2250=(py*sj0);
IkReal x2251=(cj0*cj6*r00);
IkReal x2252=(cj0*r01*sj6);
if( IKabs(((((-2.78560232882098)*pz))+(((-3.01527960623405e-6)*x2251))+((x2247*x2249))+(((3.01527960623405e-6)*x2252))+(((2.33742605134422)*x2248))+(((2.33742605134422)*x2250))+(((-1.0)*x2246*x2249)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.78560232882098)*x2248))+(((-2.78560232882098)*x2250))+(((-2.33742605134422)*pz))+(((3.59342700417906e-6)*x2251))+(((-3.59342700417906e-6)*x2252))+(((-1.0)*x2245*x2247))+((x2245*x2246)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.78560232882098)*pz))+(((-3.01527960623405e-6)*x2251))+((x2247*x2249))+(((3.01527960623405e-6)*x2252))+(((2.33742605134422)*x2248))+(((2.33742605134422)*x2250))+(((-1.0)*x2246*x2249))))+IKsqr(((((-2.78560232882098)*x2248))+(((-2.78560232882098)*x2250))+(((-2.33742605134422)*pz))+(((3.59342700417906e-6)*x2251))+(((-3.59342700417906e-6)*x2252))+(((-1.0)*x2245*x2247))+((x2245*x2246))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.78560232882098)*pz))+(((-3.01527960623405e-6)*x2251))+((x2247*x2249))+(((3.01527960623405e-6)*x2252))+(((2.33742605134422)*x2248))+(((2.33742605134422)*x2250))+(((-1.0)*x2246*x2249))), ((((-2.78560232882098)*x2248))+(((-2.78560232882098)*x2250))+(((-2.33742605134422)*pz))+(((3.59342700417906e-6)*x2251))+(((-3.59342700417906e-6)*x2252))+(((-1.0)*x2245*x2247))+((x2245*x2246))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[3];
IkReal x2253=IKsin(j1);
IkReal x2254=IKcos(j1);
IkReal x2255=(cj0*cj6);
IkReal x2256=((1.29e-6)*sj0);
IkReal x2257=((0.335)*sj0);
IkReal x2258=(cj0*sj6);
IkReal x2259=((((0.21066117)*x2253))+(((0.17676784)*x2254))+(((1.0)*pz)));
evalcond[0]=(((cj6*r11*x2257))+(((-1.0)*x2259))+(((0.335)*r01*x2255))+((r10*sj6*x2257))+(((0.335)*r00*x2258)));
evalcond[1]=((((-1.29e-6)*r01*x2258))+(((-0.21066117)*x2254))+((cj6*r10*x2256))+(((1.29e-6)*r00*x2255))+(((-1.0)*r11*sj6*x2256))+(((0.17676784)*x2253))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
evalcond[2]=((-1.0)*x2259);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2260=cj1*cj1;
IkReal x2261=((2.98507462686567)*pz);
IkReal x2262=(cj1*sj1);
if( IKabs(((((-1.0)*cj1*x2261))+(((-0.527665194029851)*x2260))+(((-0.628839313432836)*x2262)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.628839313432836)+((sj1*x2261))+(((0.527665194029851)*x2262))+(((-0.628839313432836)*x2260)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x2261))+(((-0.527665194029851)*x2260))+(((-0.628839313432836)*x2262))))+IKsqr(((0.628839313432836)+((sj1*x2261))+(((0.527665194029851)*x2262))+(((-0.628839313432836)*x2260))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x2261))+(((-0.527665194029851)*x2260))+(((-0.628839313432836)*x2262))), ((0.628839313432836)+((sj1*x2261))+(((0.527665194029851)*x2262))+(((-0.628839313432836)*x2260))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x2263=IKsin(j2);
IkReal x2264=IKcos(j2);
IkReal x2265=(cj0*cj6);
IkReal x2266=((1.29e-6)*sj6);
IkReal x2267=(r11*sj0);
IkReal x2268=(r10*sj0);
IkReal x2269=((1.0)*cj0);
IkReal x2270=(cj1*x2263);
IkReal x2271=((1.0)*x2264);
IkReal x2272=(sj1*x2263);
IkReal x2273=(sj1*x2264);
evalcond[0]=(x2270+(((-1.0)*sj1*x2271)));
evalcond[1]=((((-1.0)*cj1*x2271))+(((-1.0)*x2272)));
evalcond[2]=((((-0.21066117)*sj1))+(((-0.335)*x2270))+(((0.335)*x2273))+(((-1.0)*pz))+(((-0.17676784)*cj1)));
evalcond[3]=(x2273+(((-1.0)*r00*sj6*x2269))+(((-1.0)*sj6*x2268))+(((-1.0)*cj6*x2267))+(((-1.0)*x2270))+(((-1.0)*r01*x2265)));
evalcond[4]=((((-0.21066117)*cj1))+(((1.29e-6)*cj6*x2268))+(((0.17676784)*sj1))+(((-1.0)*cj0*r01*x2266))+(((0.335)*x2272))+(((-1.0)*px*x2269))+(((0.335)*cj1*x2264))+(((-1.0)*py*sj0))+(((1.29e-6)*r00*x2265))+(((-1.0)*x2266*x2267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2274=((1.0)*cj6);
CheckValue<IkReal> x2275 = IKatan2WithCheck(IkReal((((r11*sj6))+(((-1.0)*r10*x2274)))),IkReal((((r01*sj6))+(((-1.0)*r00*x2274)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2275.valid){
continue;
}
CheckValue<IkReal> x2276=IKPowWithIntegerCheck(IKsign(((((-2000.0)*cj6*rxp0_2))+(((2000.0)*rxp1_2*sj6)))),-1);
if(!x2276.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2275.value)+(((1.5707963267949)*(x2276.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x2277=IKcos(j0);
IkReal x2278=IKsin(j0);
IkReal x2279=((1.0)*r01);
IkReal x2280=(cj6*x2278);
IkReal x2281=(cj6*x2277);
IkReal x2282=(sj6*x2278);
IkReal x2283=(r11*sj6*x2277);
evalcond[0]=(((r11*x2281))+((r10*sj6*x2277))+(((-1.0)*x2279*x2280))+(((-1.0)*r00*x2282)));
evalcond[1]=(x2283+(((-1.0)*r10*x2281))+(((-1.0)*x2279*x2282))+((r00*x2280)));
evalcond[2]=((-0.0005)+((py*x2277))+(((-1.0)*px*x2278))+(((1.29e-6)*x2283))+(((1.29e-6)*r00*x2280))+(((-1.29e-6)*r01*x2282))+(((-1.29e-6)*r10*x2281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2284=((3.59342700417906e-6)*sj0);
IkReal x2285=(cj6*r10);
IkReal x2286=(r11*sj6);
IkReal x2287=(cj0*px);
IkReal x2288=((3.01527960623405e-6)*sj0);
IkReal x2289=(py*sj0);
IkReal x2290=(cj0*cj6*r00);
IkReal x2291=(cj0*r01*sj6);
if( IKabs(((((-2.78560232882098)*pz))+(((-3.01527960623405e-6)*x2290))+(((2.33742605134422)*x2289))+(((2.33742605134422)*x2287))+(((-1.0)*x2285*x2288))+(((3.01527960623405e-6)*x2291))+((x2286*x2288)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.78560232882098)*x2289))+(((-2.78560232882098)*x2287))+(((3.59342700417906e-6)*x2290))+(((-1.0)*x2284*x2286))+(((-2.33742605134422)*pz))+(((-3.59342700417906e-6)*x2291))+((x2284*x2285)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.78560232882098)*pz))+(((-3.01527960623405e-6)*x2290))+(((2.33742605134422)*x2289))+(((2.33742605134422)*x2287))+(((-1.0)*x2285*x2288))+(((3.01527960623405e-6)*x2291))+((x2286*x2288))))+IKsqr(((((-2.78560232882098)*x2289))+(((-2.78560232882098)*x2287))+(((3.59342700417906e-6)*x2290))+(((-1.0)*x2284*x2286))+(((-2.33742605134422)*pz))+(((-3.59342700417906e-6)*x2291))+((x2284*x2285))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.78560232882098)*pz))+(((-3.01527960623405e-6)*x2290))+(((2.33742605134422)*x2289))+(((2.33742605134422)*x2287))+(((-1.0)*x2285*x2288))+(((3.01527960623405e-6)*x2291))+((x2286*x2288))), ((((-2.78560232882098)*x2289))+(((-2.78560232882098)*x2287))+(((3.59342700417906e-6)*x2290))+(((-1.0)*x2284*x2286))+(((-2.33742605134422)*pz))+(((-3.59342700417906e-6)*x2291))+((x2284*x2285))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[3];
IkReal x2292=IKsin(j1);
IkReal x2293=IKcos(j1);
IkReal x2294=(cj0*cj6);
IkReal x2295=((1.29e-6)*sj0);
IkReal x2296=((0.335)*sj0);
IkReal x2297=(cj0*sj6);
IkReal x2298=((((1.0)*pz))+(((0.21066117)*x2292))+(((0.17676784)*x2293)));
evalcond[0]=(((cj6*r11*x2296))+((r10*sj6*x2296))+(((0.335)*r01*x2294))+(((-1.0)*x2298))+(((0.335)*r00*x2297)));
evalcond[1]=((((-1.0)*r11*sj6*x2295))+(((1.29e-6)*r00*x2294))+(((-0.21066117)*x2293))+(((-1.0)*py*sj0))+(((-1.29e-6)*r01*x2297))+(((-1.0)*cj0*px))+(((0.17676784)*x2292))+((cj6*r10*x2295)));
evalcond[2]=((-1.0)*x2298);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2299=cj1*cj1;
IkReal x2300=((2.98507462686567)*pz);
IkReal x2301=(cj1*sj1);
if( IKabs(((((-0.527665194029851)*x2299))+(((-1.0)*cj1*x2300))+(((-0.628839313432836)*x2301)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.628839313432836)+((sj1*x2300))+(((0.527665194029851)*x2301))+(((-0.628839313432836)*x2299)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.527665194029851)*x2299))+(((-1.0)*cj1*x2300))+(((-0.628839313432836)*x2301))))+IKsqr(((0.628839313432836)+((sj1*x2300))+(((0.527665194029851)*x2301))+(((-0.628839313432836)*x2299))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.527665194029851)*x2299))+(((-1.0)*cj1*x2300))+(((-0.628839313432836)*x2301))), ((0.628839313432836)+((sj1*x2300))+(((0.527665194029851)*x2301))+(((-0.628839313432836)*x2299))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x2302=IKsin(j2);
IkReal x2303=IKcos(j2);
IkReal x2304=(cj0*cj6);
IkReal x2305=((1.29e-6)*sj6);
IkReal x2306=(r11*sj0);
IkReal x2307=(r10*sj0);
IkReal x2308=((1.0)*cj0);
IkReal x2309=(cj1*x2302);
IkReal x2310=((1.0)*x2303);
IkReal x2311=(sj1*x2302);
IkReal x2312=(sj1*x2303);
evalcond[0]=(x2309+(((-1.0)*sj1*x2310)));
evalcond[1]=((((-1.0)*x2311))+(((-1.0)*cj1*x2310)));
evalcond[2]=((((0.335)*x2312))+(((-0.21066117)*sj1))+(((-1.0)*pz))+(((-0.17676784)*cj1))+(((-0.335)*x2309)));
evalcond[3]=((((-1.0)*x2309))+x2312+(((-1.0)*cj6*x2306))+(((-1.0)*sj6*x2307))+(((-1.0)*r00*sj6*x2308))+(((-1.0)*r01*x2304)));
evalcond[4]=((((1.29e-6)*cj6*x2307))+(((0.335)*x2311))+(((-0.21066117)*cj1))+(((0.17676784)*sj1))+(((1.29e-6)*r00*x2304))+(((-1.0)*px*x2308))+(((-1.0)*py*sj0))+(((-1.0)*cj0*r01*x2305))+(((0.335)*cj1*x2303))+(((-1.0)*x2305*x2306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x2313=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2313);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2313);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4=-1.5707963267949;
sj4=-1.0;
cj4=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
IkReal x2314=(cj6*rxp0_2);
IkReal x2315=(rxp1_2*sj6);
j0eval[0]=((((-1.0)*x2314))+x2315);
j0eval[1]=((sj6*sj6)+(cj6*cj6));
j0eval[2]=IKsign(((((-2000.0)*x2314))+(((2000.0)*x2315))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x2316=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2316);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2316);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4=-1.5707963267949;
sj4=-1.0;
cj4=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
IkReal x2317=(rxp0_2*sj6);
IkReal x2318=(cj6*rxp1_2);
j0eval[0]=((((6.66667466667627)*x2317))+(((6.66667466667627)*x2318))+(((-1.0)*r22)));
j0eval[1]=IKsign(((((2000.0)*x2317))+(((2000.0)*x2318))+(((-299.99964)*r22))));
j0eval[2]=((sj6*sj6)+(cj6*cj6));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2319=IKPowWithIntegerCheck(IKsign(((((2000.0)*rxp0_2*sj6))+(((-299.99964)*r22))+(((2000.0)*cj6*rxp1_2)))),-1);
if(!x2319.valid){
continue;
}
CheckValue<IkReal> x2320 = IKatan2WithCheck(IkReal((((r10*sj6))+((cj6*r11)))),IkReal((((r00*sj6))+((cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2320.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2319.value)))+(x2320.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x2321=IKcos(j0);
IkReal x2322=IKsin(j0);
IkReal x2323=(cj6*r00);
IkReal x2324=(r01*sj6);
IkReal x2325=((1.0)*x2322);
IkReal x2326=((0.14999982)*x2322);
IkReal x2327=(cj6*x2321);
IkReal x2328=(r11*sj6*x2321);
evalcond[0]=((((-1.0)*cj6*r01*x2325))+(((-1.0)*r00*sj6*x2325))+((r11*x2327))+((r10*sj6*x2321)));
evalcond[1]=((((-1.0)*x2324*x2325))+x2328+((x2322*x2323))+(((-1.0)*r10*x2327)));
evalcond[2]=((-0.0005)+(((0.14999982)*r10*x2327))+(((-0.14999982)*x2328))+(((-1.0)*x2323*x2326))+(((-1.0)*px*x2325))+((x2324*x2326))+((py*x2321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2329=((0.350613486964944)*cj6);
IkReal x2330=(r10*sj0);
IkReal x2331=((0.417839847914728)*cj0);
IkReal x2332=(r01*sj6);
IkReal x2333=(cj0*px);
IkReal x2334=(py*sj0);
IkReal x2335=(r11*sj0*sj6);
if( IKabs(((((-2.78560232882098)*pz))+((x2329*x2330))+(((2.33742605134422)*x2333))+(((2.33742605134422)*x2334))+((cj0*r00*x2329))+(((-0.350613486964944)*x2335))+(((-0.350613486964944)*cj0*x2332)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2331*x2332))+(((-1.0)*cj6*r00*x2331))+(((-2.33742605134422)*pz))+(((-0.417839847914728)*cj6*x2330))+(((-2.78560232882098)*x2333))+(((-2.78560232882098)*x2334))+(((0.417839847914728)*x2335)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.78560232882098)*pz))+((x2329*x2330))+(((2.33742605134422)*x2333))+(((2.33742605134422)*x2334))+((cj0*r00*x2329))+(((-0.350613486964944)*x2335))+(((-0.350613486964944)*cj0*x2332))))+IKsqr((((x2331*x2332))+(((-1.0)*cj6*r00*x2331))+(((-2.33742605134422)*pz))+(((-0.417839847914728)*cj6*x2330))+(((-2.78560232882098)*x2333))+(((-2.78560232882098)*x2334))+(((0.417839847914728)*x2335))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.78560232882098)*pz))+((x2329*x2330))+(((2.33742605134422)*x2333))+(((2.33742605134422)*x2334))+((cj0*r00*x2329))+(((-0.350613486964944)*x2335))+(((-0.350613486964944)*cj0*x2332))), (((x2331*x2332))+(((-1.0)*cj6*r00*x2331))+(((-2.33742605134422)*pz))+(((-0.417839847914728)*cj6*x2330))+(((-2.78560232882098)*x2333))+(((-2.78560232882098)*x2334))+(((0.417839847914728)*x2335))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[3];
IkReal x2336=IKsin(j1);
IkReal x2337=IKcos(j1);
IkReal x2338=(cj0*cj6);
IkReal x2339=((0.14999982)*sj0);
IkReal x2340=(cj0*sj6);
IkReal x2341=((0.335)*sj0);
IkReal x2342=((((0.17676784)*x2337))+(((0.21066117)*x2336))+(((1.0)*pz)));
evalcond[0]=(((cj6*r11*x2341))+(((0.335)*r00*x2340))+(((0.335)*r01*x2338))+((r10*sj6*x2341))+(((-1.0)*x2342)));
evalcond[1]=((((0.17676784)*x2336))+(((-0.21066117)*x2337))+((r11*sj6*x2339))+(((-1.0)*py*sj0))+(((-0.14999982)*r00*x2338))+(((-1.0)*cj0*px))+(((0.14999982)*r01*x2340))+(((-1.0)*cj6*r10*x2339)));
evalcond[2]=((-1.0)*x2342);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2343=cj1*cj1;
IkReal x2344=((2.98507462686567)*pz);
IkReal x2345=(cj1*sj1);
if( IKabs(((((-1.0)*cj1*x2344))+(((-0.527665194029851)*x2343))+(((-0.628839313432836)*x2345)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.628839313432836)+((sj1*x2344))+(((0.527665194029851)*x2345))+(((-0.628839313432836)*x2343)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x2344))+(((-0.527665194029851)*x2343))+(((-0.628839313432836)*x2345))))+IKsqr(((0.628839313432836)+((sj1*x2344))+(((0.527665194029851)*x2345))+(((-0.628839313432836)*x2343))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x2344))+(((-0.527665194029851)*x2343))+(((-0.628839313432836)*x2345))), ((0.628839313432836)+((sj1*x2344))+(((0.527665194029851)*x2345))+(((-0.628839313432836)*x2343))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x2346=IKsin(j2);
IkReal x2347=IKcos(j2);
IkReal x2348=((0.14999982)*sj0);
IkReal x2349=((1.0)*cj6);
IkReal x2350=(cj0*r01);
IkReal x2351=((1.0)*sj0);
IkReal x2352=(cj0*r00);
IkReal x2353=(cj1*x2346);
IkReal x2354=((1.0)*x2347);
IkReal x2355=(sj1*x2346);
IkReal x2356=(sj1*x2347);
evalcond[0]=(x2353+(((-1.0)*sj1*x2354)));
evalcond[1]=((((-1.0)*x2355))+(((-1.0)*cj1*x2354)));
evalcond[2]=((((-0.21066117)*sj1))+(((0.335)*x2356))+(((-0.335)*x2353))+(((-1.0)*pz))+(((-0.17676784)*cj1)));
evalcond[3]=((((-1.0)*r10*sj6*x2351))+x2356+(((-1.0)*x2353))+(((-1.0)*r11*sj0*x2349))+(((-1.0)*sj6*x2352))+(((-1.0)*x2349*x2350)));
evalcond[4]=((((0.14999982)*sj6*x2350))+(((-0.21066117)*cj1))+(((0.335)*x2355))+(((-1.0)*py*x2351))+(((0.17676784)*sj1))+(((-0.14999982)*cj6*x2352))+(((0.335)*cj1*x2347))+((r11*sj6*x2348))+(((-1.0)*cj6*r10*x2348))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2357=((1.0)*cj6);
CheckValue<IkReal> x2358 = IKatan2WithCheck(IkReal((((r11*sj6))+(((-1.0)*r10*x2357)))),IkReal((((r01*sj6))+(((-1.0)*r00*x2357)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2358.valid){
continue;
}
CheckValue<IkReal> x2359=IKPowWithIntegerCheck(IKsign(((((-2000.0)*cj6*rxp0_2))+(((2000.0)*rxp1_2*sj6)))),-1);
if(!x2359.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2358.value)+(((1.5707963267949)*(x2359.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x2360=IKcos(j0);
IkReal x2361=IKsin(j0);
IkReal x2362=(cj6*r00);
IkReal x2363=(r01*sj6);
IkReal x2364=((1.0)*x2361);
IkReal x2365=((0.14999982)*x2361);
IkReal x2366=(cj6*x2360);
IkReal x2367=(r11*sj6*x2360);
evalcond[0]=(((r11*x2366))+((r10*sj6*x2360))+(((-1.0)*cj6*r01*x2364))+(((-1.0)*r00*sj6*x2364)));
evalcond[1]=(x2367+(((-1.0)*r10*x2366))+((x2361*x2362))+(((-1.0)*x2363*x2364)));
evalcond[2]=((-0.0005)+(((-0.14999982)*x2367))+((py*x2360))+(((-1.0)*px*x2364))+(((-1.0)*x2362*x2365))+((x2363*x2365))+(((0.14999982)*r10*x2366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2368=((0.350613486964944)*cj6);
IkReal x2369=(r10*sj0);
IkReal x2370=((0.417839847914728)*cj0);
IkReal x2371=(r01*sj6);
IkReal x2372=(cj0*px);
IkReal x2373=(py*sj0);
IkReal x2374=(r11*sj0*sj6);
if( IKabs(((((2.33742605134422)*x2372))+(((2.33742605134422)*x2373))+(((-2.78560232882098)*pz))+(((-0.350613486964944)*x2374))+(((-0.350613486964944)*cj0*x2371))+((cj0*r00*x2368))+((x2368*x2369)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2370*x2371))+(((-2.33742605134422)*pz))+(((0.417839847914728)*x2374))+(((-0.417839847914728)*cj6*x2369))+(((-2.78560232882098)*x2372))+(((-2.78560232882098)*x2373))+(((-1.0)*cj6*r00*x2370)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.33742605134422)*x2372))+(((2.33742605134422)*x2373))+(((-2.78560232882098)*pz))+(((-0.350613486964944)*x2374))+(((-0.350613486964944)*cj0*x2371))+((cj0*r00*x2368))+((x2368*x2369))))+IKsqr((((x2370*x2371))+(((-2.33742605134422)*pz))+(((0.417839847914728)*x2374))+(((-0.417839847914728)*cj6*x2369))+(((-2.78560232882098)*x2372))+(((-2.78560232882098)*x2373))+(((-1.0)*cj6*r00*x2370))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.33742605134422)*x2372))+(((2.33742605134422)*x2373))+(((-2.78560232882098)*pz))+(((-0.350613486964944)*x2374))+(((-0.350613486964944)*cj0*x2371))+((cj0*r00*x2368))+((x2368*x2369))), (((x2370*x2371))+(((-2.33742605134422)*pz))+(((0.417839847914728)*x2374))+(((-0.417839847914728)*cj6*x2369))+(((-2.78560232882098)*x2372))+(((-2.78560232882098)*x2373))+(((-1.0)*cj6*r00*x2370))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[3];
IkReal x2375=IKsin(j1);
IkReal x2376=IKcos(j1);
IkReal x2377=(cj0*cj6);
IkReal x2378=((0.14999982)*sj0);
IkReal x2379=(cj0*sj6);
IkReal x2380=((0.335)*sj0);
IkReal x2381=((((0.21066117)*x2375))+(((0.17676784)*x2376))+(((1.0)*pz)));
evalcond[0]=((((0.335)*r00*x2379))+((cj6*r11*x2380))+((r10*sj6*x2380))+(((-1.0)*x2381))+(((0.335)*r01*x2377)));
evalcond[1]=((((0.14999982)*r01*x2379))+((r11*sj6*x2378))+(((0.17676784)*x2375))+(((-1.0)*cj6*r10*x2378))+(((-0.21066117)*x2376))+(((-1.0)*py*sj0))+(((-0.14999982)*r00*x2377))+(((-1.0)*cj0*px)));
evalcond[2]=((-1.0)*x2381);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2382=cj1*cj1;
IkReal x2383=((2.98507462686567)*pz);
IkReal x2384=(cj1*sj1);
if( IKabs(((((-1.0)*cj1*x2383))+(((-0.527665194029851)*x2382))+(((-0.628839313432836)*x2384)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.628839313432836)+(((-0.628839313432836)*x2382))+(((0.527665194029851)*x2384))+((sj1*x2383)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x2383))+(((-0.527665194029851)*x2382))+(((-0.628839313432836)*x2384))))+IKsqr(((0.628839313432836)+(((-0.628839313432836)*x2382))+(((0.527665194029851)*x2384))+((sj1*x2383))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x2383))+(((-0.527665194029851)*x2382))+(((-0.628839313432836)*x2384))), ((0.628839313432836)+(((-0.628839313432836)*x2382))+(((0.527665194029851)*x2384))+((sj1*x2383))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x2385=IKsin(j2);
IkReal x2386=IKcos(j2);
IkReal x2387=((0.14999982)*sj0);
IkReal x2388=((1.0)*cj6);
IkReal x2389=(cj0*r01);
IkReal x2390=((1.0)*sj0);
IkReal x2391=(cj0*r00);
IkReal x2392=(cj1*x2385);
IkReal x2393=((1.0)*x2386);
IkReal x2394=(sj1*x2385);
IkReal x2395=(sj1*x2386);
evalcond[0]=(x2392+(((-1.0)*sj1*x2393)));
evalcond[1]=((((-1.0)*cj1*x2393))+(((-1.0)*x2394)));
evalcond[2]=((((-0.21066117)*sj1))+(((-0.335)*x2392))+(((-1.0)*pz))+(((0.335)*x2395))+(((-0.17676784)*cj1)));
evalcond[3]=(x2395+(((-1.0)*x2392))+(((-1.0)*x2388*x2389))+(((-1.0)*sj6*x2391))+(((-1.0)*r10*sj6*x2390))+(((-1.0)*r11*sj0*x2388)));
evalcond[4]=((((-0.14999982)*cj6*x2391))+(((-0.21066117)*cj1))+(((0.17676784)*sj1))+(((-1.0)*cj6*r10*x2387))+(((0.14999982)*sj6*x2389))+(((-1.0)*py*x2390))+(((0.335)*x2394))+(((0.335)*cj1*x2386))+(((-1.0)*cj0*px))+((r11*sj6*x2387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j5), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x2396=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2396);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2396);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4=-1.5707963267949;
sj4=-1.0;
cj4=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
IkReal x2397=(rxp1_2*sj6);
IkReal x2398=(cj6*rxp0_2);
j0eval[0]=(x2398+(((-1.0)*x2397)));
j0eval[1]=IKsign(((((2000.0)*x2398))+(((-2000.0)*x2397))));
j0eval[2]=((sj6*sj6)+(cj6*cj6));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x2399=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2399);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2399);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4=-1.5707963267949;
sj4=-1.0;
cj4=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
IkReal x2400=(cj6*rxp1_2);
IkReal x2401=(rxp0_2*sj6);
j0eval[0]=(r22+(((6.66665866667627)*x2400))+(((6.66665866667627)*x2401)));
j0eval[1]=((sj6*sj6)+(cj6*cj6));
j0eval[2]=IKsign(((((300.00036)*r22))+(((2000.0)*x2401))+(((2000.0)*x2400))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2402=IKPowWithIntegerCheck(IKsign(((((300.00036)*r22))+(((2000.0)*rxp0_2*sj6))+(((2000.0)*cj6*rxp1_2)))),-1);
if(!x2402.valid){
continue;
}
CheckValue<IkReal> x2403 = IKatan2WithCheck(IkReal((((r10*sj6))+((cj6*r11)))),IkReal((((r00*sj6))+((cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2403.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2402.value)))+(x2403.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x2404=IKcos(j0);
IkReal x2405=IKsin(j0);
IkReal x2406=((0.15000018)*sj6);
IkReal x2407=((1.0)*sj6);
IkReal x2408=(r11*x2404);
IkReal x2409=(r01*x2405);
IkReal x2410=(r00*x2405);
IkReal x2411=((1.0)*cj6*x2405);
IkReal x2412=(cj6*r10*x2404);
evalcond[0]=((((-1.0)*x2407*x2410))+((cj6*x2408))+((r10*sj6*x2404))+(((-1.0)*cj6*x2409)));
evalcond[1]=((((-1.0)*cj6*x2410))+(((-1.0)*x2407*x2408))+x2412+((sj6*x2409)));
evalcond[2]=((-0.0005)+(((-1.0)*px*x2405))+(((-1.0)*x2406*x2409))+((py*x2404))+(((-0.15000018)*x2412))+(((0.15000018)*cj6*x2410))+((x2406*x2408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2413=(cj0*px);
IkReal x2414=(py*sj0);
IkReal x2415=(r11*sj0*sj6);
IkReal x2416=(cj0*cj6*r00);
IkReal x2417=(cj6*r10*sj0);
IkReal x2418=(cj0*r01*sj6);
if( IKabs(((((-2.78560232882098)*pz))+(((-0.350614328438323)*x2417))+(((-0.350614328438323)*x2416))+(((2.33742605134422)*x2413))+(((2.33742605134422)*x2414))+(((0.350614328438323)*x2415))+(((0.350614328438323)*x2418)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.78560232882098)*x2414))+(((-2.78560232882098)*x2413))+(((-2.33742605134422)*pz))+(((-0.417840850731566)*x2415))+(((-0.417840850731566)*x2418))+(((0.417840850731566)*x2416))+(((0.417840850731566)*x2417)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.78560232882098)*pz))+(((-0.350614328438323)*x2417))+(((-0.350614328438323)*x2416))+(((2.33742605134422)*x2413))+(((2.33742605134422)*x2414))+(((0.350614328438323)*x2415))+(((0.350614328438323)*x2418))))+IKsqr(((((-2.78560232882098)*x2414))+(((-2.78560232882098)*x2413))+(((-2.33742605134422)*pz))+(((-0.417840850731566)*x2415))+(((-0.417840850731566)*x2418))+(((0.417840850731566)*x2416))+(((0.417840850731566)*x2417))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.78560232882098)*pz))+(((-0.350614328438323)*x2417))+(((-0.350614328438323)*x2416))+(((2.33742605134422)*x2413))+(((2.33742605134422)*x2414))+(((0.350614328438323)*x2415))+(((0.350614328438323)*x2418))), ((((-2.78560232882098)*x2414))+(((-2.78560232882098)*x2413))+(((-2.33742605134422)*pz))+(((-0.417840850731566)*x2415))+(((-0.417840850731566)*x2418))+(((0.417840850731566)*x2416))+(((0.417840850731566)*x2417))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[3];
IkReal x2419=IKsin(j1);
IkReal x2420=IKcos(j1);
IkReal x2421=(cj0*r01);
IkReal x2422=((0.335)*cj6);
IkReal x2423=((0.15000018)*sj0);
IkReal x2424=(cj0*r00);
IkReal x2425=((0.335)*sj6);
IkReal x2426=((((0.17676784)*x2420))+(((1.0)*pz))+(((0.21066117)*x2419)));
evalcond[0]=(((r10*sj0*x2425))+((x2424*x2425))+(((-1.0)*x2426))+((r11*sj0*x2422))+((x2421*x2422)));
evalcond[1]=((((0.15000018)*cj6*x2424))+(((-1.0)*r11*sj6*x2423))+(((-0.15000018)*sj6*x2421))+(((-1.0)*py*sj0))+((cj6*r10*x2423))+(((0.17676784)*x2419))+(((-0.21066117)*x2420))+(((-1.0)*cj0*px)));
evalcond[2]=((-1.0)*x2426);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2427=cj1*cj1;
IkReal x2428=((2.98507462686567)*pz);
IkReal x2429=(cj1*sj1);
if( IKabs(((((-0.628839313432836)*x2429))+(((-1.0)*cj1*x2428))+(((-0.527665194029851)*x2427)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.628839313432836)+(((-0.628839313432836)*x2427))+((sj1*x2428))+(((0.527665194029851)*x2429)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.628839313432836)*x2429))+(((-1.0)*cj1*x2428))+(((-0.527665194029851)*x2427))))+IKsqr(((0.628839313432836)+(((-0.628839313432836)*x2427))+((sj1*x2428))+(((0.527665194029851)*x2429))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.628839313432836)*x2429))+(((-1.0)*cj1*x2428))+(((-0.527665194029851)*x2427))), ((0.628839313432836)+(((-0.628839313432836)*x2427))+((sj1*x2428))+(((0.527665194029851)*x2429))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x2430=IKsin(j2);
IkReal x2431=IKcos(j2);
IkReal x2432=(cj0*cj6);
IkReal x2433=(cj6*sj0);
IkReal x2434=(cj0*sj6);
IkReal x2435=((1.0)*sj0);
IkReal x2436=(cj1*x2430);
IkReal x2437=((1.0)*x2431);
IkReal x2438=(sj1*x2430);
IkReal x2439=(sj1*x2431);
evalcond[0]=(x2436+(((-1.0)*sj1*x2437)));
evalcond[1]=((((-1.0)*x2438))+(((-1.0)*cj1*x2437)));
evalcond[2]=((((-0.335)*x2436))+(((-0.21066117)*sj1))+(((-1.0)*pz))+(((-0.17676784)*cj1))+(((0.335)*x2439)));
evalcond[3]=((((-1.0)*x2436))+x2439+(((-1.0)*r01*x2432))+(((-1.0)*r11*x2433))+(((-1.0)*r00*x2434))+(((-1.0)*r10*sj6*x2435)));
evalcond[4]=((((0.335)*cj1*x2431))+(((-0.21066117)*cj1))+(((0.17676784)*sj1))+(((-1.0)*py*x2435))+(((0.15000018)*r10*x2433))+(((-0.15000018)*r01*x2434))+(((-0.15000018)*r11*sj0*sj6))+(((0.335)*x2438))+(((-1.0)*cj0*px))+(((0.15000018)*r00*x2432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2440=((1.0)*sj6);
CheckValue<IkReal> x2441 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x2440))+((cj6*r10)))),IkReal((((cj6*r00))+(((-1.0)*r01*x2440)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2441.valid){
continue;
}
CheckValue<IkReal> x2442=IKPowWithIntegerCheck(IKsign(((((-2000.0)*rxp1_2*sj6))+(((2000.0)*cj6*rxp0_2)))),-1);
if(!x2442.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2441.value)+(((1.5707963267949)*(x2442.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x2443=IKcos(j0);
IkReal x2444=IKsin(j0);
IkReal x2445=((0.15000018)*sj6);
IkReal x2446=((1.0)*sj6);
IkReal x2447=(r11*x2443);
IkReal x2448=(r01*x2444);
IkReal x2449=(r00*x2444);
IkReal x2450=((1.0)*cj6*x2444);
IkReal x2451=(cj6*r10*x2443);
evalcond[0]=(((r10*sj6*x2443))+(((-1.0)*cj6*x2448))+(((-1.0)*x2446*x2449))+((cj6*x2447)));
evalcond[1]=(((sj6*x2448))+x2451+(((-1.0)*cj6*x2449))+(((-1.0)*x2446*x2447)));
evalcond[2]=((-0.0005)+(((-1.0)*x2445*x2448))+(((-0.15000018)*x2451))+((py*x2443))+(((-1.0)*px*x2444))+((x2445*x2447))+(((0.15000018)*cj6*x2449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2452=(cj0*px);
IkReal x2453=(py*sj0);
IkReal x2454=(r11*sj0*sj6);
IkReal x2455=(cj0*cj6*r00);
IkReal x2456=(cj6*r10*sj0);
IkReal x2457=(cj0*r01*sj6);
if( IKabs(((((-2.78560232882098)*pz))+(((0.350614328438323)*x2454))+(((0.350614328438323)*x2457))+(((-0.350614328438323)*x2455))+(((-0.350614328438323)*x2456))+(((2.33742605134422)*x2452))+(((2.33742605134422)*x2453)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.417840850731566)*x2456))+(((0.417840850731566)*x2455))+(((-2.33742605134422)*pz))+(((-0.417840850731566)*x2457))+(((-0.417840850731566)*x2454))+(((-2.78560232882098)*x2453))+(((-2.78560232882098)*x2452)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.78560232882098)*pz))+(((0.350614328438323)*x2454))+(((0.350614328438323)*x2457))+(((-0.350614328438323)*x2455))+(((-0.350614328438323)*x2456))+(((2.33742605134422)*x2452))+(((2.33742605134422)*x2453))))+IKsqr(((((0.417840850731566)*x2456))+(((0.417840850731566)*x2455))+(((-2.33742605134422)*pz))+(((-0.417840850731566)*x2457))+(((-0.417840850731566)*x2454))+(((-2.78560232882098)*x2453))+(((-2.78560232882098)*x2452))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.78560232882098)*pz))+(((0.350614328438323)*x2454))+(((0.350614328438323)*x2457))+(((-0.350614328438323)*x2455))+(((-0.350614328438323)*x2456))+(((2.33742605134422)*x2452))+(((2.33742605134422)*x2453))), ((((0.417840850731566)*x2456))+(((0.417840850731566)*x2455))+(((-2.33742605134422)*pz))+(((-0.417840850731566)*x2457))+(((-0.417840850731566)*x2454))+(((-2.78560232882098)*x2453))+(((-2.78560232882098)*x2452))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[3];
IkReal x2458=IKsin(j1);
IkReal x2459=IKcos(j1);
IkReal x2460=(cj0*r01);
IkReal x2461=((0.335)*cj6);
IkReal x2462=((0.15000018)*sj0);
IkReal x2463=(cj0*r00);
IkReal x2464=((0.335)*sj6);
IkReal x2465=((((0.17676784)*x2459))+(((1.0)*pz))+(((0.21066117)*x2458)));
evalcond[0]=(((x2460*x2461))+((r11*sj0*x2461))+((r10*sj0*x2464))+(((-1.0)*x2465))+((x2463*x2464)));
evalcond[1]=((((0.15000018)*cj6*x2463))+(((0.17676784)*x2458))+(((-1.0)*py*sj0))+((cj6*r10*x2462))+(((-0.21066117)*x2459))+(((-0.15000018)*sj6*x2460))+(((-1.0)*r11*sj6*x2462))+(((-1.0)*cj0*px)));
evalcond[2]=((-1.0)*x2465);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2466=cj1*cj1;
IkReal x2467=((2.98507462686567)*pz);
IkReal x2468=(cj1*sj1);
if( IKabs(((((-0.628839313432836)*x2468))+(((-1.0)*cj1*x2467))+(((-0.527665194029851)*x2466)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.628839313432836)+(((-0.628839313432836)*x2466))+((sj1*x2467))+(((0.527665194029851)*x2468)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.628839313432836)*x2468))+(((-1.0)*cj1*x2467))+(((-0.527665194029851)*x2466))))+IKsqr(((0.628839313432836)+(((-0.628839313432836)*x2466))+((sj1*x2467))+(((0.527665194029851)*x2468))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.628839313432836)*x2468))+(((-1.0)*cj1*x2467))+(((-0.527665194029851)*x2466))), ((0.628839313432836)+(((-0.628839313432836)*x2466))+((sj1*x2467))+(((0.527665194029851)*x2468))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x2469=IKsin(j2);
IkReal x2470=IKcos(j2);
IkReal x2471=(cj0*cj6);
IkReal x2472=(cj6*sj0);
IkReal x2473=(cj0*sj6);
IkReal x2474=((1.0)*sj0);
IkReal x2475=(cj1*x2469);
IkReal x2476=((1.0)*x2470);
IkReal x2477=(sj1*x2469);
IkReal x2478=(sj1*x2470);
evalcond[0]=(x2475+(((-1.0)*sj1*x2476)));
evalcond[1]=((((-1.0)*x2477))+(((-1.0)*cj1*x2476)));
evalcond[2]=((((-0.21066117)*sj1))+(((0.335)*x2478))+(((-0.335)*x2475))+(((-1.0)*pz))+(((-0.17676784)*cj1)));
evalcond[3]=(x2478+(((-1.0)*r11*x2472))+(((-1.0)*x2475))+(((-1.0)*r01*x2471))+(((-1.0)*r00*x2473))+(((-1.0)*r10*sj6*x2474)));
evalcond[4]=((((-0.21066117)*cj1))+(((0.335)*x2477))+(((-0.15000018)*r01*x2473))+(((0.17676784)*sj1))+(((0.15000018)*r00*x2471))+(((0.335)*cj1*x2470))+(((-0.15000018)*r11*sj0*sj6))+(((0.15000018)*r10*x2472))+(((-1.0)*cj0*px))+(((-1.0)*py*x2474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2479=cj5*cj5;
IkReal x2480=cj4*cj4;
IkReal x2481=(cj4*sj5);
IkReal x2482=(cj5*sj4);
IkReal x2483=(cj6*r10);
IkReal x2484=(r01*sj6);
IkReal x2485=((1.0)*cj6*r00);
IkReal x2486=((1.0)*r11*sj6);
CheckValue<IkReal> x2487 = IKatan2WithCheck(IkReal((((x2482*x2484))+((x2481*x2484))+(((-1.0)*x2482*x2485))+(((-1.0)*x2481*x2485)))),IkReal((((x2482*x2483))+((x2481*x2483))+(((-1.0)*x2482*x2486))+(((-1.0)*x2481*x2486)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2487.valid){
continue;
}
CheckValue<IkReal> x2488=IKPowWithIntegerCheck(IKsign(((((2.0)*x2479*x2480))+(((-1.0)*x2480))+(((-1.0)*x2479))+(((-2.0)*x2481*x2482)))),-1);
if(!x2488.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2487.value)+(((1.5707963267949)*(x2488.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2489=IKcos(j0);
IkReal x2490=IKsin(j0);
IkReal x2491=(r01*sj6);
IkReal x2492=((0.15)*sj5);
IkReal x2493=(cj5*sj4);
IkReal x2494=((1.0)*cj4);
IkReal x2495=(cj6*r00);
IkReal x2496=(sj4*sj5);
IkReal x2497=(cj6*r10);
IkReal x2498=((1.11e-6)*cj5);
IkReal x2499=(r11*sj6);
IkReal x2500=(sj5*x2490);
IkReal x2501=(cj5*x2490);
IkReal x2502=(sj5*x2489);
IkReal x2503=((1.0)*x2490);
IkReal x2504=((1.8e-7)*x2490);
IkReal x2505=((1.0)*sj4*x2495);
IkReal x2506=(x2489*x2497);
IkReal x2507=(x2489*x2499);
evalcond[0]=((((-1.0)*r00*sj6*x2503))+((cj6*r11*x2489))+((r10*sj6*x2489))+(((-1.0)*cj6*r01*x2503)));
evalcond[1]=((((-1.0)*x2496*x2507))+((x2496*x2506))+(((-1.0)*cj5*x2494*x2506))+((x2490*x2491*x2496))+((cj4*cj5*x2507))+((cj4*x2495*x2501))+(((-1.0)*x2491*x2494*x2501))+(((-1.0)*x2495*x2496*x2503)));
evalcond[2]=(((x2490*x2493*x2499))+(((-1.0)*x2494*x2495*x2502))+((cj4*x2499*x2500))+((x2489*x2491*x2493))+(((-1.0)*x2489*x2493*x2495))+(((-1.0)*x2494*x2497*x2500))+((cj4*x2491*x2502))+(((-1.0)*x2493*x2497*x2503)));
evalcond[3]=((1.0)+((cj4*x2497*x2502))+(((-1.0)*x2494*x2495*x2500))+((x2493*x2506))+(((-1.0)*x2493*x2507))+(((-1.0)*x2493*x2495*x2503))+(((-1.0)*x2494*x2499*x2502))+((x2490*x2491*x2493))+((cj4*x2491*x2500)));
evalcond[4]=((-0.0005)+(((-1.0)*x2498*x2507))+((x2492*x2506))+((x2495*x2504))+(((-1.0)*x2492*x2507))+(((-1.0)*x2490*x2492*x2495))+(((-1.0)*px*x2503))+(((-1.8e-7)*x2506))+((x2490*x2491*x2492))+((x2490*x2491*x2498))+((py*x2489))+(((-1.0)*x2491*x2504))+(((1.8e-7)*x2507))+(((-1.0)*x2490*x2495*x2498))+((x2498*x2506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2508=(cj0*px);
IkReal x2509=((5.01408419187776e-7)*cj6);
IkReal x2510=(r10*sj0);
IkReal x2511=((2.59454291699209e-6)*cj5);
IkReal x2512=(cj0*r00);
IkReal x2513=((3.09201858499129e-6)*cj5);
IkReal x2514=(cj6*sj5);
IkReal x2515=((4.2073668924196e-7)*cj6);
IkReal x2516=((0.350613907701634)*sj5);
IkReal x2517=(py*sj0);
IkReal x2518=((0.417840349323147)*sj5);
IkReal x2519=(r11*sj0*sj6);
IkReal x2520=(cj0*r01*sj6);
if( IKabs(((((4.2073668924196e-7)*x2519))+(((-1.0)*x2511*x2520))+(((-2.78560232882098)*pz))+(((2.33742605134422)*x2517))+(((0.350613907701634)*x2510*x2514))+(((-1.0)*x2510*x2515))+(((2.33742605134422)*x2508))+((cj6*x2511*x2512))+(((-1.0)*x2516*x2520))+(((4.2073668924196e-7)*x2520))+(((-1.0)*x2512*x2515))+(((0.350613907701634)*x2512*x2514))+(((-1.0)*x2516*x2519))+((cj6*x2510*x2511))+(((-1.0)*x2511*x2519)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2518*x2519))+(((-2.78560232882098)*x2517))+(((-0.417840349323147)*x2512*x2514))+(((-2.78560232882098)*x2508))+(((-1.0)*cj6*x2510*x2513))+(((-2.33742605134422)*pz))+(((-5.01408419187776e-7)*x2519))+(((-5.01408419187776e-7)*x2520))+(((-1.0)*cj6*x2512*x2513))+((x2518*x2520))+(((-0.417840349323147)*x2510*x2514))+((x2513*x2519))+((x2509*x2510))+((x2509*x2512))+((x2513*x2520)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((4.2073668924196e-7)*x2519))+(((-1.0)*x2511*x2520))+(((-2.78560232882098)*pz))+(((2.33742605134422)*x2517))+(((0.350613907701634)*x2510*x2514))+(((-1.0)*x2510*x2515))+(((2.33742605134422)*x2508))+((cj6*x2511*x2512))+(((-1.0)*x2516*x2520))+(((4.2073668924196e-7)*x2520))+(((-1.0)*x2512*x2515))+(((0.350613907701634)*x2512*x2514))+(((-1.0)*x2516*x2519))+((cj6*x2510*x2511))+(((-1.0)*x2511*x2519))))+IKsqr((((x2518*x2519))+(((-2.78560232882098)*x2517))+(((-0.417840349323147)*x2512*x2514))+(((-2.78560232882098)*x2508))+(((-1.0)*cj6*x2510*x2513))+(((-2.33742605134422)*pz))+(((-5.01408419187776e-7)*x2519))+(((-5.01408419187776e-7)*x2520))+(((-1.0)*cj6*x2512*x2513))+((x2518*x2520))+(((-0.417840349323147)*x2510*x2514))+((x2513*x2519))+((x2509*x2510))+((x2509*x2512))+((x2513*x2520))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((4.2073668924196e-7)*x2519))+(((-1.0)*x2511*x2520))+(((-2.78560232882098)*pz))+(((2.33742605134422)*x2517))+(((0.350613907701634)*x2510*x2514))+(((-1.0)*x2510*x2515))+(((2.33742605134422)*x2508))+((cj6*x2511*x2512))+(((-1.0)*x2516*x2520))+(((4.2073668924196e-7)*x2520))+(((-1.0)*x2512*x2515))+(((0.350613907701634)*x2512*x2514))+(((-1.0)*x2516*x2519))+((cj6*x2510*x2511))+(((-1.0)*x2511*x2519))), (((x2518*x2519))+(((-2.78560232882098)*x2517))+(((-0.417840349323147)*x2512*x2514))+(((-2.78560232882098)*x2508))+(((-1.0)*cj6*x2510*x2513))+(((-2.33742605134422)*pz))+(((-5.01408419187776e-7)*x2519))+(((-5.01408419187776e-7)*x2520))+(((-1.0)*cj6*x2512*x2513))+((x2518*x2520))+(((-0.417840349323147)*x2510*x2514))+((x2513*x2519))+((x2509*x2510))+((x2509*x2512))+((x2513*x2520))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[3];
IkReal x2521=IKsin(j1);
IkReal x2522=IKcos(j1);
IkReal x2523=(r11*sj0);
IkReal x2524=((0.335)*cj6);
IkReal x2525=(cj0*r01);
IkReal x2526=((1.11e-6)*cj5);
IkReal x2527=((0.15)*sj5);
IkReal x2528=((0.335)*sj6);
IkReal x2529=((1.8e-7)*sj6);
IkReal x2530=(sj6*x2526);
IkReal x2531=(cj6*r10*sj0);
IkReal x2532=(cj0*cj6*r00);
IkReal x2533=((((0.17676784)*x2522))+(((0.21066117)*x2521))+(((1.0)*pz)));
evalcond[0]=((((-1.0)*x2533))+((cj0*r00*x2528))+((x2523*x2524))+((r10*sj0*x2528))+((x2524*x2525)));
evalcond[1]=((((-1.0)*x2523*x2529))+(((-0.21066117)*x2522))+((x2523*x2530))+(((1.8e-7)*x2531))+(((1.8e-7)*x2532))+(((0.17676784)*x2521))+((x2525*x2530))+((sj6*x2523*x2527))+(((-1.0)*x2527*x2532))+(((-1.0)*x2527*x2531))+(((-1.0)*x2526*x2531))+(((-1.0)*x2526*x2532))+((sj6*x2525*x2527))+(((-1.0)*py*sj0))+(((-1.0)*x2525*x2529))+(((-1.0)*cj0*px)));
evalcond[2]=((-1.0)*x2533);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2534=cj1*cj1;
IkReal x2535=((2.98507462686567)*pz);
IkReal x2536=(cj1*sj1);
if( IKabs(((((-0.628839313432836)*x2536))+(((-0.527665194029851)*x2534))+(((-1.0)*cj1*x2535)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.628839313432836)+(((0.527665194029851)*x2536))+((sj1*x2535))+(((-0.628839313432836)*x2534)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.628839313432836)*x2536))+(((-0.527665194029851)*x2534))+(((-1.0)*cj1*x2535))))+IKsqr(((0.628839313432836)+(((0.527665194029851)*x2536))+((sj1*x2535))+(((-0.628839313432836)*x2534))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.628839313432836)*x2536))+(((-0.527665194029851)*x2534))+(((-1.0)*cj1*x2535))), ((0.628839313432836)+(((0.527665194029851)*x2536))+((sj1*x2535))+(((-0.628839313432836)*x2534))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x2537=IKsin(j2);
IkReal x2538=IKcos(j2);
IkReal x2539=((1.0)*cj6);
IkReal x2540=(cj0*r01);
IkReal x2541=(r11*sj0);
IkReal x2542=((1.11e-6)*cj5);
IkReal x2543=((1.0)*sj0);
IkReal x2544=((0.15)*sj5);
IkReal x2545=((1.0)*cj0);
IkReal x2546=((1.8e-7)*sj6);
IkReal x2547=(cj1*x2537);
IkReal x2548=(sj6*x2542);
IkReal x2549=((1.0)*x2538);
IkReal x2550=(cj6*r10*sj0);
IkReal x2551=(sj1*x2537);
IkReal x2552=(cj0*cj6*r00);
IkReal x2553=(sj1*x2538);
evalcond[0]=(x2547+(((-1.0)*sj1*x2549)));
evalcond[1]=((((-1.0)*x2551))+(((-1.0)*cj1*x2549)));
evalcond[2]=((((-0.21066117)*sj1))+(((-1.0)*pz))+(((-0.335)*x2547))+(((0.335)*x2553))+(((-0.17676784)*cj1)));
evalcond[3]=(x2553+(((-1.0)*r10*sj6*x2543))+(((-1.0)*x2547))+(((-1.0)*x2539*x2541))+(((-1.0)*x2539*x2540))+(((-1.0)*r00*sj6*x2545)));
evalcond[4]=((((-1.0)*x2541*x2546))+(((-1.0)*x2542*x2552))+(((-1.0)*x2542*x2550))+(((-1.0)*py*x2543))+(((-0.21066117)*cj1))+(((0.335)*cj1*x2538))+((sj6*x2540*x2544))+(((0.17676784)*sj1))+((sj6*x2541*x2544))+(((0.335)*x2551))+(((-1.0)*x2544*x2552))+(((-1.0)*x2544*x2550))+((x2540*x2548))+(((1.8e-7)*x2552))+(((1.8e-7)*x2550))+(((-1.0)*x2540*x2546))+(((-1.0)*px*x2545))+((x2541*x2548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2554 = IKatan2WithCheck(IkReal((((r10*sj6))+((cj6*r11)))),IkReal((((r00*sj6))+((cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2554.valid){
continue;
}
CheckValue<IkReal> x2555=IKPowWithIntegerCheck(IKsign(((((2000.0)*rxp0_2*sj6))+((r22*(((0.00036)+(((-0.00222)*cj5))+(((-300.0)*sj5))))))+(((2000.0)*cj6*rxp1_2)))),-1);
if(!x2555.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2554.value)+(((1.5707963267949)*(x2555.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2556=IKcos(j0);
IkReal x2557=IKsin(j0);
IkReal x2558=(r01*sj6);
IkReal x2559=((0.15)*sj5);
IkReal x2560=(cj5*sj4);
IkReal x2561=((1.0)*cj4);
IkReal x2562=(cj6*r00);
IkReal x2563=(sj4*sj5);
IkReal x2564=(cj6*r10);
IkReal x2565=((1.11e-6)*cj5);
IkReal x2566=(r11*sj6);
IkReal x2567=(sj5*x2557);
IkReal x2568=(cj5*x2557);
IkReal x2569=(sj5*x2556);
IkReal x2570=((1.0)*x2557);
IkReal x2571=((1.8e-7)*x2557);
IkReal x2572=((1.0)*sj4*x2562);
IkReal x2573=(x2556*x2564);
IkReal x2574=(x2556*x2566);
evalcond[0]=((((-1.0)*cj6*r01*x2570))+((r10*sj6*x2556))+((cj6*r11*x2556))+(((-1.0)*r00*sj6*x2570)));
evalcond[1]=(((cj4*cj5*x2574))+(((-1.0)*x2562*x2563*x2570))+((x2557*x2558*x2563))+(((-1.0)*cj5*x2561*x2573))+((x2563*x2573))+(((-1.0)*x2558*x2561*x2568))+(((-1.0)*x2563*x2574))+((cj4*x2562*x2568)));
evalcond[2]=((((-1.0)*x2561*x2562*x2569))+((cj4*x2566*x2567))+((x2556*x2558*x2560))+((cj4*x2558*x2569))+(((-1.0)*x2556*x2560*x2562))+(((-1.0)*x2560*x2564*x2570))+(((-1.0)*x2561*x2564*x2567))+((x2557*x2560*x2566)));
evalcond[3]=((1.0)+(((-1.0)*x2561*x2562*x2567))+(((-1.0)*x2560*x2574))+(((-1.0)*x2561*x2566*x2569))+((x2560*x2573))+((cj4*x2558*x2567))+((x2557*x2558*x2560))+((cj4*x2564*x2569))+(((-1.0)*x2560*x2562*x2570)));
evalcond[4]=((-0.0005)+(((-1.0)*x2558*x2571))+((x2557*x2558*x2559))+(((-1.8e-7)*x2573))+((x2559*x2573))+((x2557*x2558*x2565))+(((-1.0)*x2557*x2559*x2562))+(((-1.0)*x2559*x2574))+(((-1.0)*x2557*x2562*x2565))+(((1.8e-7)*x2574))+((py*x2556))+((x2565*x2573))+(((-1.0)*x2565*x2574))+(((-1.0)*px*x2570))+((x2562*x2571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2575=(cj0*px);
IkReal x2576=((5.01408419187776e-7)*cj6);
IkReal x2577=(r10*sj0);
IkReal x2578=((2.59454291699209e-6)*cj5);
IkReal x2579=(cj0*r00);
IkReal x2580=((3.09201858499129e-6)*cj5);
IkReal x2581=(cj6*sj5);
IkReal x2582=((4.2073668924196e-7)*cj6);
IkReal x2583=((0.350613907701634)*sj5);
IkReal x2584=(py*sj0);
IkReal x2585=((0.417840349323147)*sj5);
IkReal x2586=(r11*sj0*sj6);
IkReal x2587=(cj0*r01*sj6);
if( IKabs((((cj6*x2577*x2578))+(((-2.78560232882098)*pz))+(((4.2073668924196e-7)*x2587))+(((4.2073668924196e-7)*x2586))+(((-1.0)*x2579*x2582))+((cj6*x2578*x2579))+(((2.33742605134422)*x2584))+(((-1.0)*x2578*x2586))+(((-1.0)*x2578*x2587))+(((0.350613907701634)*x2577*x2581))+(((-1.0)*x2577*x2582))+(((-1.0)*x2583*x2587))+(((-1.0)*x2583*x2586))+(((0.350613907701634)*x2579*x2581))+(((2.33742605134422)*x2575)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*x2579*x2580))+(((-2.33742605134422)*pz))+((x2580*x2586))+((x2580*x2587))+(((-2.78560232882098)*x2584))+(((-2.78560232882098)*x2575))+(((-1.0)*cj6*x2577*x2580))+(((-5.01408419187776e-7)*x2586))+(((-5.01408419187776e-7)*x2587))+(((-0.417840349323147)*x2579*x2581))+((x2576*x2577))+((x2576*x2579))+((x2585*x2587))+((x2585*x2586))+(((-0.417840349323147)*x2577*x2581)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*x2577*x2578))+(((-2.78560232882098)*pz))+(((4.2073668924196e-7)*x2587))+(((4.2073668924196e-7)*x2586))+(((-1.0)*x2579*x2582))+((cj6*x2578*x2579))+(((2.33742605134422)*x2584))+(((-1.0)*x2578*x2586))+(((-1.0)*x2578*x2587))+(((0.350613907701634)*x2577*x2581))+(((-1.0)*x2577*x2582))+(((-1.0)*x2583*x2587))+(((-1.0)*x2583*x2586))+(((0.350613907701634)*x2579*x2581))+(((2.33742605134422)*x2575))))+IKsqr(((((-1.0)*cj6*x2579*x2580))+(((-2.33742605134422)*pz))+((x2580*x2586))+((x2580*x2587))+(((-2.78560232882098)*x2584))+(((-2.78560232882098)*x2575))+(((-1.0)*cj6*x2577*x2580))+(((-5.01408419187776e-7)*x2586))+(((-5.01408419187776e-7)*x2587))+(((-0.417840349323147)*x2579*x2581))+((x2576*x2577))+((x2576*x2579))+((x2585*x2587))+((x2585*x2586))+(((-0.417840349323147)*x2577*x2581))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((cj6*x2577*x2578))+(((-2.78560232882098)*pz))+(((4.2073668924196e-7)*x2587))+(((4.2073668924196e-7)*x2586))+(((-1.0)*x2579*x2582))+((cj6*x2578*x2579))+(((2.33742605134422)*x2584))+(((-1.0)*x2578*x2586))+(((-1.0)*x2578*x2587))+(((0.350613907701634)*x2577*x2581))+(((-1.0)*x2577*x2582))+(((-1.0)*x2583*x2587))+(((-1.0)*x2583*x2586))+(((0.350613907701634)*x2579*x2581))+(((2.33742605134422)*x2575))), ((((-1.0)*cj6*x2579*x2580))+(((-2.33742605134422)*pz))+((x2580*x2586))+((x2580*x2587))+(((-2.78560232882098)*x2584))+(((-2.78560232882098)*x2575))+(((-1.0)*cj6*x2577*x2580))+(((-5.01408419187776e-7)*x2586))+(((-5.01408419187776e-7)*x2587))+(((-0.417840349323147)*x2579*x2581))+((x2576*x2577))+((x2576*x2579))+((x2585*x2587))+((x2585*x2586))+(((-0.417840349323147)*x2577*x2581))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[3];
IkReal x2588=IKsin(j1);
IkReal x2589=IKcos(j1);
IkReal x2590=(r11*sj0);
IkReal x2591=((0.335)*cj6);
IkReal x2592=(cj0*r01);
IkReal x2593=((1.11e-6)*cj5);
IkReal x2594=((0.15)*sj5);
IkReal x2595=((0.335)*sj6);
IkReal x2596=((1.8e-7)*sj6);
IkReal x2597=(sj6*x2593);
IkReal x2598=(cj6*r10*sj0);
IkReal x2599=(cj0*cj6*r00);
IkReal x2600=((((0.17676784)*x2589))+(((1.0)*pz))+(((0.21066117)*x2588)));
evalcond[0]=(((r10*sj0*x2595))+((x2591*x2592))+((cj0*r00*x2595))+(((-1.0)*x2600))+((x2590*x2591)));
evalcond[1]=((((-0.21066117)*x2589))+((sj6*x2592*x2594))+(((-1.0)*x2590*x2596))+(((-1.0)*x2594*x2598))+(((-1.0)*x2594*x2599))+(((0.17676784)*x2588))+((x2592*x2597))+((sj6*x2590*x2594))+(((-1.0)*x2593*x2598))+(((-1.0)*x2593*x2599))+(((-1.0)*py*sj0))+(((1.8e-7)*x2598))+(((1.8e-7)*x2599))+(((-1.0)*x2592*x2596))+(((-1.0)*cj0*px))+((x2590*x2597)));
evalcond[2]=((-1.0)*x2600);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2601=cj1*cj1;
IkReal x2602=((2.98507462686567)*pz);
IkReal x2603=(cj1*sj1);
if( IKabs(((((-0.628839313432836)*x2603))+(((-1.0)*cj1*x2602))+(((-0.527665194029851)*x2601)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.628839313432836)+(((0.527665194029851)*x2603))+(((-0.628839313432836)*x2601))+((sj1*x2602)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.628839313432836)*x2603))+(((-1.0)*cj1*x2602))+(((-0.527665194029851)*x2601))))+IKsqr(((0.628839313432836)+(((0.527665194029851)*x2603))+(((-0.628839313432836)*x2601))+((sj1*x2602))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.628839313432836)*x2603))+(((-1.0)*cj1*x2602))+(((-0.527665194029851)*x2601))), ((0.628839313432836)+(((0.527665194029851)*x2603))+(((-0.628839313432836)*x2601))+((sj1*x2602))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x2604=IKsin(j2);
IkReal x2605=IKcos(j2);
IkReal x2606=((1.0)*cj6);
IkReal x2607=(cj0*r01);
IkReal x2608=(r11*sj0);
IkReal x2609=((1.11e-6)*cj5);
IkReal x2610=((1.0)*sj0);
IkReal x2611=((0.15)*sj5);
IkReal x2612=((1.0)*cj0);
IkReal x2613=((1.8e-7)*sj6);
IkReal x2614=(cj1*x2604);
IkReal x2615=(sj6*x2609);
IkReal x2616=((1.0)*x2605);
IkReal x2617=(cj6*r10*sj0);
IkReal x2618=(sj1*x2604);
IkReal x2619=(cj0*cj6*r00);
IkReal x2620=(sj1*x2605);
evalcond[0]=((((-1.0)*sj1*x2616))+x2614);
evalcond[1]=((((-1.0)*x2618))+(((-1.0)*cj1*x2616)));
evalcond[2]=((((-0.21066117)*sj1))+(((0.335)*x2620))+(((-1.0)*pz))+(((-0.17676784)*cj1))+(((-0.335)*x2614)));
evalcond[3]=((((-1.0)*x2614))+(((-1.0)*r00*sj6*x2612))+(((-1.0)*x2606*x2608))+(((-1.0)*x2606*x2607))+(((-1.0)*r10*sj6*x2610))+x2620);
evalcond[4]=((((-1.0)*x2609*x2617))+(((-1.0)*x2609*x2619))+(((0.335)*x2618))+(((-1.0)*x2611*x2619))+(((-1.0)*x2611*x2617))+(((-0.21066117)*cj1))+((sj6*x2607*x2611))+((sj6*x2608*x2611))+(((-1.0)*x2608*x2613))+(((-1.0)*x2607*x2613))+(((0.335)*cj1*x2605))+(((0.17676784)*sj1))+((x2608*x2615))+(((-1.0)*py*x2610))+(((1.8e-7)*x2617))+(((1.8e-7)*x2619))+(((-1.0)*px*x2612))+((x2607*x2615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2621=IKPowWithIntegerCheck(IKsign((r22*((((cj5*sj4))+((cj4*sj5)))))),-1);
if(!x2621.valid){
continue;
}
CheckValue<IkReal> x2622 = IKatan2WithCheck(IkReal((((r10*sj6))+((cj6*r11)))),IkReal((((r00*sj6))+((cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2622.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2621.value)))+(x2622.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2623=IKcos(j0);
IkReal x2624=IKsin(j0);
IkReal x2625=(r01*sj6);
IkReal x2626=((0.15)*sj5);
IkReal x2627=(cj5*sj4);
IkReal x2628=((1.0)*cj4);
IkReal x2629=(cj6*r00);
IkReal x2630=(sj4*sj5);
IkReal x2631=(cj6*r10);
IkReal x2632=((1.11e-6)*cj5);
IkReal x2633=(r11*sj6);
IkReal x2634=(sj5*x2624);
IkReal x2635=(cj5*x2624);
IkReal x2636=(sj5*x2623);
IkReal x2637=((1.0)*x2624);
IkReal x2638=((1.8e-7)*x2624);
IkReal x2639=((1.0)*sj4*x2629);
IkReal x2640=(x2623*x2631);
IkReal x2641=(x2623*x2633);
evalcond[0]=((((-1.0)*r00*sj6*x2637))+((r10*sj6*x2623))+((cj6*r11*x2623))+(((-1.0)*cj6*r01*x2637)));
evalcond[1]=(((cj4*cj5*x2641))+(((-1.0)*cj5*x2628*x2640))+(((-1.0)*x2630*x2641))+(((-1.0)*x2629*x2630*x2637))+((x2624*x2625*x2630))+((x2630*x2640))+(((-1.0)*x2625*x2628*x2635))+((cj4*x2629*x2635)));
evalcond[2]=(((cj4*x2625*x2636))+(((-1.0)*x2628*x2629*x2636))+((x2624*x2627*x2633))+(((-1.0)*x2628*x2631*x2634))+(((-1.0)*x2623*x2627*x2629))+((cj4*x2633*x2634))+((x2623*x2625*x2627))+(((-1.0)*x2627*x2631*x2637)));
evalcond[3]=((1.0)+(((-1.0)*x2627*x2629*x2637))+((x2624*x2625*x2627))+(((-1.0)*x2628*x2633*x2636))+((cj4*x2625*x2634))+(((-1.0)*x2628*x2629*x2634))+((cj4*x2631*x2636))+(((-1.0)*x2627*x2641))+((x2627*x2640)));
evalcond[4]=((-0.0005)+(((-1.0)*x2626*x2641))+(((-1.0)*x2632*x2641))+((x2624*x2625*x2626))+(((-1.0)*x2624*x2629*x2632))+(((-1.0)*x2624*x2626*x2629))+((x2632*x2640))+(((-1.0)*px*x2637))+((x2624*x2625*x2632))+((x2626*x2640))+(((1.8e-7)*x2641))+(((-1.8e-7)*x2640))+(((-1.0)*x2625*x2638))+((py*x2623))+((x2629*x2638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2642=(cj0*px);
IkReal x2643=((5.01408419187776e-7)*cj6);
IkReal x2644=(r10*sj0);
IkReal x2645=((2.59454291699209e-6)*cj5);
IkReal x2646=(cj0*r00);
IkReal x2647=((3.09201858499129e-6)*cj5);
IkReal x2648=(cj6*sj5);
IkReal x2649=((4.2073668924196e-7)*cj6);
IkReal x2650=((0.350613907701634)*sj5);
IkReal x2651=(py*sj0);
IkReal x2652=((0.417840349323147)*sj5);
IkReal x2653=(r11*sj0*sj6);
IkReal x2654=(cj0*r01*sj6);
if( IKabs(((((-1.0)*x2650*x2653))+(((-1.0)*x2650*x2654))+(((-2.78560232882098)*pz))+(((-1.0)*x2646*x2649))+(((-1.0)*x2644*x2649))+(((-1.0)*x2645*x2654))+(((-1.0)*x2645*x2653))+(((4.2073668924196e-7)*x2654))+(((4.2073668924196e-7)*x2653))+((cj6*x2644*x2645))+((cj6*x2645*x2646))+(((0.350613907701634)*x2644*x2648))+(((0.350613907701634)*x2646*x2648))+(((2.33742605134422)*x2642))+(((2.33742605134422)*x2651)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-5.01408419187776e-7)*x2653))+(((-5.01408419187776e-7)*x2654))+(((-1.0)*cj6*x2646*x2647))+(((-2.78560232882098)*x2651))+(((-2.78560232882098)*x2642))+(((-2.33742605134422)*pz))+(((-0.417840349323147)*x2646*x2648))+(((-0.417840349323147)*x2644*x2648))+((x2652*x2653))+((x2652*x2654))+((x2647*x2654))+((x2647*x2653))+((x2643*x2646))+((x2643*x2644))+(((-1.0)*cj6*x2644*x2647)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2650*x2653))+(((-1.0)*x2650*x2654))+(((-2.78560232882098)*pz))+(((-1.0)*x2646*x2649))+(((-1.0)*x2644*x2649))+(((-1.0)*x2645*x2654))+(((-1.0)*x2645*x2653))+(((4.2073668924196e-7)*x2654))+(((4.2073668924196e-7)*x2653))+((cj6*x2644*x2645))+((cj6*x2645*x2646))+(((0.350613907701634)*x2644*x2648))+(((0.350613907701634)*x2646*x2648))+(((2.33742605134422)*x2642))+(((2.33742605134422)*x2651))))+IKsqr(((((-5.01408419187776e-7)*x2653))+(((-5.01408419187776e-7)*x2654))+(((-1.0)*cj6*x2646*x2647))+(((-2.78560232882098)*x2651))+(((-2.78560232882098)*x2642))+(((-2.33742605134422)*pz))+(((-0.417840349323147)*x2646*x2648))+(((-0.417840349323147)*x2644*x2648))+((x2652*x2653))+((x2652*x2654))+((x2647*x2654))+((x2647*x2653))+((x2643*x2646))+((x2643*x2644))+(((-1.0)*cj6*x2644*x2647))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*x2650*x2653))+(((-1.0)*x2650*x2654))+(((-2.78560232882098)*pz))+(((-1.0)*x2646*x2649))+(((-1.0)*x2644*x2649))+(((-1.0)*x2645*x2654))+(((-1.0)*x2645*x2653))+(((4.2073668924196e-7)*x2654))+(((4.2073668924196e-7)*x2653))+((cj6*x2644*x2645))+((cj6*x2645*x2646))+(((0.350613907701634)*x2644*x2648))+(((0.350613907701634)*x2646*x2648))+(((2.33742605134422)*x2642))+(((2.33742605134422)*x2651))), ((((-5.01408419187776e-7)*x2653))+(((-5.01408419187776e-7)*x2654))+(((-1.0)*cj6*x2646*x2647))+(((-2.78560232882098)*x2651))+(((-2.78560232882098)*x2642))+(((-2.33742605134422)*pz))+(((-0.417840349323147)*x2646*x2648))+(((-0.417840349323147)*x2644*x2648))+((x2652*x2653))+((x2652*x2654))+((x2647*x2654))+((x2647*x2653))+((x2643*x2646))+((x2643*x2644))+(((-1.0)*cj6*x2644*x2647))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[3];
IkReal x2655=IKsin(j1);
IkReal x2656=IKcos(j1);
IkReal x2657=(r11*sj0);
IkReal x2658=((0.335)*cj6);
IkReal x2659=(cj0*r01);
IkReal x2660=((1.11e-6)*cj5);
IkReal x2661=((0.15)*sj5);
IkReal x2662=((0.335)*sj6);
IkReal x2663=((1.8e-7)*sj6);
IkReal x2664=(sj6*x2660);
IkReal x2665=(cj6*r10*sj0);
IkReal x2666=(cj0*cj6*r00);
IkReal x2667=((((0.21066117)*x2655))+(((1.0)*pz))+(((0.17676784)*x2656)));
evalcond[0]=(((cj0*r00*x2662))+((x2658*x2659))+((x2657*x2658))+(((-1.0)*x2667))+((r10*sj0*x2662)));
evalcond[1]=(((x2657*x2664))+(((-1.0)*x2660*x2665))+(((-1.0)*x2660*x2666))+((x2659*x2664))+((sj6*x2659*x2661))+((sj6*x2657*x2661))+(((-1.0)*x2657*x2663))+(((1.8e-7)*x2666))+(((1.8e-7)*x2665))+(((-1.0)*x2659*x2663))+(((-1.0)*py*sj0))+(((0.17676784)*x2655))+(((-1.0)*x2661*x2666))+(((-1.0)*x2661*x2665))+(((-1.0)*cj0*px))+(((-0.21066117)*x2656)));
evalcond[2]=((-1.0)*x2667);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2668=cj1*cj1;
IkReal x2669=((2.98507462686567)*pz);
IkReal x2670=(cj1*sj1);
if( IKabs(((((-0.527665194029851)*x2668))+(((-1.0)*cj1*x2669))+(((-0.628839313432836)*x2670)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.628839313432836)+((sj1*x2669))+(((0.527665194029851)*x2670))+(((-0.628839313432836)*x2668)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.527665194029851)*x2668))+(((-1.0)*cj1*x2669))+(((-0.628839313432836)*x2670))))+IKsqr(((0.628839313432836)+((sj1*x2669))+(((0.527665194029851)*x2670))+(((-0.628839313432836)*x2668))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.527665194029851)*x2668))+(((-1.0)*cj1*x2669))+(((-0.628839313432836)*x2670))), ((0.628839313432836)+((sj1*x2669))+(((0.527665194029851)*x2670))+(((-0.628839313432836)*x2668))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x2671=IKsin(j2);
IkReal x2672=IKcos(j2);
IkReal x2673=((1.0)*cj6);
IkReal x2674=(cj0*r01);
IkReal x2675=(r11*sj0);
IkReal x2676=((1.11e-6)*cj5);
IkReal x2677=((1.0)*sj0);
IkReal x2678=((0.15)*sj5);
IkReal x2679=((1.0)*cj0);
IkReal x2680=((1.8e-7)*sj6);
IkReal x2681=(cj1*x2671);
IkReal x2682=(sj6*x2676);
IkReal x2683=((1.0)*x2672);
IkReal x2684=(cj6*r10*sj0);
IkReal x2685=(sj1*x2671);
IkReal x2686=(cj0*cj6*r00);
IkReal x2687=(sj1*x2672);
evalcond[0]=((((-1.0)*sj1*x2683))+x2681);
evalcond[1]=((((-1.0)*cj1*x2683))+(((-1.0)*x2685)));
evalcond[2]=((((-0.335)*x2681))+(((-0.21066117)*sj1))+(((-1.0)*pz))+(((-0.17676784)*cj1))+(((0.335)*x2687)));
evalcond[3]=((((-1.0)*x2673*x2674))+(((-1.0)*x2673*x2675))+(((-1.0)*r10*sj6*x2677))+(((-1.0)*r00*sj6*x2679))+(((-1.0)*x2681))+x2687);
evalcond[4]=((((-0.21066117)*cj1))+(((-1.0)*px*x2679))+(((0.17676784)*sj1))+((x2674*x2682))+(((0.335)*cj1*x2672))+(((-1.0)*x2676*x2684))+(((-1.0)*x2676*x2686))+(((1.8e-7)*x2684))+(((1.8e-7)*x2686))+((sj6*x2674*x2678))+((sj6*x2675*x2678))+((x2675*x2682))+(((-1.0)*x2675*x2680))+(((-1.0)*x2674*x2680))+(((0.335)*x2685))+(((-1.0)*x2678*x2686))+(((-1.0)*x2678*x2684))+(((-1.0)*py*x2677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x2688=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2688);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2688);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2689=((1.0)*r22);
IkReal x2690=((((-1.0)*cj5*sj4*x2689))+(((-1.0)*cj4*sj5*x2689)));
j0eval[0]=x2690;
j0eval[1]=IKsign(x2690);
j0eval[2]=((sj6*sj6)+(cj6*cj6));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x2691=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2691);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2691);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2692=(cj6*rxp1_2);
IkReal x2693=(rxp0_2*sj6);
IkReal x2694=(r22*sj5);
IkReal x2695=(cj5*r22);
j0eval[0]=((((5555555.55555556)*x2692))+(((5555555.55555556)*x2693))+r22+(((-6.16666666666667)*x2695))+(((-833333.333333333)*x2694)));
j0eval[1]=IKsign(((((-300.0)*x2694))+(((-0.00222)*x2695))+(((0.00036)*r22))+(((2000.0)*x2692))+(((2000.0)*x2693))));
j0eval[2]=((sj6*sj6)+(cj6*cj6));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x2696=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2696);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2696);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2697=cj4*cj4;
IkReal x2698=cj5*cj5;
IkReal x2699=(cj5*sj4);
IkReal x2700=(cj4*sj5);
IkReal x2701=(cj6*r10);
IkReal x2702=(r01*sj6);
IkReal x2703=((1.0)*r11*sj6);
IkReal x2704=((1.0)*cj6*r00);
IkReal x2705=(x2697*x2698);
j0eval[0]=(((x2699*x2700))+(((0.5)*x2697))+(((0.5)*x2698))+(((-1.0)*x2705)));
j0eval[1]=IKsign(((((2.0)*x2699*x2700))+(((-2.0)*x2705))+x2698+x2697));
j0eval[2]=((IKabs((((x2699*x2701))+((x2700*x2701))+(((-1.0)*x2699*x2703))+(((-1.0)*x2700*x2703)))))+(IKabs((((x2699*x2702))+((x2700*x2702))+(((-1.0)*x2699*x2704))+(((-1.0)*x2700*x2704))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j5), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x2706=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2706);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2706);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4=0;
sj4=0;
cj4=1.0;
j5=0;
sj5=0;
cj5=1.0;
IkReal x2707=(cj6*rxp0_2);
IkReal x2708=(rxp1_2*sj6);
j0eval[0]=(x2708+(((-1.0)*x2707)));
j0eval[1]=((sj6*sj6)+(cj6*cj6));
j0eval[2]=IKsign(((((-2000.0)*x2707))+(((2000.0)*x2708))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x2709=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2709);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2709);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4=0;
sj4=0;
cj4=1.0;
j5=0;
sj5=0;
cj5=1.0;
IkReal x2710=(cj6*rxp1_2);
IkReal x2711=(rxp0_2*sj6);
j0eval[0]=((((1075268.8172043)*x2711))+(((1075268.8172043)*x2710))+(((-1.0)*r22)));
j0eval[1]=IKsign(((((2000.0)*x2711))+(((2000.0)*x2710))+(((-0.00186)*r22))));
j0eval[2]=((sj6*sj6)+(cj6*cj6));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2712=IKPowWithIntegerCheck(IKsign(((((-0.00186)*r22))+(((2000.0)*rxp0_2*sj6))+(((2000.0)*cj6*rxp1_2)))),-1);
if(!x2712.valid){
continue;
}
CheckValue<IkReal> x2713 = IKatan2WithCheck(IkReal((((r10*sj6))+((cj6*r11)))),IkReal((((r00*sj6))+((cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2713.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2712.value)))+(x2713.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x2714=IKcos(j0);
IkReal x2715=IKsin(j0);
IkReal x2716=((1.0)*r01);
IkReal x2717=(cj6*x2714);
IkReal x2718=(cj6*x2715);
IkReal x2719=((1.0)*x2715);
IkReal x2720=(sj6*x2715);
IkReal x2721=(r11*sj6*x2714);
evalcond[0]=(((r10*sj6*x2714))+(((-1.0)*r00*sj6*x2719))+((r11*x2717))+(((-1.0)*x2716*x2718)));
evalcond[1]=(x2721+(((-1.0)*x2716*x2720))+(((-1.0)*r10*x2717))+((r00*x2718)));
evalcond[2]=((-0.0005)+(((-9.3e-7)*x2721))+((py*x2714))+(((9.3e-7)*r10*x2717))+(((-1.0)*px*x2719))+(((9.3e-7)*r01*x2720))+(((-9.3e-7)*r00*x2718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2722=((2.17380622775013e-6)*sj0);
IkReal x2723=(cj6*r10);
IkReal x2724=(r11*sj6);
IkReal x2725=(cj0*px);
IkReal x2726=((2.59061016580351e-6)*sj0);
IkReal x2727=(py*sj0);
IkReal x2728=(cj0*cj6*r00);
IkReal x2729=(cj0*r01*sj6);
if( IKabs(((((-2.78560232882098)*pz))+(((2.33742605134422)*x2725))+(((2.33742605134422)*x2727))+(((-1.0)*x2722*x2724))+(((-2.17380622775013e-6)*x2729))+((x2722*x2723))+(((2.17380622775013e-6)*x2728)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.78560232882098)*x2727))+(((-2.78560232882098)*x2725))+((x2724*x2726))+(((-2.33742605134422)*pz))+(((2.59061016580351e-6)*x2729))+(((-1.0)*x2723*x2726))+(((-2.59061016580351e-6)*x2728)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.78560232882098)*pz))+(((2.33742605134422)*x2725))+(((2.33742605134422)*x2727))+(((-1.0)*x2722*x2724))+(((-2.17380622775013e-6)*x2729))+((x2722*x2723))+(((2.17380622775013e-6)*x2728))))+IKsqr(((((-2.78560232882098)*x2727))+(((-2.78560232882098)*x2725))+((x2724*x2726))+(((-2.33742605134422)*pz))+(((2.59061016580351e-6)*x2729))+(((-1.0)*x2723*x2726))+(((-2.59061016580351e-6)*x2728))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.78560232882098)*pz))+(((2.33742605134422)*x2725))+(((2.33742605134422)*x2727))+(((-1.0)*x2722*x2724))+(((-2.17380622775013e-6)*x2729))+((x2722*x2723))+(((2.17380622775013e-6)*x2728))), ((((-2.78560232882098)*x2727))+(((-2.78560232882098)*x2725))+((x2724*x2726))+(((-2.33742605134422)*pz))+(((2.59061016580351e-6)*x2729))+(((-1.0)*x2723*x2726))+(((-2.59061016580351e-6)*x2728))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[3];
IkReal x2730=IKcos(j1);
IkReal x2731=IKsin(j1);
IkReal x2732=(cj0*r01);
IkReal x2733=((9.3e-7)*sj6);
IkReal x2734=((0.335)*cj6);
IkReal x2735=(r10*sj0);
IkReal x2736=((9.3e-7)*cj6);
IkReal x2737=(r11*sj0);
IkReal x2738=((0.335)*sj6);
IkReal x2739=(cj0*r00);
IkReal x2740=((0.21066117)*x2731);
IkReal x2741=((0.17676784)*x2730);
IkReal x2742=(x2741+x2740);
evalcond[0]=(x2742+((x2735*x2738))+((x2734*x2737))+((x2732*x2734))+pz+((x2738*x2739)));
evalcond[1]=((((-1.0)*x2733*x2737))+(((0.21066117)*x2730))+((x2735*x2736))+((x2736*x2739))+(((-1.0)*x2732*x2733))+((cj0*px))+((py*sj0))+(((-0.17676784)*x2731)));
evalcond[2]=((((-1.0)*pz))+(((-1.0)*x2742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2743=cj1*cj1;
IkReal x2744=((2.98507462686567)*pz);
IkReal x2745=(cj1*sj1);
if( IKabs(((((-0.628839313432836)*x2745))+(((-1.0)*cj1*x2744))+(((-0.527665194029851)*x2743)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.628839313432836)+(((-0.628839313432836)*x2743))+((sj1*x2744))+(((0.527665194029851)*x2745)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.628839313432836)*x2745))+(((-1.0)*cj1*x2744))+(((-0.527665194029851)*x2743))))+IKsqr(((0.628839313432836)+(((-0.628839313432836)*x2743))+((sj1*x2744))+(((0.527665194029851)*x2745))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.628839313432836)*x2745))+(((-1.0)*cj1*x2744))+(((-0.527665194029851)*x2743))), ((0.628839313432836)+(((-0.628839313432836)*x2743))+((sj1*x2744))+(((0.527665194029851)*x2745))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x2746=IKsin(j2);
IkReal x2747=IKcos(j2);
IkReal x2748=((1.0)*cj6);
IkReal x2749=(cj0*r01);
IkReal x2750=(r11*sj0);
IkReal x2751=((9.3e-7)*sj6);
IkReal x2752=((9.3e-7)*cj6);
IkReal x2753=(r10*sj0);
IkReal x2754=(cj0*r00);
IkReal x2755=((1.0)*sj6);
IkReal x2756=(cj1*x2746);
IkReal x2757=(cj1*x2747);
IkReal x2758=(sj1*x2747);
IkReal x2759=(sj1*x2746);
IkReal x2760=((1.0)*x2758);
evalcond[0]=(x2757+x2759);
evalcond[1]=(x2756+(((-1.0)*x2760)));
evalcond[2]=((((-0.21066117)*sj1))+(((-0.335)*x2756))+(((-1.0)*pz))+(((-0.17676784)*cj1))+(((0.335)*x2758)));
evalcond[3]=(x2756+(((-1.0)*x2753*x2755))+(((-1.0)*x2760))+(((-1.0)*x2748*x2750))+(((-1.0)*x2748*x2749))+(((-1.0)*x2754*x2755)));
evalcond[4]=(((x2749*x2751))+(((-1.0)*x2752*x2754))+(((-1.0)*x2752*x2753))+(((-0.21066117)*cj1))+(((0.17676784)*sj1))+((x2750*x2751))+(((-1.0)*py*sj0))+(((0.335)*x2757))+(((0.335)*x2759))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2761=((1.0)*cj6);
CheckValue<IkReal> x2762 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x2761))+((r11*sj6)))),IkReal((((r01*sj6))+(((-1.0)*r00*x2761)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2762.valid){
continue;
}
CheckValue<IkReal> x2763=IKPowWithIntegerCheck(IKsign(((((-2000.0)*cj6*rxp0_2))+(((2000.0)*rxp1_2*sj6)))),-1);
if(!x2763.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2762.value)+(((1.5707963267949)*(x2763.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x2764=IKcos(j0);
IkReal x2765=IKsin(j0);
IkReal x2766=((1.0)*r01);
IkReal x2767=(cj6*x2764);
IkReal x2768=(cj6*x2765);
IkReal x2769=((1.0)*x2765);
IkReal x2770=(sj6*x2765);
IkReal x2771=(r11*sj6*x2764);
evalcond[0]=(((r10*sj6*x2764))+(((-1.0)*r00*sj6*x2769))+(((-1.0)*x2766*x2768))+((r11*x2767)));
evalcond[1]=(x2771+(((-1.0)*r10*x2767))+(((-1.0)*x2766*x2770))+((r00*x2768)));
evalcond[2]=((-0.0005)+(((-9.3e-7)*x2771))+(((-9.3e-7)*r00*x2768))+(((-1.0)*px*x2769))+(((9.3e-7)*r01*x2770))+((py*x2764))+(((9.3e-7)*r10*x2767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2772=((2.17380622775013e-6)*sj0);
IkReal x2773=(cj6*r10);
IkReal x2774=(r11*sj6);
IkReal x2775=(cj0*px);
IkReal x2776=((2.59061016580351e-6)*sj0);
IkReal x2777=(py*sj0);
IkReal x2778=(cj0*cj6*r00);
IkReal x2779=(cj0*r01*sj6);
if( IKabs(((((-2.78560232882098)*pz))+(((-1.0)*x2772*x2774))+(((2.17380622775013e-6)*x2778))+(((-2.17380622775013e-6)*x2779))+(((2.33742605134422)*x2777))+(((2.33742605134422)*x2775))+((x2772*x2773)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2774*x2776))+(((-2.59061016580351e-6)*x2778))+(((-2.78560232882098)*x2777))+(((-2.78560232882098)*x2775))+(((-2.33742605134422)*pz))+(((-1.0)*x2773*x2776))+(((2.59061016580351e-6)*x2779)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.78560232882098)*pz))+(((-1.0)*x2772*x2774))+(((2.17380622775013e-6)*x2778))+(((-2.17380622775013e-6)*x2779))+(((2.33742605134422)*x2777))+(((2.33742605134422)*x2775))+((x2772*x2773))))+IKsqr((((x2774*x2776))+(((-2.59061016580351e-6)*x2778))+(((-2.78560232882098)*x2777))+(((-2.78560232882098)*x2775))+(((-2.33742605134422)*pz))+(((-1.0)*x2773*x2776))+(((2.59061016580351e-6)*x2779))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.78560232882098)*pz))+(((-1.0)*x2772*x2774))+(((2.17380622775013e-6)*x2778))+(((-2.17380622775013e-6)*x2779))+(((2.33742605134422)*x2777))+(((2.33742605134422)*x2775))+((x2772*x2773))), (((x2774*x2776))+(((-2.59061016580351e-6)*x2778))+(((-2.78560232882098)*x2777))+(((-2.78560232882098)*x2775))+(((-2.33742605134422)*pz))+(((-1.0)*x2773*x2776))+(((2.59061016580351e-6)*x2779))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[3];
IkReal x2780=IKcos(j1);
IkReal x2781=IKsin(j1);
IkReal x2782=(cj0*r01);
IkReal x2783=((9.3e-7)*sj6);
IkReal x2784=((0.335)*cj6);
IkReal x2785=(r10*sj0);
IkReal x2786=((9.3e-7)*cj6);
IkReal x2787=(r11*sj0);
IkReal x2788=((0.335)*sj6);
IkReal x2789=(cj0*r00);
IkReal x2790=((0.21066117)*x2781);
IkReal x2791=((0.17676784)*x2780);
IkReal x2792=(x2790+x2791);
evalcond[0]=(x2792+((x2785*x2788))+((x2784*x2787))+((x2782*x2784))+pz+((x2788*x2789)));
evalcond[1]=((((0.21066117)*x2780))+((x2785*x2786))+(((-1.0)*x2783*x2787))+(((-1.0)*x2782*x2783))+(((-0.17676784)*x2781))+((cj0*px))+((py*sj0))+((x2786*x2789)));
evalcond[2]=((((-1.0)*x2792))+(((-1.0)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2793=cj1*cj1;
IkReal x2794=((2.98507462686567)*pz);
IkReal x2795=(cj1*sj1);
if( IKabs(((((-0.628839313432836)*x2795))+(((-1.0)*cj1*x2794))+(((-0.527665194029851)*x2793)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.628839313432836)+(((0.527665194029851)*x2795))+(((-0.628839313432836)*x2793))+((sj1*x2794)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.628839313432836)*x2795))+(((-1.0)*cj1*x2794))+(((-0.527665194029851)*x2793))))+IKsqr(((0.628839313432836)+(((0.527665194029851)*x2795))+(((-0.628839313432836)*x2793))+((sj1*x2794))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.628839313432836)*x2795))+(((-1.0)*cj1*x2794))+(((-0.527665194029851)*x2793))), ((0.628839313432836)+(((0.527665194029851)*x2795))+(((-0.628839313432836)*x2793))+((sj1*x2794))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x2796=IKsin(j2);
IkReal x2797=IKcos(j2);
IkReal x2798=((1.0)*cj6);
IkReal x2799=(cj0*r01);
IkReal x2800=(r11*sj0);
IkReal x2801=((9.3e-7)*sj6);
IkReal x2802=((9.3e-7)*cj6);
IkReal x2803=(r10*sj0);
IkReal x2804=(cj0*r00);
IkReal x2805=((1.0)*sj6);
IkReal x2806=(cj1*x2796);
IkReal x2807=(cj1*x2797);
IkReal x2808=(sj1*x2797);
IkReal x2809=(sj1*x2796);
IkReal x2810=((1.0)*x2808);
evalcond[0]=(x2809+x2807);
evalcond[1]=((((-1.0)*x2810))+x2806);
evalcond[2]=((((-0.21066117)*sj1))+(((-1.0)*pz))+(((-0.17676784)*cj1))+(((0.335)*x2808))+(((-0.335)*x2806)));
evalcond[3]=((((-1.0)*x2803*x2805))+(((-1.0)*x2798*x2799))+(((-1.0)*x2810))+(((-1.0)*x2804*x2805))+(((-1.0)*x2798*x2800))+x2806);
evalcond[4]=((((-0.21066117)*cj1))+(((0.17676784)*sj1))+(((-1.0)*x2802*x2803))+(((-1.0)*x2802*x2804))+(((0.335)*x2809))+(((0.335)*x2807))+((x2799*x2801))+(((-1.0)*py*sj0))+((x2800*x2801))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j5, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x2811=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2811);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2811);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4=0;
sj4=0;
cj4=1.0;
j5=3.14159265358979;
sj5=0;
cj5=-1.0;
IkReal x2812=(rxp1_2*sj6);
IkReal x2813=(cj6*rxp0_2);
j0eval[0]=((((-1.0)*x2812))+x2813);
j0eval[1]=IKsign(((((-2000.0)*x2812))+(((2000.0)*x2813))));
j0eval[2]=((sj6*sj6)+(cj6*cj6));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x2814=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2814);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2814);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4=0;
sj4=0;
cj4=1.0;
j5=3.14159265358979;
sj5=0;
cj5=-1.0;
IkReal x2815=(cj6*rxp1_2);
IkReal x2816=(rxp0_2*sj6);
j0eval[0]=((((775193.798449612)*x2815))+(((775193.798449612)*x2816))+r22);
j0eval[1]=IKsign(((((2000.0)*x2816))+(((2000.0)*x2815))+(((0.00258)*r22))));
j0eval[2]=((sj6*sj6)+(cj6*cj6));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2817=IKPowWithIntegerCheck(IKsign(((((2000.0)*rxp0_2*sj6))+(((0.00258)*r22))+(((2000.0)*cj6*rxp1_2)))),-1);
if(!x2817.valid){
continue;
}
CheckValue<IkReal> x2818 = IKatan2WithCheck(IkReal((((r10*sj6))+((cj6*r11)))),IkReal((((r00*sj6))+((cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2818.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2817.value)))+(x2818.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x2819=IKcos(j0);
IkReal x2820=IKsin(j0);
IkReal x2821=((1.29e-6)*sj6);
IkReal x2822=((1.0)*sj6);
IkReal x2823=(r11*x2819);
IkReal x2824=(r01*x2820);
IkReal x2825=(cj6*r00*x2820);
IkReal x2826=(cj6*r10*x2819);
evalcond[0]=(((cj6*x2823))+(((-1.0)*r00*x2820*x2822))+((r10*sj6*x2819))+(((-1.0)*cj6*x2824)));
evalcond[1]=(((sj6*x2824))+(((-1.0)*x2825))+(((-1.0)*x2822*x2823))+x2826);
evalcond[2]=((-0.0005)+((x2821*x2823))+(((-1.0)*x2821*x2824))+(((-1.0)*px*x2820))+(((-1.29e-6)*x2826))+(((1.29e-6)*x2825))+((py*x2819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2827=((3.59342700417906e-6)*sj0);
IkReal x2828=(cj6*r10);
IkReal x2829=(r11*sj6);
IkReal x2830=(cj0*px);
IkReal x2831=((3.01527960623405e-6)*sj0);
IkReal x2832=(py*sj0);
IkReal x2833=(cj0*cj6*r00);
IkReal x2834=(cj0*r01*sj6);
if( IKabs((((x2829*x2831))+(((2.33742605134422)*x2830))+(((2.33742605134422)*x2832))+(((-2.78560232882098)*pz))+(((3.01527960623405e-6)*x2834))+(((-1.0)*x2828*x2831))+(((-3.01527960623405e-6)*x2833)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.78560232882098)*x2830))+(((-2.78560232882098)*x2832))+(((-2.33742605134422)*pz))+(((-3.59342700417906e-6)*x2834))+((x2827*x2828))+(((3.59342700417906e-6)*x2833))+(((-1.0)*x2827*x2829)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2829*x2831))+(((2.33742605134422)*x2830))+(((2.33742605134422)*x2832))+(((-2.78560232882098)*pz))+(((3.01527960623405e-6)*x2834))+(((-1.0)*x2828*x2831))+(((-3.01527960623405e-6)*x2833))))+IKsqr(((((-2.78560232882098)*x2830))+(((-2.78560232882098)*x2832))+(((-2.33742605134422)*pz))+(((-3.59342700417906e-6)*x2834))+((x2827*x2828))+(((3.59342700417906e-6)*x2833))+(((-1.0)*x2827*x2829))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((x2829*x2831))+(((2.33742605134422)*x2830))+(((2.33742605134422)*x2832))+(((-2.78560232882098)*pz))+(((3.01527960623405e-6)*x2834))+(((-1.0)*x2828*x2831))+(((-3.01527960623405e-6)*x2833))), ((((-2.78560232882098)*x2830))+(((-2.78560232882098)*x2832))+(((-2.33742605134422)*pz))+(((-3.59342700417906e-6)*x2834))+((x2827*x2828))+(((3.59342700417906e-6)*x2833))+(((-1.0)*x2827*x2829))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[3];
IkReal x2835=IKcos(j1);
IkReal x2836=IKsin(j1);
IkReal x2837=((0.335)*cj6);
IkReal x2838=(cj0*r01);
IkReal x2839=((1.29e-6)*sj0);
IkReal x2840=(cj0*r00);
IkReal x2841=((0.335)*sj6);
IkReal x2842=((0.21066117)*x2836);
IkReal x2843=((0.17676784)*x2835);
IkReal x2844=(x2842+x2843);
evalcond[0]=(((x2840*x2841))+((r10*sj0*x2841))+((r11*sj0*x2837))+pz+x2844+((x2837*x2838)));
evalcond[1]=(((r11*sj6*x2839))+(((-1.29e-6)*cj6*x2840))+(((-0.17676784)*x2836))+(((1.29e-6)*sj6*x2838))+(((0.21066117)*x2835))+(((-1.0)*cj6*r10*x2839))+((cj0*px))+((py*sj0)));
evalcond[2]=((((-1.0)*pz))+(((-1.0)*x2844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2845=cj1*cj1;
IkReal x2846=((2.98507462686567)*pz);
IkReal x2847=(cj1*sj1);
if( IKabs(((((-0.527665194029851)*x2845))+(((-0.628839313432836)*x2847))+(((-1.0)*cj1*x2846)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.628839313432836)+((sj1*x2846))+(((-0.628839313432836)*x2845))+(((0.527665194029851)*x2847)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.527665194029851)*x2845))+(((-0.628839313432836)*x2847))+(((-1.0)*cj1*x2846))))+IKsqr(((0.628839313432836)+((sj1*x2846))+(((-0.628839313432836)*x2845))+(((0.527665194029851)*x2847))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.527665194029851)*x2845))+(((-0.628839313432836)*x2847))+(((-1.0)*cj1*x2846))), ((0.628839313432836)+((sj1*x2846))+(((-0.628839313432836)*x2845))+(((0.527665194029851)*x2847))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x2848=IKsin(j2);
IkReal x2849=IKcos(j2);
IkReal x2850=(cj0*cj6);
IkReal x2851=((1.29e-6)*sj6);
IkReal x2852=(r11*sj0);
IkReal x2853=(r10*sj0);
IkReal x2854=((1.0)*cj0);
IkReal x2855=(cj1*x2848);
IkReal x2856=(cj1*x2849);
IkReal x2857=(sj1*x2849);
IkReal x2858=(sj1*x2848);
IkReal x2859=((1.0)*x2857);
evalcond[0]=(x2858+x2856);
evalcond[1]=(x2855+(((-1.0)*x2859)));
evalcond[2]=((((-0.21066117)*sj1))+(((0.335)*x2857))+(((-1.0)*pz))+(((-0.17676784)*cj1))+(((-0.335)*x2855)));
evalcond[3]=((((-1.0)*sj6*x2853))+(((-1.0)*r00*sj6*x2854))+(((-1.0)*cj6*x2852))+x2855+(((-1.0)*x2859))+(((-1.0)*r01*x2850)));
evalcond[4]=((((1.29e-6)*r00*x2850))+(((-0.21066117)*cj1))+(((-1.0)*px*x2854))+(((0.17676784)*sj1))+(((-1.0)*x2851*x2852))+(((0.335)*x2856))+(((0.335)*x2858))+(((1.29e-6)*cj6*x2853))+(((-1.0)*py*sj0))+(((-1.0)*cj0*r01*x2851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2860=((1.0)*sj6);
CheckValue<IkReal> x2861 = IKatan2WithCheck(IkReal((((cj6*r10))+(((-1.0)*r11*x2860)))),IkReal(((((-1.0)*r01*x2860))+((cj6*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2861.valid){
continue;
}
CheckValue<IkReal> x2862=IKPowWithIntegerCheck(IKsign(((((-2000.0)*rxp1_2*sj6))+(((2000.0)*cj6*rxp0_2)))),-1);
if(!x2862.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2861.value)+(((1.5707963267949)*(x2862.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x2863=IKcos(j0);
IkReal x2864=IKsin(j0);
IkReal x2865=((1.29e-6)*sj6);
IkReal x2866=((1.0)*sj6);
IkReal x2867=(r11*x2863);
IkReal x2868=(r01*x2864);
IkReal x2869=(cj6*r00*x2864);
IkReal x2870=(cj6*r10*x2863);
evalcond[0]=((((-1.0)*cj6*x2868))+((cj6*x2867))+((r10*sj6*x2863))+(((-1.0)*r00*x2864*x2866)));
evalcond[1]=((((-1.0)*x2869))+((sj6*x2868))+x2870+(((-1.0)*x2866*x2867)));
evalcond[2]=((-0.0005)+((x2865*x2867))+(((-1.29e-6)*x2870))+(((-1.0)*px*x2864))+(((-1.0)*x2865*x2868))+(((1.29e-6)*x2869))+((py*x2863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2871=((3.59342700417906e-6)*sj0);
IkReal x2872=(cj6*r10);
IkReal x2873=(r11*sj6);
IkReal x2874=(cj0*px);
IkReal x2875=((3.01527960623405e-6)*sj0);
IkReal x2876=(py*sj0);
IkReal x2877=(cj0*cj6*r00);
IkReal x2878=(cj0*r01*sj6);
if( IKabs(((((-3.01527960623405e-6)*x2877))+(((-2.78560232882098)*pz))+(((2.33742605134422)*x2874))+(((2.33742605134422)*x2876))+((x2873*x2875))+(((-1.0)*x2872*x2875))+(((3.01527960623405e-6)*x2878)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.33742605134422)*pz))+(((-1.0)*x2871*x2873))+(((-3.59342700417906e-6)*x2878))+(((3.59342700417906e-6)*x2877))+((x2871*x2872))+(((-2.78560232882098)*x2874))+(((-2.78560232882098)*x2876)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.01527960623405e-6)*x2877))+(((-2.78560232882098)*pz))+(((2.33742605134422)*x2874))+(((2.33742605134422)*x2876))+((x2873*x2875))+(((-1.0)*x2872*x2875))+(((3.01527960623405e-6)*x2878))))+IKsqr(((((-2.33742605134422)*pz))+(((-1.0)*x2871*x2873))+(((-3.59342700417906e-6)*x2878))+(((3.59342700417906e-6)*x2877))+((x2871*x2872))+(((-2.78560232882098)*x2874))+(((-2.78560232882098)*x2876))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-3.01527960623405e-6)*x2877))+(((-2.78560232882098)*pz))+(((2.33742605134422)*x2874))+(((2.33742605134422)*x2876))+((x2873*x2875))+(((-1.0)*x2872*x2875))+(((3.01527960623405e-6)*x2878))), ((((-2.33742605134422)*pz))+(((-1.0)*x2871*x2873))+(((-3.59342700417906e-6)*x2878))+(((3.59342700417906e-6)*x2877))+((x2871*x2872))+(((-2.78560232882098)*x2874))+(((-2.78560232882098)*x2876))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[3];
IkReal x2879=IKcos(j1);
IkReal x2880=IKsin(j1);
IkReal x2881=((0.335)*cj6);
IkReal x2882=(cj0*r01);
IkReal x2883=((1.29e-6)*sj0);
IkReal x2884=(cj0*r00);
IkReal x2885=((0.335)*sj6);
IkReal x2886=((0.21066117)*x2880);
IkReal x2887=((0.17676784)*x2879);
IkReal x2888=(x2886+x2887);
evalcond[0]=(((x2884*x2885))+((r10*sj0*x2885))+pz+((x2881*x2882))+x2888+((r11*sj0*x2881)));
evalcond[1]=((((1.29e-6)*sj6*x2882))+(((-1.29e-6)*cj6*x2884))+(((-1.0)*cj6*r10*x2883))+(((0.21066117)*x2879))+((r11*sj6*x2883))+((cj0*px))+((py*sj0))+(((-0.17676784)*x2880)));
evalcond[2]=((((-1.0)*pz))+(((-1.0)*x2888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2889=cj1*cj1;
IkReal x2890=((2.98507462686567)*pz);
IkReal x2891=(cj1*sj1);
if( IKabs(((((-0.527665194029851)*x2889))+(((-0.628839313432836)*x2891))+(((-1.0)*cj1*x2890)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.628839313432836)+((sj1*x2890))+(((-0.628839313432836)*x2889))+(((0.527665194029851)*x2891)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.527665194029851)*x2889))+(((-0.628839313432836)*x2891))+(((-1.0)*cj1*x2890))))+IKsqr(((0.628839313432836)+((sj1*x2890))+(((-0.628839313432836)*x2889))+(((0.527665194029851)*x2891))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.527665194029851)*x2889))+(((-0.628839313432836)*x2891))+(((-1.0)*cj1*x2890))), ((0.628839313432836)+((sj1*x2890))+(((-0.628839313432836)*x2889))+(((0.527665194029851)*x2891))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x2892=IKsin(j2);
IkReal x2893=IKcos(j2);
IkReal x2894=(cj0*cj6);
IkReal x2895=((1.29e-6)*sj6);
IkReal x2896=(r11*sj0);
IkReal x2897=(r10*sj0);
IkReal x2898=((1.0)*cj0);
IkReal x2899=(cj1*x2892);
IkReal x2900=(cj1*x2893);
IkReal x2901=(sj1*x2893);
IkReal x2902=(sj1*x2892);
IkReal x2903=((1.0)*x2901);
evalcond[0]=(x2902+x2900);
evalcond[1]=((((-1.0)*x2903))+x2899);
evalcond[2]=((((-0.21066117)*sj1))+(((-1.0)*pz))+(((-0.335)*x2899))+(((-0.17676784)*cj1))+(((0.335)*x2901)));
evalcond[3]=((((-1.0)*sj6*x2897))+(((-1.0)*x2903))+(((-1.0)*cj6*x2896))+(((-1.0)*r01*x2894))+x2899+(((-1.0)*r00*sj6*x2898)));
evalcond[4]=((((-0.21066117)*cj1))+(((1.29e-6)*cj6*x2897))+(((-1.0)*cj0*r01*x2895))+(((-1.0)*x2895*x2896))+(((0.17676784)*sj1))+(((1.29e-6)*r00*x2894))+(((-1.0)*px*x2898))+(((-1.0)*py*sj0))+(((0.335)*x2902))+(((0.335)*x2900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x2904=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2904);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2904);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4=1.5707963267949;
sj4=1.0;
cj4=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
IkReal x2905=(rxp1_2*sj6);
IkReal x2906=(cj6*rxp0_2);
j0eval[0]=((((-1.0)*x2905))+x2906);
j0eval[1]=IKsign(((((-2000.0)*x2905))+(((2000.0)*x2906))));
j0eval[2]=((sj6*sj6)+(cj6*cj6));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x2907=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2907);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2907);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4=1.5707963267949;
sj4=1.0;
cj4=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
IkReal x2908=(rxp0_2*sj6);
IkReal x2909=(cj6*rxp1_2);
j0eval[0]=((((6.66667466667627)*x2908))+(((6.66667466667627)*x2909))+(((-1.0)*r22)));
j0eval[1]=IKsign(((((2000.0)*x2908))+(((2000.0)*x2909))+(((-299.99964)*r22))));
j0eval[2]=((sj6*sj6)+(cj6*cj6));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2910=IKPowWithIntegerCheck(IKsign(((((2000.0)*rxp0_2*sj6))+(((-299.99964)*r22))+(((2000.0)*cj6*rxp1_2)))),-1);
if(!x2910.valid){
continue;
}
CheckValue<IkReal> x2911 = IKatan2WithCheck(IkReal((((r10*sj6))+((cj6*r11)))),IkReal((((r00*sj6))+((cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2911.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2910.value)))+(x2911.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x2912=IKcos(j0);
IkReal x2913=IKsin(j0);
IkReal x2914=(cj6*r00);
IkReal x2915=(r01*sj6);
IkReal x2916=((1.0)*x2913);
IkReal x2917=((0.14999982)*x2913);
IkReal x2918=(cj6*x2912);
IkReal x2919=(r11*sj6*x2912);
evalcond[0]=(((r11*x2918))+((r10*sj6*x2912))+(((-1.0)*r00*sj6*x2916))+(((-1.0)*cj6*r01*x2916)));
evalcond[1]=((((-1.0)*x2914*x2916))+((x2913*x2915))+(((-1.0)*x2919))+((r10*x2918)));
evalcond[2]=((-0.0005)+((py*x2912))+(((-1.0)*px*x2916))+(((-1.0)*x2914*x2917))+((x2915*x2917))+(((0.14999982)*r10*x2918))+(((-0.14999982)*x2919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2920=((0.350613486964944)*cj6);
IkReal x2921=(r10*sj0);
IkReal x2922=((0.417839847914728)*cj0);
IkReal x2923=(r01*sj6);
IkReal x2924=(cj0*px);
IkReal x2925=(py*sj0);
IkReal x2926=(r11*sj0*sj6);
if( IKabs((((cj0*r00*x2920))+(((-2.78560232882098)*pz))+((x2920*x2921))+(((2.33742605134422)*x2924))+(((2.33742605134422)*x2925))+(((-0.350613486964944)*x2926))+(((-0.350613486964944)*cj0*x2923)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.417839847914728)*x2926))+(((-2.33742605134422)*pz))+(((-0.417839847914728)*cj6*x2921))+(((-1.0)*cj6*r00*x2922))+((x2922*x2923))+(((-2.78560232882098)*x2925))+(((-2.78560232882098)*x2924)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj0*r00*x2920))+(((-2.78560232882098)*pz))+((x2920*x2921))+(((2.33742605134422)*x2924))+(((2.33742605134422)*x2925))+(((-0.350613486964944)*x2926))+(((-0.350613486964944)*cj0*x2923))))+IKsqr(((((0.417839847914728)*x2926))+(((-2.33742605134422)*pz))+(((-0.417839847914728)*cj6*x2921))+(((-1.0)*cj6*r00*x2922))+((x2922*x2923))+(((-2.78560232882098)*x2925))+(((-2.78560232882098)*x2924))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((cj0*r00*x2920))+(((-2.78560232882098)*pz))+((x2920*x2921))+(((2.33742605134422)*x2924))+(((2.33742605134422)*x2925))+(((-0.350613486964944)*x2926))+(((-0.350613486964944)*cj0*x2923))), ((((0.417839847914728)*x2926))+(((-2.33742605134422)*pz))+(((-0.417839847914728)*cj6*x2921))+(((-1.0)*cj6*r00*x2922))+((x2922*x2923))+(((-2.78560232882098)*x2925))+(((-2.78560232882098)*x2924))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[3];
IkReal x2927=IKcos(j1);
IkReal x2928=IKsin(j1);
IkReal x2929=(cj0*cj6);
IkReal x2930=((0.14999982)*sj0);
IkReal x2931=(cj0*sj6);
IkReal x2932=((0.335)*sj0);
IkReal x2933=((0.21066117)*x2928);
IkReal x2934=((0.17676784)*x2927);
IkReal x2935=(x2934+x2933);
evalcond[0]=(((r10*sj6*x2932))+((cj6*r11*x2932))+pz+(((0.335)*r01*x2929))+(((0.335)*r00*x2931))+x2935);
evalcond[1]=((((0.21066117)*x2927))+((cj6*r10*x2930))+(((0.14999982)*r00*x2929))+(((-1.0)*r11*sj6*x2930))+(((-0.14999982)*r01*x2931))+((cj0*px))+((py*sj0))+(((-0.17676784)*x2928)));
evalcond[2]=((((-1.0)*x2935))+(((-1.0)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2936=cj1*cj1;
IkReal x2937=((2.98507462686567)*pz);
IkReal x2938=(cj1*sj1);
if( IKabs(((((-0.527665194029851)*x2936))+(((-1.0)*cj1*x2937))+(((-0.628839313432836)*x2938)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.628839313432836)+((sj1*x2937))+(((0.527665194029851)*x2938))+(((-0.628839313432836)*x2936)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.527665194029851)*x2936))+(((-1.0)*cj1*x2937))+(((-0.628839313432836)*x2938))))+IKsqr(((0.628839313432836)+((sj1*x2937))+(((0.527665194029851)*x2938))+(((-0.628839313432836)*x2936))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.527665194029851)*x2936))+(((-1.0)*cj1*x2937))+(((-0.628839313432836)*x2938))), ((0.628839313432836)+((sj1*x2937))+(((0.527665194029851)*x2938))+(((-0.628839313432836)*x2936))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x2939=IKsin(j2);
IkReal x2940=IKcos(j2);
IkReal x2941=((0.14999982)*sj0);
IkReal x2942=((1.0)*cj6);
IkReal x2943=(cj0*r01);
IkReal x2944=((1.0)*sj0);
IkReal x2945=(cj0*r00);
IkReal x2946=(cj1*x2939);
IkReal x2947=(cj1*x2940);
IkReal x2948=(sj1*x2940);
IkReal x2949=(sj1*x2939);
IkReal x2950=((1.0)*x2948);
evalcond[0]=(x2949+x2947);
evalcond[1]=((((-1.0)*x2950))+x2946);
evalcond[2]=((((0.335)*x2948))+(((-0.21066117)*sj1))+(((-0.335)*x2946))+(((-1.0)*pz))+(((-0.17676784)*cj1)));
evalcond[3]=((((-1.0)*x2950))+(((-1.0)*sj6*x2945))+(((-1.0)*x2942*x2943))+(((-1.0)*r11*sj0*x2942))+x2946+(((-1.0)*r10*sj6*x2944)));
evalcond[4]=(((r11*sj6*x2941))+(((0.335)*x2947))+(((0.335)*x2949))+(((-0.21066117)*cj1))+(((-0.14999982)*cj6*x2945))+(((0.17676784)*sj1))+(((0.14999982)*sj6*x2943))+(((-1.0)*cj6*r10*x2941))+(((-1.0)*py*x2944))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2951=((1.0)*sj6);
CheckValue<IkReal> x2952 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x2951))+((cj6*r10)))),IkReal(((((-1.0)*r01*x2951))+((cj6*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2952.valid){
continue;
}
CheckValue<IkReal> x2953=IKPowWithIntegerCheck(IKsign(((((-2000.0)*rxp1_2*sj6))+(((2000.0)*cj6*rxp0_2)))),-1);
if(!x2953.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2952.value)+(((1.5707963267949)*(x2953.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x2954=IKcos(j0);
IkReal x2955=IKsin(j0);
IkReal x2956=(cj6*r00);
IkReal x2957=(r01*sj6);
IkReal x2958=((1.0)*x2955);
IkReal x2959=((0.14999982)*x2955);
IkReal x2960=(cj6*x2954);
IkReal x2961=(r11*sj6*x2954);
evalcond[0]=((((-1.0)*r00*sj6*x2958))+((r11*x2960))+(((-1.0)*cj6*r01*x2958))+((r10*sj6*x2954)));
evalcond[1]=((((-1.0)*x2961))+((r10*x2960))+(((-1.0)*x2956*x2958))+((x2955*x2957)));
evalcond[2]=((-0.0005)+(((-1.0)*px*x2958))+(((-0.14999982)*x2961))+(((0.14999982)*r10*x2960))+((x2957*x2959))+((py*x2954))+(((-1.0)*x2956*x2959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2962=((0.350613486964944)*cj6);
IkReal x2963=(r10*sj0);
IkReal x2964=((0.417839847914728)*cj0);
IkReal x2965=(r01*sj6);
IkReal x2966=(cj0*px);
IkReal x2967=(py*sj0);
IkReal x2968=(r11*sj0*sj6);
if( IKabs(((((2.33742605134422)*x2967))+(((2.33742605134422)*x2966))+(((-2.78560232882098)*pz))+((cj0*r00*x2962))+((x2962*x2963))+(((-0.350613486964944)*x2968))+(((-0.350613486964944)*cj0*x2965)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.417839847914728)*cj6*x2963))+(((-1.0)*cj6*r00*x2964))+(((-2.33742605134422)*pz))+(((-2.78560232882098)*x2967))+(((-2.78560232882098)*x2966))+(((0.417839847914728)*x2968))+((x2964*x2965)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.33742605134422)*x2967))+(((2.33742605134422)*x2966))+(((-2.78560232882098)*pz))+((cj0*r00*x2962))+((x2962*x2963))+(((-0.350613486964944)*x2968))+(((-0.350613486964944)*cj0*x2965))))+IKsqr(((((-0.417839847914728)*cj6*x2963))+(((-1.0)*cj6*r00*x2964))+(((-2.33742605134422)*pz))+(((-2.78560232882098)*x2967))+(((-2.78560232882098)*x2966))+(((0.417839847914728)*x2968))+((x2964*x2965))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.33742605134422)*x2967))+(((2.33742605134422)*x2966))+(((-2.78560232882098)*pz))+((cj0*r00*x2962))+((x2962*x2963))+(((-0.350613486964944)*x2968))+(((-0.350613486964944)*cj0*x2965))), ((((-0.417839847914728)*cj6*x2963))+(((-1.0)*cj6*r00*x2964))+(((-2.33742605134422)*pz))+(((-2.78560232882098)*x2967))+(((-2.78560232882098)*x2966))+(((0.417839847914728)*x2968))+((x2964*x2965))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[3];
IkReal x2969=IKcos(j1);
IkReal x2970=IKsin(j1);
IkReal x2971=(cj0*cj6);
IkReal x2972=((0.14999982)*sj0);
IkReal x2973=(cj0*sj6);
IkReal x2974=((0.335)*sj0);
IkReal x2975=((0.21066117)*x2970);
IkReal x2976=((0.17676784)*x2969);
IkReal x2977=(x2976+x2975);
evalcond[0]=(((r10*sj6*x2974))+((cj6*r11*x2974))+(((0.335)*r00*x2973))+(((0.335)*r01*x2971))+pz+x2977);
evalcond[1]=(((cj6*r10*x2972))+(((-0.14999982)*r01*x2973))+(((-1.0)*r11*sj6*x2972))+((cj0*px))+((py*sj0))+(((0.21066117)*x2969))+(((-0.17676784)*x2970))+(((0.14999982)*r00*x2971)));
evalcond[2]=((((-1.0)*pz))+(((-1.0)*x2977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2978=cj1*cj1;
IkReal x2979=((2.98507462686567)*pz);
IkReal x2980=(cj1*sj1);
if( IKabs(((((-0.527665194029851)*x2978))+(((-0.628839313432836)*x2980))+(((-1.0)*cj1*x2979)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.628839313432836)+(((-0.628839313432836)*x2978))+(((0.527665194029851)*x2980))+((sj1*x2979)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.527665194029851)*x2978))+(((-0.628839313432836)*x2980))+(((-1.0)*cj1*x2979))))+IKsqr(((0.628839313432836)+(((-0.628839313432836)*x2978))+(((0.527665194029851)*x2980))+((sj1*x2979))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.527665194029851)*x2978))+(((-0.628839313432836)*x2980))+(((-1.0)*cj1*x2979))), ((0.628839313432836)+(((-0.628839313432836)*x2978))+(((0.527665194029851)*x2980))+((sj1*x2979))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x2981=IKsin(j2);
IkReal x2982=IKcos(j2);
IkReal x2983=((0.14999982)*sj0);
IkReal x2984=((1.0)*cj6);
IkReal x2985=(cj0*r01);
IkReal x2986=((1.0)*sj0);
IkReal x2987=(cj0*r00);
IkReal x2988=(cj1*x2981);
IkReal x2989=(cj1*x2982);
IkReal x2990=(sj1*x2982);
IkReal x2991=(sj1*x2981);
IkReal x2992=((1.0)*x2990);
evalcond[0]=(x2989+x2991);
evalcond[1]=((((-1.0)*x2992))+x2988);
evalcond[2]=((((-0.21066117)*sj1))+(((-0.335)*x2988))+(((-1.0)*pz))+(((0.335)*x2990))+(((-0.17676784)*cj1)));
evalcond[3]=((((-1.0)*x2992))+(((-1.0)*sj6*x2987))+(((-1.0)*x2984*x2985))+(((-1.0)*r11*sj0*x2984))+(((-1.0)*r10*sj6*x2986))+x2988);
evalcond[4]=((((-0.14999982)*cj6*x2987))+(((-1.0)*cj6*r10*x2983))+(((-0.21066117)*cj1))+(((-1.0)*py*x2986))+(((0.17676784)*sj1))+(((0.335)*x2989))+((r11*sj6*x2983))+(((0.335)*x2991))+(((-1.0)*cj0*px))+(((0.14999982)*sj6*x2985)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x2993=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2993);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2993);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4=1.5707963267949;
sj4=1.0;
cj4=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
IkReal x2994=(cj6*rxp0_2);
IkReal x2995=(rxp1_2*sj6);
j0eval[0]=((((-1.0)*x2994))+x2995);
j0eval[1]=((sj6*sj6)+(cj6*cj6));
j0eval[2]=IKsign(((((-2000.0)*x2994))+(((2000.0)*x2995))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x2996=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2996);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2996);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4=1.5707963267949;
sj4=1.0;
cj4=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
IkReal x2997=(cj6*rxp1_2);
IkReal x2998=(rxp0_2*sj6);
j0eval[0]=(r22+(((6.66665866667627)*x2997))+(((6.66665866667627)*x2998)));
j0eval[1]=((sj6*sj6)+(cj6*cj6));
j0eval[2]=IKsign(((((300.00036)*r22))+(((2000.0)*x2997))+(((2000.0)*x2998))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2999=IKPowWithIntegerCheck(IKsign(((((300.00036)*r22))+(((2000.0)*rxp0_2*sj6))+(((2000.0)*cj6*rxp1_2)))),-1);
if(!x2999.valid){
continue;
}
CheckValue<IkReal> x3000 = IKatan2WithCheck(IkReal((((r10*sj6))+((cj6*r11)))),IkReal((((r00*sj6))+((cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3000.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2999.value)))+(x3000.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3001=IKcos(j0);
IkReal x3002=IKsin(j0);
IkReal x3003=((1.0)*cj6);
IkReal x3004=((1.0)*sj6);
IkReal x3005=(r01*x3002);
IkReal x3006=(r00*x3002);
IkReal x3007=(cj6*x3001);
IkReal x3008=(r10*x3001);
IkReal x3009=(r11*sj6*x3001);
evalcond[0]=(((sj6*x3008))+(((-1.0)*x3003*x3005))+(((-1.0)*x3004*x3006))+((r11*x3007)));
evalcond[1]=(x3009+(((-1.0)*x3003*x3008))+((cj6*x3006))+(((-1.0)*x3004*x3005)));
evalcond[2]=((-0.0005)+(((0.15000018)*cj6*x3006))+(((-0.15000018)*sj6*x3005))+(((0.15000018)*x3009))+(((-1.0)*px*x3002))+(((-0.15000018)*r10*x3007))+((py*x3001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3010=(cj0*px);
IkReal x3011=(py*sj0);
IkReal x3012=(r11*sj0*sj6);
IkReal x3013=(cj0*cj6*r00);
IkReal x3014=(cj6*r10*sj0);
IkReal x3015=(cj0*r01*sj6);
if( IKabs(((((-2.78560232882098)*pz))+(((0.350614328438323)*x3012))+(((0.350614328438323)*x3015))+(((-0.350614328438323)*x3013))+(((-0.350614328438323)*x3014))+(((2.33742605134422)*x3010))+(((2.33742605134422)*x3011)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.78560232882098)*x3010))+(((-2.78560232882098)*x3011))+(((-2.33742605134422)*pz))+(((-0.417840850731566)*x3015))+(((-0.417840850731566)*x3012))+(((0.417840850731566)*x3013))+(((0.417840850731566)*x3014)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.78560232882098)*pz))+(((0.350614328438323)*x3012))+(((0.350614328438323)*x3015))+(((-0.350614328438323)*x3013))+(((-0.350614328438323)*x3014))+(((2.33742605134422)*x3010))+(((2.33742605134422)*x3011))))+IKsqr(((((-2.78560232882098)*x3010))+(((-2.78560232882098)*x3011))+(((-2.33742605134422)*pz))+(((-0.417840850731566)*x3015))+(((-0.417840850731566)*x3012))+(((0.417840850731566)*x3013))+(((0.417840850731566)*x3014))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.78560232882098)*pz))+(((0.350614328438323)*x3012))+(((0.350614328438323)*x3015))+(((-0.350614328438323)*x3013))+(((-0.350614328438323)*x3014))+(((2.33742605134422)*x3010))+(((2.33742605134422)*x3011))), ((((-2.78560232882098)*x3010))+(((-2.78560232882098)*x3011))+(((-2.33742605134422)*pz))+(((-0.417840850731566)*x3015))+(((-0.417840850731566)*x3012))+(((0.417840850731566)*x3013))+(((0.417840850731566)*x3014))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[3];
IkReal x3016=IKcos(j1);
IkReal x3017=IKsin(j1);
IkReal x3018=(cj0*r01);
IkReal x3019=((0.335)*cj6);
IkReal x3020=((0.15000018)*sj6);
IkReal x3021=(r11*sj0);
IkReal x3022=((0.15000018)*cj6);
IkReal x3023=(cj0*r00);
IkReal x3024=(r10*sj0);
IkReal x3025=((0.335)*sj6);
IkReal x3026=((0.21066117)*x3017);
IkReal x3027=((0.17676784)*x3016);
IkReal x3028=(x3027+x3026);
evalcond[0]=(((x3019*x3021))+x3028+((x3018*x3019))+pz+((x3024*x3025))+((x3023*x3025)));
evalcond[1]=((((0.21066117)*x3016))+((x3020*x3021))+(((-0.17676784)*x3017))+(((-1.0)*x3022*x3023))+(((-1.0)*x3022*x3024))+((x3018*x3020))+((cj0*px))+((py*sj0)));
evalcond[2]=((((-1.0)*x3028))+(((-1.0)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3029=cj1*cj1;
IkReal x3030=((2.98507462686567)*pz);
IkReal x3031=(cj1*sj1);
if( IKabs(((((-1.0)*cj1*x3030))+(((-0.527665194029851)*x3029))+(((-0.628839313432836)*x3031)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.628839313432836)+(((0.527665194029851)*x3031))+((sj1*x3030))+(((-0.628839313432836)*x3029)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x3030))+(((-0.527665194029851)*x3029))+(((-0.628839313432836)*x3031))))+IKsqr(((0.628839313432836)+(((0.527665194029851)*x3031))+((sj1*x3030))+(((-0.628839313432836)*x3029))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x3030))+(((-0.527665194029851)*x3029))+(((-0.628839313432836)*x3031))), ((0.628839313432836)+(((0.527665194029851)*x3031))+((sj1*x3030))+(((-0.628839313432836)*x3029))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x3032=IKsin(j2);
IkReal x3033=IKcos(j2);
IkReal x3034=(cj0*cj6);
IkReal x3035=((1.0)*sj0);
IkReal x3036=(cj0*sj6);
IkReal x3037=((0.15000018)*sj0);
IkReal x3038=(cj1*x3032);
IkReal x3039=(cj1*x3033);
IkReal x3040=(sj1*x3033);
IkReal x3041=(sj1*x3032);
IkReal x3042=((1.0)*x3040);
evalcond[0]=(x3041+x3039);
evalcond[1]=(x3038+(((-1.0)*x3042)));
evalcond[2]=((((-0.335)*x3038))+(((-0.21066117)*sj1))+(((-1.0)*pz))+(((-0.17676784)*cj1))+(((0.335)*x3040)));
evalcond[3]=((((-1.0)*r01*x3034))+(((-1.0)*r10*sj6*x3035))+(((-1.0)*r00*x3036))+x3038+(((-1.0)*cj6*r11*x3035))+(((-1.0)*x3042)));
evalcond[4]=((((0.335)*x3039))+(((-0.21066117)*cj1))+(((0.17676784)*sj1))+(((-1.0)*r11*sj6*x3037))+((cj6*r10*x3037))+(((-1.0)*py*x3035))+(((0.335)*x3041))+(((0.15000018)*r00*x3034))+(((-0.15000018)*r01*x3036))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3043=((1.0)*cj6);
CheckValue<IkReal> x3044 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x3043))+((r11*sj6)))),IkReal((((r01*sj6))+(((-1.0)*r00*x3043)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3044.valid){
continue;
}
CheckValue<IkReal> x3045=IKPowWithIntegerCheck(IKsign(((((-2000.0)*cj6*rxp0_2))+(((2000.0)*rxp1_2*sj6)))),-1);
if(!x3045.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3044.value)+(((1.5707963267949)*(x3045.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3046=IKcos(j0);
IkReal x3047=IKsin(j0);
IkReal x3048=((1.0)*cj6);
IkReal x3049=((1.0)*sj6);
IkReal x3050=(r01*x3047);
IkReal x3051=(r00*x3047);
IkReal x3052=(cj6*x3046);
IkReal x3053=(r10*x3046);
IkReal x3054=(r11*sj6*x3046);
evalcond[0]=(((r11*x3052))+(((-1.0)*x3048*x3050))+((sj6*x3053))+(((-1.0)*x3049*x3051)));
evalcond[1]=(((cj6*x3051))+x3054+(((-1.0)*x3048*x3053))+(((-1.0)*x3049*x3050)));
evalcond[2]=((-0.0005)+(((-0.15000018)*r10*x3052))+(((0.15000018)*cj6*x3051))+(((0.15000018)*x3054))+(((-0.15000018)*sj6*x3050))+((py*x3046))+(((-1.0)*px*x3047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3055=(cj0*px);
IkReal x3056=(py*sj0);
IkReal x3057=(r11*sj0*sj6);
IkReal x3058=(cj0*cj6*r00);
IkReal x3059=(cj6*r10*sj0);
IkReal x3060=(cj0*r01*sj6);
if( IKabs(((((-2.78560232882098)*pz))+(((0.350614328438323)*x3060))+(((0.350614328438323)*x3057))+(((-0.350614328438323)*x3058))+(((-0.350614328438323)*x3059))+(((2.33742605134422)*x3055))+(((2.33742605134422)*x3056)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.417840850731566)*x3059))+(((0.417840850731566)*x3058))+(((-2.33742605134422)*pz))+(((-0.417840850731566)*x3060))+(((-2.78560232882098)*x3055))+(((-2.78560232882098)*x3056))+(((-0.417840850731566)*x3057)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.78560232882098)*pz))+(((0.350614328438323)*x3060))+(((0.350614328438323)*x3057))+(((-0.350614328438323)*x3058))+(((-0.350614328438323)*x3059))+(((2.33742605134422)*x3055))+(((2.33742605134422)*x3056))))+IKsqr(((((0.417840850731566)*x3059))+(((0.417840850731566)*x3058))+(((-2.33742605134422)*pz))+(((-0.417840850731566)*x3060))+(((-2.78560232882098)*x3055))+(((-2.78560232882098)*x3056))+(((-0.417840850731566)*x3057))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.78560232882098)*pz))+(((0.350614328438323)*x3060))+(((0.350614328438323)*x3057))+(((-0.350614328438323)*x3058))+(((-0.350614328438323)*x3059))+(((2.33742605134422)*x3055))+(((2.33742605134422)*x3056))), ((((0.417840850731566)*x3059))+(((0.417840850731566)*x3058))+(((-2.33742605134422)*pz))+(((-0.417840850731566)*x3060))+(((-2.78560232882098)*x3055))+(((-2.78560232882098)*x3056))+(((-0.417840850731566)*x3057))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[3];
IkReal x3061=IKcos(j1);
IkReal x3062=IKsin(j1);
IkReal x3063=(cj0*r01);
IkReal x3064=((0.335)*cj6);
IkReal x3065=((0.15000018)*sj6);
IkReal x3066=(r11*sj0);
IkReal x3067=((0.15000018)*cj6);
IkReal x3068=(cj0*r00);
IkReal x3069=(r10*sj0);
IkReal x3070=((0.335)*sj6);
IkReal x3071=((0.21066117)*x3062);
IkReal x3072=((0.17676784)*x3061);
IkReal x3073=(x3071+x3072);
evalcond[0]=(x3073+pz+((x3064*x3066))+((x3068*x3070))+((x3069*x3070))+((x3063*x3064)));
evalcond[1]=((((-1.0)*x3067*x3068))+(((-1.0)*x3067*x3069))+(((0.21066117)*x3061))+((x3065*x3066))+(((-0.17676784)*x3062))+((cj0*px))+((py*sj0))+((x3063*x3065)));
evalcond[2]=((((-1.0)*x3073))+(((-1.0)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3074=cj1*cj1;
IkReal x3075=((2.98507462686567)*pz);
IkReal x3076=(cj1*sj1);
if( IKabs(((((-0.628839313432836)*x3076))+(((-1.0)*cj1*x3075))+(((-0.527665194029851)*x3074)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.628839313432836)+(((-0.628839313432836)*x3074))+((sj1*x3075))+(((0.527665194029851)*x3076)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.628839313432836)*x3076))+(((-1.0)*cj1*x3075))+(((-0.527665194029851)*x3074))))+IKsqr(((0.628839313432836)+(((-0.628839313432836)*x3074))+((sj1*x3075))+(((0.527665194029851)*x3076))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.628839313432836)*x3076))+(((-1.0)*cj1*x3075))+(((-0.527665194029851)*x3074))), ((0.628839313432836)+(((-0.628839313432836)*x3074))+((sj1*x3075))+(((0.527665194029851)*x3076))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x3077=IKsin(j2);
IkReal x3078=IKcos(j2);
IkReal x3079=(cj0*cj6);
IkReal x3080=((1.0)*sj0);
IkReal x3081=(cj0*sj6);
IkReal x3082=((0.15000018)*sj0);
IkReal x3083=(cj1*x3077);
IkReal x3084=(cj1*x3078);
IkReal x3085=(sj1*x3078);
IkReal x3086=(sj1*x3077);
IkReal x3087=((1.0)*x3085);
evalcond[0]=(x3084+x3086);
evalcond[1]=((((-1.0)*x3087))+x3083);
evalcond[2]=((((-0.21066117)*sj1))+(((-0.335)*x3083))+(((0.335)*x3085))+(((-1.0)*pz))+(((-0.17676784)*cj1)));
evalcond[3]=((((-1.0)*x3087))+x3083+(((-1.0)*r10*sj6*x3080))+(((-1.0)*cj6*r11*x3080))+(((-1.0)*r00*x3081))+(((-1.0)*r01*x3079)));
evalcond[4]=((((0.15000018)*r00*x3079))+(((-1.0)*r11*sj6*x3082))+(((-0.21066117)*cj1))+(((0.17676784)*sj1))+(((-1.0)*py*x3080))+(((0.335)*x3084))+(((0.335)*x3086))+((cj6*r10*x3082))+(((-0.15000018)*r01*x3081))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j4, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j5), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x3088=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x3088);
rxp1_0=(pz*r11);
rxp1_1=(r01*x3088);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4=3.14159265358979;
sj4=0;
cj4=-1.0;
j5=0;
sj5=0;
cj5=1.0;
IkReal x3089=(rxp1_2*sj6);
IkReal x3090=(cj6*rxp0_2);
j0eval[0]=(x3090+(((-1.0)*x3089)));
j0eval[1]=IKsign(((((-2000.0)*x3089))+(((2000.0)*x3090))));
j0eval[2]=((sj6*sj6)+(cj6*cj6));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x3091=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x3091);
rxp1_0=(pz*r11);
rxp1_1=(r01*x3091);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4=3.14159265358979;
sj4=0;
cj4=-1.0;
j5=0;
sj5=0;
cj5=1.0;
IkReal x3092=(cj6*rxp1_2);
IkReal x3093=(rxp0_2*sj6);
j0eval[0]=((((1075268.8172043)*x3093))+(((1075268.8172043)*x3092))+(((-1.0)*r22)));
j0eval[1]=IKsign(((((-0.00186)*r22))+(((2000.0)*x3093))+(((2000.0)*x3092))));
j0eval[2]=((sj6*sj6)+(cj6*cj6));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x3094=IKPowWithIntegerCheck(IKsign(((((-0.00186)*r22))+(((2000.0)*rxp0_2*sj6))+(((2000.0)*cj6*rxp1_2)))),-1);
if(!x3094.valid){
continue;
}
CheckValue<IkReal> x3095 = IKatan2WithCheck(IkReal((((r10*sj6))+((cj6*r11)))),IkReal((((r00*sj6))+((cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3095.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3094.value)))+(x3095.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3096=IKcos(j0);
IkReal x3097=IKsin(j0);
IkReal x3098=(cj6*r10);
IkReal x3099=(r11*sj6);
IkReal x3100=((9.3e-7)*x3096);
IkReal x3101=(r00*x3097);
IkReal x3102=((1.0)*cj6*x3097);
IkReal x3103=(r01*sj6*x3097);
evalcond[0]=(((r10*sj6*x3096))+((cj6*r11*x3096))+(((-1.0)*sj6*x3101))+(((-1.0)*r01*x3102)));
evalcond[1]=(x3103+(((-1.0)*x3096*x3099))+((x3096*x3098))+(((-1.0)*cj6*x3101)));
evalcond[2]=((-0.0005)+((x3098*x3100))+(((-9.3e-7)*cj6*x3101))+(((-1.0)*x3099*x3100))+((py*x3096))+(((-1.0)*px*x3097))+(((9.3e-7)*x3103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3104=((2.17380622775013e-6)*sj0);
IkReal x3105=(cj6*r10);
IkReal x3106=(r11*sj6);
IkReal x3107=(cj0*px);
IkReal x3108=((2.59061016580351e-6)*sj0);
IkReal x3109=(py*sj0);
IkReal x3110=(cj0*cj6*r00);
IkReal x3111=(cj0*r01*sj6);
if( IKabs(((((-2.17380622775013e-6)*x3111))+(((-2.78560232882098)*pz))+(((2.33742605134422)*x3109))+(((2.33742605134422)*x3107))+(((-1.0)*x3104*x3106))+(((2.17380622775013e-6)*x3110))+((x3104*x3105)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.78560232882098)*x3109))+(((-2.78560232882098)*x3107))+(((2.59061016580351e-6)*x3111))+(((-2.33742605134422)*pz))+(((-2.59061016580351e-6)*x3110))+(((-1.0)*x3105*x3108))+((x3106*x3108)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.17380622775013e-6)*x3111))+(((-2.78560232882098)*pz))+(((2.33742605134422)*x3109))+(((2.33742605134422)*x3107))+(((-1.0)*x3104*x3106))+(((2.17380622775013e-6)*x3110))+((x3104*x3105))))+IKsqr(((((-2.78560232882098)*x3109))+(((-2.78560232882098)*x3107))+(((2.59061016580351e-6)*x3111))+(((-2.33742605134422)*pz))+(((-2.59061016580351e-6)*x3110))+(((-1.0)*x3105*x3108))+((x3106*x3108))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.17380622775013e-6)*x3111))+(((-2.78560232882098)*pz))+(((2.33742605134422)*x3109))+(((2.33742605134422)*x3107))+(((-1.0)*x3104*x3106))+(((2.17380622775013e-6)*x3110))+((x3104*x3105))), ((((-2.78560232882098)*x3109))+(((-2.78560232882098)*x3107))+(((2.59061016580351e-6)*x3111))+(((-2.33742605134422)*pz))+(((-2.59061016580351e-6)*x3110))+(((-1.0)*x3105*x3108))+((x3106*x3108))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[3];
IkReal x3112=IKcos(j1);
IkReal x3113=IKsin(j1);
IkReal x3114=(cj0*r01);
IkReal x3115=((9.3e-7)*sj6);
IkReal x3116=((0.335)*cj6);
IkReal x3117=(r10*sj0);
IkReal x3118=((9.3e-7)*cj6);
IkReal x3119=(r11*sj0);
IkReal x3120=((0.335)*sj6);
IkReal x3121=(cj0*r00);
IkReal x3122=((0.21066117)*x3113);
IkReal x3123=((0.17676784)*x3112);
IkReal x3124=(x3122+x3123);
evalcond[0]=(((x3120*x3121))+x3124+((x3114*x3116))+pz+((x3116*x3119))+((x3117*x3120)));
evalcond[1]=((((-1.0)*x3115*x3119))+(((-1.0)*x3114*x3115))+(((-0.17676784)*x3113))+((x3118*x3121))+(((0.21066117)*x3112))+((cj0*px))+((py*sj0))+((x3117*x3118)));
evalcond[2]=((((-1.0)*pz))+(((-1.0)*x3124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3125=cj1*cj1;
IkReal x3126=((2.98507462686567)*pz);
IkReal x3127=(cj1*sj1);
if( IKabs(((((-0.527665194029851)*x3125))+(((-0.628839313432836)*x3127))+(((-1.0)*cj1*x3126)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.628839313432836)+(((-0.628839313432836)*x3125))+(((0.527665194029851)*x3127))+((sj1*x3126)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.527665194029851)*x3125))+(((-0.628839313432836)*x3127))+(((-1.0)*cj1*x3126))))+IKsqr(((0.628839313432836)+(((-0.628839313432836)*x3125))+(((0.527665194029851)*x3127))+((sj1*x3126))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.527665194029851)*x3125))+(((-0.628839313432836)*x3127))+(((-1.0)*cj1*x3126))), ((0.628839313432836)+(((-0.628839313432836)*x3125))+(((0.527665194029851)*x3127))+((sj1*x3126))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x3128=IKsin(j2);
IkReal x3129=IKcos(j2);
IkReal x3130=((1.0)*cj6);
IkReal x3131=(cj0*r01);
IkReal x3132=(r11*sj0);
IkReal x3133=((9.3e-7)*sj6);
IkReal x3134=((9.3e-7)*cj6);
IkReal x3135=(r10*sj0);
IkReal x3136=(cj0*r00);
IkReal x3137=((1.0)*sj6);
IkReal x3138=(cj1*x3128);
IkReal x3139=(cj1*x3129);
IkReal x3140=(sj1*x3129);
IkReal x3141=(sj1*x3128);
IkReal x3142=((1.0)*x3140);
evalcond[0]=(x3141+x3139);
evalcond[1]=(x3138+(((-1.0)*x3142)));
evalcond[2]=((((0.335)*x3140))+(((-0.21066117)*sj1))+(((-0.335)*x3138))+(((-1.0)*pz))+(((-0.17676784)*cj1)));
evalcond[3]=(x3138+(((-1.0)*x3142))+(((-1.0)*x3130*x3132))+(((-1.0)*x3130*x3131))+(((-1.0)*x3136*x3137))+(((-1.0)*x3135*x3137)));
evalcond[4]=((((0.335)*x3141))+((x3131*x3133))+(((-0.21066117)*cj1))+(((0.17676784)*sj1))+((x3132*x3133))+(((-1.0)*x3134*x3136))+(((-1.0)*x3134*x3135))+(((0.335)*x3139))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3143=((1.0)*sj6);
CheckValue<IkReal> x3144 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x3143))+((cj6*r10)))),IkReal((((cj6*r00))+(((-1.0)*r01*x3143)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3144.valid){
continue;
}
CheckValue<IkReal> x3145=IKPowWithIntegerCheck(IKsign(((((-2000.0)*rxp1_2*sj6))+(((2000.0)*cj6*rxp0_2)))),-1);
if(!x3145.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3144.value)+(((1.5707963267949)*(x3145.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3146=IKcos(j0);
IkReal x3147=IKsin(j0);
IkReal x3148=(cj6*r10);
IkReal x3149=(r11*sj6);
IkReal x3150=((9.3e-7)*x3146);
IkReal x3151=(r00*x3147);
IkReal x3152=((1.0)*cj6*x3147);
IkReal x3153=(r01*sj6*x3147);
evalcond[0]=(((cj6*r11*x3146))+((r10*sj6*x3146))+(((-1.0)*sj6*x3151))+(((-1.0)*r01*x3152)));
evalcond[1]=(((x3146*x3148))+x3153+(((-1.0)*x3146*x3149))+(((-1.0)*cj6*x3151)));
evalcond[2]=((-0.0005)+(((-9.3e-7)*cj6*x3151))+((x3148*x3150))+(((-1.0)*x3149*x3150))+((py*x3146))+(((9.3e-7)*x3153))+(((-1.0)*px*x3147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3154=((2.17380622775013e-6)*sj0);
IkReal x3155=(cj6*r10);
IkReal x3156=(r11*sj6);
IkReal x3157=(cj0*px);
IkReal x3158=((2.59061016580351e-6)*sj0);
IkReal x3159=(py*sj0);
IkReal x3160=(cj0*cj6*r00);
IkReal x3161=(cj0*r01*sj6);
if( IKabs(((((2.33742605134422)*x3157))+(((2.33742605134422)*x3159))+(((-2.78560232882098)*pz))+((x3154*x3155))+(((2.17380622775013e-6)*x3160))+(((-1.0)*x3154*x3156))+(((-2.17380622775013e-6)*x3161)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.33742605134422)*pz))+((x3156*x3158))+(((2.59061016580351e-6)*x3161))+(((-2.78560232882098)*x3157))+(((-2.78560232882098)*x3159))+(((-2.59061016580351e-6)*x3160))+(((-1.0)*x3155*x3158)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.33742605134422)*x3157))+(((2.33742605134422)*x3159))+(((-2.78560232882098)*pz))+((x3154*x3155))+(((2.17380622775013e-6)*x3160))+(((-1.0)*x3154*x3156))+(((-2.17380622775013e-6)*x3161))))+IKsqr(((((-2.33742605134422)*pz))+((x3156*x3158))+(((2.59061016580351e-6)*x3161))+(((-2.78560232882098)*x3157))+(((-2.78560232882098)*x3159))+(((-2.59061016580351e-6)*x3160))+(((-1.0)*x3155*x3158))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.33742605134422)*x3157))+(((2.33742605134422)*x3159))+(((-2.78560232882098)*pz))+((x3154*x3155))+(((2.17380622775013e-6)*x3160))+(((-1.0)*x3154*x3156))+(((-2.17380622775013e-6)*x3161))), ((((-2.33742605134422)*pz))+((x3156*x3158))+(((2.59061016580351e-6)*x3161))+(((-2.78560232882098)*x3157))+(((-2.78560232882098)*x3159))+(((-2.59061016580351e-6)*x3160))+(((-1.0)*x3155*x3158))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[3];
IkReal x3162=IKcos(j1);
IkReal x3163=IKsin(j1);
IkReal x3164=(cj0*r01);
IkReal x3165=((9.3e-7)*sj6);
IkReal x3166=((0.335)*cj6);
IkReal x3167=(r10*sj0);
IkReal x3168=((9.3e-7)*cj6);
IkReal x3169=(r11*sj0);
IkReal x3170=((0.335)*sj6);
IkReal x3171=(cj0*r00);
IkReal x3172=((0.21066117)*x3163);
IkReal x3173=((0.17676784)*x3162);
IkReal x3174=(x3173+x3172);
evalcond[0]=(x3174+((x3166*x3169))+((x3170*x3171))+pz+((x3167*x3170))+((x3164*x3166)));
evalcond[1]=((((-1.0)*x3165*x3169))+((x3168*x3171))+(((-1.0)*x3164*x3165))+((x3167*x3168))+(((-0.17676784)*x3163))+((cj0*px))+((py*sj0))+(((0.21066117)*x3162)));
evalcond[2]=((((-1.0)*x3174))+(((-1.0)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3175=cj1*cj1;
IkReal x3176=((2.98507462686567)*pz);
IkReal x3177=(cj1*sj1);
if( IKabs(((((-1.0)*cj1*x3176))+(((-0.527665194029851)*x3175))+(((-0.628839313432836)*x3177)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.628839313432836)+((sj1*x3176))+(((0.527665194029851)*x3177))+(((-0.628839313432836)*x3175)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x3176))+(((-0.527665194029851)*x3175))+(((-0.628839313432836)*x3177))))+IKsqr(((0.628839313432836)+((sj1*x3176))+(((0.527665194029851)*x3177))+(((-0.628839313432836)*x3175))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x3176))+(((-0.527665194029851)*x3175))+(((-0.628839313432836)*x3177))), ((0.628839313432836)+((sj1*x3176))+(((0.527665194029851)*x3177))+(((-0.628839313432836)*x3175))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x3178=IKsin(j2);
IkReal x3179=IKcos(j2);
IkReal x3180=((1.0)*cj6);
IkReal x3181=(cj0*r01);
IkReal x3182=(r11*sj0);
IkReal x3183=((9.3e-7)*sj6);
IkReal x3184=((9.3e-7)*cj6);
IkReal x3185=(r10*sj0);
IkReal x3186=(cj0*r00);
IkReal x3187=((1.0)*sj6);
IkReal x3188=(cj1*x3178);
IkReal x3189=(cj1*x3179);
IkReal x3190=(sj1*x3179);
IkReal x3191=(sj1*x3178);
IkReal x3192=((1.0)*x3190);
evalcond[0]=(x3189+x3191);
evalcond[1]=(x3188+(((-1.0)*x3192)));
evalcond[2]=((((-0.21066117)*sj1))+(((-1.0)*pz))+(((-0.335)*x3188))+(((-0.17676784)*cj1))+(((0.335)*x3190)));
evalcond[3]=(x3188+(((-1.0)*x3180*x3181))+(((-1.0)*x3180*x3182))+(((-1.0)*x3185*x3187))+(((-1.0)*x3186*x3187))+(((-1.0)*x3192)));
evalcond[4]=((((-1.0)*x3184*x3185))+(((-1.0)*x3184*x3186))+(((-0.21066117)*cj1))+(((0.17676784)*sj1))+((x3182*x3183))+(((0.335)*x3191))+(((-1.0)*py*sj0))+((x3181*x3183))+(((0.335)*x3189))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j4, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j5, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x3193=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x3193);
rxp1_0=(pz*r11);
rxp1_1=(r01*x3193);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4=3.14159265358979;
sj4=0;
cj4=-1.0;
j5=3.14159265358979;
sj5=0;
cj5=-1.0;
IkReal x3194=(cj6*rxp0_2);
IkReal x3195=(rxp1_2*sj6);
j0eval[0]=(x3195+(((-1.0)*x3194)));
j0eval[1]=((sj6*sj6)+(cj6*cj6));
j0eval[2]=IKsign(((((-2000.0)*x3194))+(((2000.0)*x3195))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x3196=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x3196);
rxp1_0=(pz*r11);
rxp1_1=(r01*x3196);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4=3.14159265358979;
sj4=0;
cj4=-1.0;
j5=3.14159265358979;
sj5=0;
cj5=-1.0;
IkReal x3197=(cj6*rxp1_2);
IkReal x3198=(rxp0_2*sj6);
j0eval[0]=(r22+(((775193.798449612)*x3197))+(((775193.798449612)*x3198)));
j0eval[1]=IKsign(((((2000.0)*x3198))+(((2000.0)*x3197))+(((0.00258)*r22))));
j0eval[2]=((sj6*sj6)+(cj6*cj6));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x3199=IKPowWithIntegerCheck(IKsign(((((2000.0)*rxp0_2*sj6))+(((0.00258)*r22))+(((2000.0)*cj6*rxp1_2)))),-1);
if(!x3199.valid){
continue;
}
CheckValue<IkReal> x3200 = IKatan2WithCheck(IkReal((((r10*sj6))+((cj6*r11)))),IkReal((((r00*sj6))+((cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3200.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3199.value)))+(x3200.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3201=IKcos(j0);
IkReal x3202=IKsin(j0);
IkReal x3203=((1.0)*r01);
IkReal x3204=(cj6*x3202);
IkReal x3205=(cj6*x3201);
IkReal x3206=(sj6*x3202);
IkReal x3207=(r11*sj6*x3201);
evalcond[0]=((((-1.0)*r00*x3206))+((r10*sj6*x3201))+((r11*x3205))+(((-1.0)*x3203*x3204)));
evalcond[1]=(x3207+((r00*x3204))+(((-1.0)*x3203*x3206))+(((-1.0)*r10*x3205)));
evalcond[2]=((-0.0005)+((py*x3201))+(((-1.29e-6)*r01*x3206))+(((-1.29e-6)*r10*x3205))+(((1.29e-6)*x3207))+(((-1.0)*px*x3202))+(((1.29e-6)*r00*x3204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3208=((3.59342700417906e-6)*sj0);
IkReal x3209=(cj6*r10);
IkReal x3210=(r11*sj6);
IkReal x3211=(cj0*px);
IkReal x3212=((3.01527960623405e-6)*sj0);
IkReal x3213=(py*sj0);
IkReal x3214=(cj0*cj6*r00);
IkReal x3215=(cj0*r01*sj6);
if( IKabs(((((-2.78560232882098)*pz))+(((2.33742605134422)*x3211))+(((2.33742605134422)*x3213))+(((-1.0)*x3209*x3212))+(((3.01527960623405e-6)*x3215))+(((-3.01527960623405e-6)*x3214))+((x3210*x3212)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.59342700417906e-6)*x3215))+((x3208*x3209))+(((3.59342700417906e-6)*x3214))+(((-2.33742605134422)*pz))+(((-1.0)*x3208*x3210))+(((-2.78560232882098)*x3211))+(((-2.78560232882098)*x3213)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.78560232882098)*pz))+(((2.33742605134422)*x3211))+(((2.33742605134422)*x3213))+(((-1.0)*x3209*x3212))+(((3.01527960623405e-6)*x3215))+(((-3.01527960623405e-6)*x3214))+((x3210*x3212))))+IKsqr(((((-3.59342700417906e-6)*x3215))+((x3208*x3209))+(((3.59342700417906e-6)*x3214))+(((-2.33742605134422)*pz))+(((-1.0)*x3208*x3210))+(((-2.78560232882098)*x3211))+(((-2.78560232882098)*x3213))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.78560232882098)*pz))+(((2.33742605134422)*x3211))+(((2.33742605134422)*x3213))+(((-1.0)*x3209*x3212))+(((3.01527960623405e-6)*x3215))+(((-3.01527960623405e-6)*x3214))+((x3210*x3212))), ((((-3.59342700417906e-6)*x3215))+((x3208*x3209))+(((3.59342700417906e-6)*x3214))+(((-2.33742605134422)*pz))+(((-1.0)*x3208*x3210))+(((-2.78560232882098)*x3211))+(((-2.78560232882098)*x3213))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[3];
IkReal x3216=IKcos(j1);
IkReal x3217=IKsin(j1);
IkReal x3218=((0.335)*cj6);
IkReal x3219=(cj0*r01);
IkReal x3220=((1.29e-6)*sj0);
IkReal x3221=(cj0*r00);
IkReal x3222=((0.335)*sj6);
IkReal x3223=((0.21066117)*x3217);
IkReal x3224=((0.17676784)*x3216);
IkReal x3225=(x3224+x3223);
evalcond[0]=(((r10*sj0*x3222))+x3225+((x3221*x3222))+((r11*sj0*x3218))+pz+((x3218*x3219)));
evalcond[1]=(((r11*sj6*x3220))+(((0.21066117)*x3216))+(((-1.0)*cj6*r10*x3220))+(((-0.17676784)*x3217))+((cj0*px))+((py*sj0))+(((-1.29e-6)*cj6*x3221))+(((1.29e-6)*sj6*x3219)));
evalcond[2]=((((-1.0)*pz))+(((-1.0)*x3225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3226=cj1*cj1;
IkReal x3227=((2.98507462686567)*pz);
IkReal x3228=(cj1*sj1);
if( IKabs(((((-0.628839313432836)*x3228))+(((-0.527665194029851)*x3226))+(((-1.0)*cj1*x3227)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.628839313432836)+(((0.527665194029851)*x3228))+(((-0.628839313432836)*x3226))+((sj1*x3227)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.628839313432836)*x3228))+(((-0.527665194029851)*x3226))+(((-1.0)*cj1*x3227))))+IKsqr(((0.628839313432836)+(((0.527665194029851)*x3228))+(((-0.628839313432836)*x3226))+((sj1*x3227))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.628839313432836)*x3228))+(((-0.527665194029851)*x3226))+(((-1.0)*cj1*x3227))), ((0.628839313432836)+(((0.527665194029851)*x3228))+(((-0.628839313432836)*x3226))+((sj1*x3227))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x3229=IKsin(j2);
IkReal x3230=IKcos(j2);
IkReal x3231=(cj0*cj6);
IkReal x3232=((1.29e-6)*sj6);
IkReal x3233=(r11*sj0);
IkReal x3234=(r10*sj0);
IkReal x3235=((1.0)*cj0);
IkReal x3236=(cj1*x3229);
IkReal x3237=(cj1*x3230);
IkReal x3238=(sj1*x3230);
IkReal x3239=(sj1*x3229);
IkReal x3240=((1.0)*x3238);
evalcond[0]=(x3237+x3239);
evalcond[1]=(x3236+(((-1.0)*x3240)));
evalcond[2]=((((0.335)*x3238))+(((-0.335)*x3236))+(((-0.21066117)*sj1))+(((-1.0)*pz))+(((-0.17676784)*cj1)));
evalcond[3]=((((-1.0)*r00*sj6*x3235))+x3236+(((-1.0)*cj6*x3233))+(((-1.0)*x3240))+(((-1.0)*sj6*x3234))+(((-1.0)*r01*x3231)));
evalcond[4]=((((0.335)*x3239))+(((0.335)*x3237))+(((-0.21066117)*cj1))+(((0.17676784)*sj1))+(((-1.0)*cj0*r01*x3232))+(((-1.0)*x3232*x3233))+(((-1.0)*py*sj0))+(((-1.0)*px*x3235))+(((1.29e-6)*cj6*x3234))+(((1.29e-6)*r00*x3231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3241=((1.0)*cj6);
CheckValue<IkReal> x3242 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x3241))+((r11*sj6)))),IkReal((((r01*sj6))+(((-1.0)*r00*x3241)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3242.valid){
continue;
}
CheckValue<IkReal> x3243=IKPowWithIntegerCheck(IKsign(((((-2000.0)*cj6*rxp0_2))+(((2000.0)*rxp1_2*sj6)))),-1);
if(!x3243.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3242.value)+(((1.5707963267949)*(x3243.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3244=IKcos(j0);
IkReal x3245=IKsin(j0);
IkReal x3246=((1.0)*r01);
IkReal x3247=(cj6*x3245);
IkReal x3248=(cj6*x3244);
IkReal x3249=(sj6*x3245);
IkReal x3250=(r11*sj6*x3244);
evalcond[0]=(((r10*sj6*x3244))+(((-1.0)*r00*x3249))+(((-1.0)*x3246*x3247))+((r11*x3248)));
evalcond[1]=(((r00*x3247))+x3250+(((-1.0)*x3246*x3249))+(((-1.0)*r10*x3248)));
evalcond[2]=((-0.0005)+(((-1.29e-6)*r01*x3249))+(((1.29e-6)*r00*x3247))+(((-1.0)*px*x3245))+(((-1.29e-6)*r10*x3248))+(((1.29e-6)*x3250))+((py*x3244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3251=((3.59342700417906e-6)*sj0);
IkReal x3252=(cj6*r10);
IkReal x3253=(r11*sj6);
IkReal x3254=(cj0*px);
IkReal x3255=((3.01527960623405e-6)*sj0);
IkReal x3256=(py*sj0);
IkReal x3257=(cj0*cj6*r00);
IkReal x3258=(cj0*r01*sj6);
if( IKabs(((((-3.01527960623405e-6)*x3257))+(((-2.78560232882098)*pz))+(((2.33742605134422)*x3254))+(((2.33742605134422)*x3256))+(((-1.0)*x3252*x3255))+((x3253*x3255))+(((3.01527960623405e-6)*x3258)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.33742605134422)*pz))+((x3251*x3252))+(((-1.0)*x3251*x3253))+(((-2.78560232882098)*x3254))+(((-2.78560232882098)*x3256))+(((-3.59342700417906e-6)*x3258))+(((3.59342700417906e-6)*x3257)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.01527960623405e-6)*x3257))+(((-2.78560232882098)*pz))+(((2.33742605134422)*x3254))+(((2.33742605134422)*x3256))+(((-1.0)*x3252*x3255))+((x3253*x3255))+(((3.01527960623405e-6)*x3258))))+IKsqr(((((-2.33742605134422)*pz))+((x3251*x3252))+(((-1.0)*x3251*x3253))+(((-2.78560232882098)*x3254))+(((-2.78560232882098)*x3256))+(((-3.59342700417906e-6)*x3258))+(((3.59342700417906e-6)*x3257))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-3.01527960623405e-6)*x3257))+(((-2.78560232882098)*pz))+(((2.33742605134422)*x3254))+(((2.33742605134422)*x3256))+(((-1.0)*x3252*x3255))+((x3253*x3255))+(((3.01527960623405e-6)*x3258))), ((((-2.33742605134422)*pz))+((x3251*x3252))+(((-1.0)*x3251*x3253))+(((-2.78560232882098)*x3254))+(((-2.78560232882098)*x3256))+(((-3.59342700417906e-6)*x3258))+(((3.59342700417906e-6)*x3257))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[3];
IkReal x3259=IKcos(j1);
IkReal x3260=IKsin(j1);
IkReal x3261=((0.335)*cj6);
IkReal x3262=(cj0*r01);
IkReal x3263=((1.29e-6)*sj0);
IkReal x3264=(cj0*r00);
IkReal x3265=((0.335)*sj6);
IkReal x3266=((0.21066117)*x3260);
IkReal x3267=((0.17676784)*x3259);
IkReal x3268=(x3267+x3266);
evalcond[0]=(x3268+((r10*sj0*x3265))+((r11*sj0*x3261))+pz+((x3261*x3262))+((x3264*x3265)));
evalcond[1]=((((0.21066117)*x3259))+(((-0.17676784)*x3260))+(((-1.29e-6)*cj6*x3264))+((r11*sj6*x3263))+((cj0*px))+((py*sj0))+(((-1.0)*cj6*r10*x3263))+(((1.29e-6)*sj6*x3262)));
evalcond[2]=((((-1.0)*x3268))+(((-1.0)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3269=cj1*cj1;
IkReal x3270=((2.98507462686567)*pz);
IkReal x3271=(cj1*sj1);
if( IKabs(((((-0.628839313432836)*x3271))+(((-0.527665194029851)*x3269))+(((-1.0)*cj1*x3270)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.628839313432836)+((sj1*x3270))+(((0.527665194029851)*x3271))+(((-0.628839313432836)*x3269)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.628839313432836)*x3271))+(((-0.527665194029851)*x3269))+(((-1.0)*cj1*x3270))))+IKsqr(((0.628839313432836)+((sj1*x3270))+(((0.527665194029851)*x3271))+(((-0.628839313432836)*x3269))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.628839313432836)*x3271))+(((-0.527665194029851)*x3269))+(((-1.0)*cj1*x3270))), ((0.628839313432836)+((sj1*x3270))+(((0.527665194029851)*x3271))+(((-0.628839313432836)*x3269))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x3272=IKsin(j2);
IkReal x3273=IKcos(j2);
IkReal x3274=(cj0*cj6);
IkReal x3275=((1.29e-6)*sj6);
IkReal x3276=(r11*sj0);
IkReal x3277=(r10*sj0);
IkReal x3278=((1.0)*cj0);
IkReal x3279=(cj1*x3272);
IkReal x3280=(cj1*x3273);
IkReal x3281=(sj1*x3273);
IkReal x3282=(sj1*x3272);
IkReal x3283=((1.0)*x3281);
evalcond[0]=(x3282+x3280);
evalcond[1]=((((-1.0)*x3283))+x3279);
evalcond[2]=((((-0.335)*x3279))+(((-0.21066117)*sj1))+(((-1.0)*pz))+(((-0.17676784)*cj1))+(((0.335)*x3281)));
evalcond[3]=((((-1.0)*x3283))+x3279+(((-1.0)*r00*sj6*x3278))+(((-1.0)*sj6*x3277))+(((-1.0)*cj6*x3276))+(((-1.0)*r01*x3274)));
evalcond[4]=((((1.29e-6)*r00*x3274))+(((-0.21066117)*cj1))+(((-1.0)*px*x3278))+(((0.17676784)*sj1))+(((-1.0)*x3275*x3276))+(((-1.0)*cj0*r01*x3275))+(((1.29e-6)*cj6*x3277))+(((-1.0)*py*sj0))+(((0.335)*x3282))+(((0.335)*x3280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x3284=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x3284);
rxp1_0=(pz*r11);
rxp1_1=(r01*x3284);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4=-1.5707963267949;
sj4=-1.0;
cj4=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
IkReal x3285=(cj6*rxp0_2);
IkReal x3286=(rxp1_2*sj6);
j0eval[0]=(x3286+(((-1.0)*x3285)));
j0eval[1]=((sj6*sj6)+(cj6*cj6));
j0eval[2]=IKsign(((((-2000.0)*x3285))+(((2000.0)*x3286))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x3287=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x3287);
rxp1_0=(pz*r11);
rxp1_1=(r01*x3287);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4=-1.5707963267949;
sj4=-1.0;
cj4=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
IkReal x3288=(rxp0_2*sj6);
IkReal x3289=(cj6*rxp1_2);
j0eval[0]=((((6.66667466667627)*x3288))+(((6.66667466667627)*x3289))+(((-1.0)*r22)));
j0eval[1]=IKsign(((((2000.0)*x3288))+(((2000.0)*x3289))+(((-299.99964)*r22))));
j0eval[2]=((sj6*sj6)+(cj6*cj6));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x3290=IKPowWithIntegerCheck(IKsign(((((2000.0)*rxp0_2*sj6))+(((-299.99964)*r22))+(((2000.0)*cj6*rxp1_2)))),-1);
if(!x3290.valid){
continue;
}
CheckValue<IkReal> x3291 = IKatan2WithCheck(IkReal((((r10*sj6))+((cj6*r11)))),IkReal((((r00*sj6))+((cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3291.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3290.value)))+(x3291.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3292=IKcos(j0);
IkReal x3293=IKsin(j0);
IkReal x3294=(cj6*r00);
IkReal x3295=(r01*sj6);
IkReal x3296=((1.0)*x3293);
IkReal x3297=((0.14999982)*x3293);
IkReal x3298=(cj6*x3292);
IkReal x3299=(r11*sj6*x3292);
evalcond[0]=((((-1.0)*r00*sj6*x3296))+((r10*sj6*x3292))+(((-1.0)*cj6*r01*x3296))+((r11*x3298)));
evalcond[1]=((((-1.0)*r10*x3298))+((x3293*x3294))+x3299+(((-1.0)*x3295*x3296)));
evalcond[2]=((-0.0005)+((py*x3292))+(((-0.14999982)*x3299))+((x3295*x3297))+(((-1.0)*px*x3296))+(((0.14999982)*r10*x3298))+(((-1.0)*x3294*x3297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3300=((0.350613486964944)*cj6);
IkReal x3301=(r10*sj0);
IkReal x3302=((0.417839847914728)*cj0);
IkReal x3303=(r01*sj6);
IkReal x3304=(cj0*px);
IkReal x3305=(py*sj0);
IkReal x3306=(r11*sj0*sj6);
if( IKabs((((x3300*x3301))+(((-2.78560232882098)*pz))+((cj0*r00*x3300))+(((-0.350613486964944)*cj0*x3303))+(((2.33742605134422)*x3304))+(((2.33742605134422)*x3305))+(((-0.350613486964944)*x3306)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.417839847914728)*cj6*x3301))+(((-2.33742605134422)*pz))+(((-2.78560232882098)*x3304))+(((-2.78560232882098)*x3305))+(((-1.0)*cj6*r00*x3302))+(((0.417839847914728)*x3306))+((x3302*x3303)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x3300*x3301))+(((-2.78560232882098)*pz))+((cj0*r00*x3300))+(((-0.350613486964944)*cj0*x3303))+(((2.33742605134422)*x3304))+(((2.33742605134422)*x3305))+(((-0.350613486964944)*x3306))))+IKsqr(((((-0.417839847914728)*cj6*x3301))+(((-2.33742605134422)*pz))+(((-2.78560232882098)*x3304))+(((-2.78560232882098)*x3305))+(((-1.0)*cj6*r00*x3302))+(((0.417839847914728)*x3306))+((x3302*x3303))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((x3300*x3301))+(((-2.78560232882098)*pz))+((cj0*r00*x3300))+(((-0.350613486964944)*cj0*x3303))+(((2.33742605134422)*x3304))+(((2.33742605134422)*x3305))+(((-0.350613486964944)*x3306))), ((((-0.417839847914728)*cj6*x3301))+(((-2.33742605134422)*pz))+(((-2.78560232882098)*x3304))+(((-2.78560232882098)*x3305))+(((-1.0)*cj6*r00*x3302))+(((0.417839847914728)*x3306))+((x3302*x3303))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[3];
IkReal x3307=IKcos(j1);
IkReal x3308=IKsin(j1);
IkReal x3309=(cj0*cj6);
IkReal x3310=((0.14999982)*sj0);
IkReal x3311=(cj0*sj6);
IkReal x3312=((0.335)*sj0);
IkReal x3313=((0.21066117)*x3308);
IkReal x3314=((0.17676784)*x3307);
IkReal x3315=(x3313+x3314);
evalcond[0]=((((0.335)*r01*x3309))+(((0.335)*r00*x3311))+x3315+((cj6*r11*x3312))+((r10*sj6*x3312))+pz);
evalcond[1]=((((-1.0)*r11*sj6*x3310))+((cj6*r10*x3310))+(((0.21066117)*x3307))+(((-0.14999982)*r01*x3311))+(((-0.17676784)*x3308))+((cj0*px))+((py*sj0))+(((0.14999982)*r00*x3309)));
evalcond[2]=((((-1.0)*x3315))+(((-1.0)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3316=cj1*cj1;
IkReal x3317=((2.98507462686567)*pz);
IkReal x3318=(cj1*sj1);
if( IKabs(((((-1.0)*cj1*x3317))+(((-0.527665194029851)*x3316))+(((-0.628839313432836)*x3318)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.628839313432836)+(((-0.628839313432836)*x3316))+(((0.527665194029851)*x3318))+((sj1*x3317)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x3317))+(((-0.527665194029851)*x3316))+(((-0.628839313432836)*x3318))))+IKsqr(((0.628839313432836)+(((-0.628839313432836)*x3316))+(((0.527665194029851)*x3318))+((sj1*x3317))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x3317))+(((-0.527665194029851)*x3316))+(((-0.628839313432836)*x3318))), ((0.628839313432836)+(((-0.628839313432836)*x3316))+(((0.527665194029851)*x3318))+((sj1*x3317))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x3319=IKsin(j2);
IkReal x3320=IKcos(j2);
IkReal x3321=((0.14999982)*sj0);
IkReal x3322=((1.0)*cj6);
IkReal x3323=(cj0*r01);
IkReal x3324=((1.0)*sj0);
IkReal x3325=(cj0*r00);
IkReal x3326=(cj1*x3319);
IkReal x3327=(cj1*x3320);
IkReal x3328=(sj1*x3320);
IkReal x3329=(sj1*x3319);
IkReal x3330=((1.0)*x3328);
evalcond[0]=(x3327+x3329);
evalcond[1]=(x3326+(((-1.0)*x3330)));
evalcond[2]=((((-0.21066117)*sj1))+(((-1.0)*pz))+(((-0.17676784)*cj1))+(((0.335)*x3328))+(((-0.335)*x3326)));
evalcond[3]=((((-1.0)*r11*sj0*x3322))+x3326+(((-1.0)*x3322*x3323))+(((-1.0)*x3330))+(((-1.0)*sj6*x3325))+(((-1.0)*r10*sj6*x3324)));
evalcond[4]=((((-1.0)*cj6*r10*x3321))+(((-0.21066117)*cj1))+(((0.17676784)*sj1))+((r11*sj6*x3321))+(((-1.0)*py*x3324))+(((-0.14999982)*cj6*x3325))+(((0.335)*x3327))+(((0.335)*x3329))+(((-1.0)*cj0*px))+(((0.14999982)*sj6*x3323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3331=((1.0)*cj6);
CheckValue<IkReal> x3332 = IKatan2WithCheck(IkReal((((r11*sj6))+(((-1.0)*r10*x3331)))),IkReal((((r01*sj6))+(((-1.0)*r00*x3331)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3332.valid){
continue;
}
CheckValue<IkReal> x3333=IKPowWithIntegerCheck(IKsign(((((-2000.0)*cj6*rxp0_2))+(((2000.0)*rxp1_2*sj6)))),-1);
if(!x3333.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3332.value)+(((1.5707963267949)*(x3333.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3334=IKcos(j0);
IkReal x3335=IKsin(j0);
IkReal x3336=(cj6*r00);
IkReal x3337=(r01*sj6);
IkReal x3338=((1.0)*x3335);
IkReal x3339=((0.14999982)*x3335);
IkReal x3340=(cj6*x3334);
IkReal x3341=(r11*sj6*x3334);
evalcond[0]=(((r10*sj6*x3334))+(((-1.0)*cj6*r01*x3338))+((r11*x3340))+(((-1.0)*r00*sj6*x3338)));
evalcond[1]=(x3341+(((-1.0)*x3337*x3338))+((x3335*x3336))+(((-1.0)*r10*x3340)));
evalcond[2]=((-0.0005)+(((-0.14999982)*x3341))+((py*x3334))+(((-1.0)*px*x3338))+((x3337*x3339))+(((-1.0)*x3336*x3339))+(((0.14999982)*r10*x3340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3342=((0.350613486964944)*cj6);
IkReal x3343=(r10*sj0);
IkReal x3344=((0.417839847914728)*cj0);
IkReal x3345=(r01*sj6);
IkReal x3346=(cj0*px);
IkReal x3347=(py*sj0);
IkReal x3348=(r11*sj0*sj6);
if( IKabs(((((-2.78560232882098)*pz))+((x3342*x3343))+(((2.33742605134422)*x3347))+(((2.33742605134422)*x3346))+(((-0.350613486964944)*x3348))+((cj0*r00*x3342))+(((-0.350613486964944)*cj0*x3345)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x3344*x3345))+(((-0.417839847914728)*cj6*x3343))+(((-2.33742605134422)*pz))+(((-2.78560232882098)*x3346))+(((-2.78560232882098)*x3347))+(((-1.0)*cj6*r00*x3344))+(((0.417839847914728)*x3348)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.78560232882098)*pz))+((x3342*x3343))+(((2.33742605134422)*x3347))+(((2.33742605134422)*x3346))+(((-0.350613486964944)*x3348))+((cj0*r00*x3342))+(((-0.350613486964944)*cj0*x3345))))+IKsqr((((x3344*x3345))+(((-0.417839847914728)*cj6*x3343))+(((-2.33742605134422)*pz))+(((-2.78560232882098)*x3346))+(((-2.78560232882098)*x3347))+(((-1.0)*cj6*r00*x3344))+(((0.417839847914728)*x3348))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.78560232882098)*pz))+((x3342*x3343))+(((2.33742605134422)*x3347))+(((2.33742605134422)*x3346))+(((-0.350613486964944)*x3348))+((cj0*r00*x3342))+(((-0.350613486964944)*cj0*x3345))), (((x3344*x3345))+(((-0.417839847914728)*cj6*x3343))+(((-2.33742605134422)*pz))+(((-2.78560232882098)*x3346))+(((-2.78560232882098)*x3347))+(((-1.0)*cj6*r00*x3344))+(((0.417839847914728)*x3348))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[3];
IkReal x3349=IKcos(j1);
IkReal x3350=IKsin(j1);
IkReal x3351=(cj0*cj6);
IkReal x3352=((0.14999982)*sj0);
IkReal x3353=(cj0*sj6);
IkReal x3354=((0.335)*sj0);
IkReal x3355=((0.21066117)*x3350);
IkReal x3356=((0.17676784)*x3349);
IkReal x3357=(x3355+x3356);
evalcond[0]=(((cj6*r11*x3354))+x3357+((r10*sj6*x3354))+(((0.335)*r01*x3351))+(((0.335)*r00*x3353))+pz);
evalcond[1]=((((0.14999982)*r00*x3351))+(((-0.17676784)*x3350))+((cj6*r10*x3352))+(((0.21066117)*x3349))+(((-0.14999982)*r01*x3353))+((cj0*px))+((py*sj0))+(((-1.0)*r11*sj6*x3352)));
evalcond[2]=((((-1.0)*x3357))+(((-1.0)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3358=cj1*cj1;
IkReal x3359=((2.98507462686567)*pz);
IkReal x3360=(cj1*sj1);
if( IKabs(((((-0.527665194029851)*x3358))+(((-1.0)*cj1*x3359))+(((-0.628839313432836)*x3360)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.628839313432836)+((sj1*x3359))+(((-0.628839313432836)*x3358))+(((0.527665194029851)*x3360)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.527665194029851)*x3358))+(((-1.0)*cj1*x3359))+(((-0.628839313432836)*x3360))))+IKsqr(((0.628839313432836)+((sj1*x3359))+(((-0.628839313432836)*x3358))+(((0.527665194029851)*x3360))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.527665194029851)*x3358))+(((-1.0)*cj1*x3359))+(((-0.628839313432836)*x3360))), ((0.628839313432836)+((sj1*x3359))+(((-0.628839313432836)*x3358))+(((0.527665194029851)*x3360))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x3361=IKsin(j2);
IkReal x3362=IKcos(j2);
IkReal x3363=((0.14999982)*sj0);
IkReal x3364=((1.0)*cj6);
IkReal x3365=(cj0*r01);
IkReal x3366=((1.0)*sj0);
IkReal x3367=(cj0*r00);
IkReal x3368=(cj1*x3361);
IkReal x3369=(cj1*x3362);
IkReal x3370=(sj1*x3362);
IkReal x3371=(sj1*x3361);
IkReal x3372=((1.0)*x3370);
evalcond[0]=(x3371+x3369);
evalcond[1]=(x3368+(((-1.0)*x3372)));
evalcond[2]=((((-0.335)*x3368))+(((-0.21066117)*sj1))+(((-1.0)*pz))+(((-0.17676784)*cj1))+(((0.335)*x3370)));
evalcond[3]=(x3368+(((-1.0)*sj6*x3367))+(((-1.0)*r10*sj6*x3366))+(((-1.0)*x3372))+(((-1.0)*r11*sj0*x3364))+(((-1.0)*x3364*x3365)));
evalcond[4]=((((0.335)*x3369))+(((-1.0)*py*x3366))+(((-0.21066117)*cj1))+(((0.17676784)*sj1))+((r11*sj6*x3363))+(((0.14999982)*sj6*x3365))+(((-1.0)*cj6*r10*x3363))+(((0.335)*x3371))+(((-1.0)*cj0*px))+(((-0.14999982)*cj6*x3367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j5), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x3373=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x3373);
rxp1_0=(pz*r11);
rxp1_1=(r01*x3373);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4=-1.5707963267949;
sj4=-1.0;
cj4=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
IkReal x3374=(rxp1_2*sj6);
IkReal x3375=(cj6*rxp0_2);
j0eval[0]=((((-1.0)*x3374))+x3375);
j0eval[1]=IKsign(((((2000.0)*x3375))+(((-2000.0)*x3374))));
j0eval[2]=((sj6*sj6)+(cj6*cj6));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x3376=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x3376);
rxp1_0=(pz*r11);
rxp1_1=(r01*x3376);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4=-1.5707963267949;
sj4=-1.0;
cj4=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
IkReal x3377=(cj6*rxp1_2);
IkReal x3378=(rxp0_2*sj6);
j0eval[0]=((((6.66665866667627)*x3377))+(((6.66665866667627)*x3378))+r22);
j0eval[1]=((sj6*sj6)+(cj6*cj6));
j0eval[2]=IKsign(((((300.00036)*r22))+(((2000.0)*x3377))+(((2000.0)*x3378))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x3379=IKPowWithIntegerCheck(IKsign(((((300.00036)*r22))+(((2000.0)*rxp0_2*sj6))+(((2000.0)*cj6*rxp1_2)))),-1);
if(!x3379.valid){
continue;
}
CheckValue<IkReal> x3380 = IKatan2WithCheck(IkReal((((r10*sj6))+((cj6*r11)))),IkReal((((r00*sj6))+((cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3380.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3379.value)))+(x3380.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3381=IKcos(j0);
IkReal x3382=IKsin(j0);
IkReal x3383=((0.15000018)*sj6);
IkReal x3384=((1.0)*sj6);
IkReal x3385=(r11*x3381);
IkReal x3386=(r01*x3382);
IkReal x3387=(r00*x3382);
IkReal x3388=((1.0)*cj6*x3382);
IkReal x3389=(cj6*r10*x3381);
evalcond[0]=((((-1.0)*x3384*x3387))+((cj6*x3385))+(((-1.0)*cj6*x3386))+((r10*sj6*x3381)));
evalcond[1]=((((-1.0)*x3384*x3385))+x3389+((sj6*x3386))+(((-1.0)*cj6*x3387)));
evalcond[2]=((-0.0005)+(((-0.15000018)*x3389))+(((-1.0)*x3383*x3386))+((py*x3381))+(((0.15000018)*cj6*x3387))+(((-1.0)*px*x3382))+((x3383*x3385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3390=(cj0*px);
IkReal x3391=(py*sj0);
IkReal x3392=(r11*sj0*sj6);
IkReal x3393=(cj0*cj6*r00);
IkReal x3394=(cj6*r10*sj0);
IkReal x3395=(cj0*r01*sj6);
if( IKabs(((((-2.78560232882098)*pz))+(((-0.350614328438323)*x3393))+(((-0.350614328438323)*x3394))+(((2.33742605134422)*x3390))+(((2.33742605134422)*x3391))+(((0.350614328438323)*x3392))+(((0.350614328438323)*x3395)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.33742605134422)*pz))+(((-2.78560232882098)*x3391))+(((-2.78560232882098)*x3390))+(((0.417840850731566)*x3393))+(((0.417840850731566)*x3394))+(((-0.417840850731566)*x3395))+(((-0.417840850731566)*x3392)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.78560232882098)*pz))+(((-0.350614328438323)*x3393))+(((-0.350614328438323)*x3394))+(((2.33742605134422)*x3390))+(((2.33742605134422)*x3391))+(((0.350614328438323)*x3392))+(((0.350614328438323)*x3395))))+IKsqr(((((-2.33742605134422)*pz))+(((-2.78560232882098)*x3391))+(((-2.78560232882098)*x3390))+(((0.417840850731566)*x3393))+(((0.417840850731566)*x3394))+(((-0.417840850731566)*x3395))+(((-0.417840850731566)*x3392))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.78560232882098)*pz))+(((-0.350614328438323)*x3393))+(((-0.350614328438323)*x3394))+(((2.33742605134422)*x3390))+(((2.33742605134422)*x3391))+(((0.350614328438323)*x3392))+(((0.350614328438323)*x3395))), ((((-2.33742605134422)*pz))+(((-2.78560232882098)*x3391))+(((-2.78560232882098)*x3390))+(((0.417840850731566)*x3393))+(((0.417840850731566)*x3394))+(((-0.417840850731566)*x3395))+(((-0.417840850731566)*x3392))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[3];
IkReal x3396=IKcos(j1);
IkReal x3397=IKsin(j1);
IkReal x3398=(cj0*r01);
IkReal x3399=((0.335)*cj6);
IkReal x3400=((0.15000018)*sj6);
IkReal x3401=(r11*sj0);
IkReal x3402=((0.15000018)*cj6);
IkReal x3403=(cj0*r00);
IkReal x3404=(r10*sj0);
IkReal x3405=((0.335)*sj6);
IkReal x3406=((0.21066117)*x3397);
IkReal x3407=((0.17676784)*x3396);
IkReal x3408=(x3407+x3406);
evalcond[0]=(x3408+((x3403*x3405))+((x3399*x3401))+pz+((x3398*x3399))+((x3404*x3405)));
evalcond[1]=((((-0.17676784)*x3397))+(((0.21066117)*x3396))+(((-1.0)*x3402*x3404))+(((-1.0)*x3402*x3403))+((x3398*x3400))+((x3400*x3401))+((cj0*px))+((py*sj0)));
evalcond[2]=((((-1.0)*pz))+(((-1.0)*x3408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3409=cj1*cj1;
IkReal x3410=((2.98507462686567)*pz);
IkReal x3411=(cj1*sj1);
if( IKabs(((((-0.628839313432836)*x3411))+(((-0.527665194029851)*x3409))+(((-1.0)*cj1*x3410)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.628839313432836)+((sj1*x3410))+(((-0.628839313432836)*x3409))+(((0.527665194029851)*x3411)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.628839313432836)*x3411))+(((-0.527665194029851)*x3409))+(((-1.0)*cj1*x3410))))+IKsqr(((0.628839313432836)+((sj1*x3410))+(((-0.628839313432836)*x3409))+(((0.527665194029851)*x3411))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.628839313432836)*x3411))+(((-0.527665194029851)*x3409))+(((-1.0)*cj1*x3410))), ((0.628839313432836)+((sj1*x3410))+(((-0.628839313432836)*x3409))+(((0.527665194029851)*x3411))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x3412=IKsin(j2);
IkReal x3413=IKcos(j2);
IkReal x3414=(cj0*cj6);
IkReal x3415=((1.0)*sj0);
IkReal x3416=(cj0*sj6);
IkReal x3417=((0.15000018)*sj0);
IkReal x3418=(cj1*x3412);
IkReal x3419=(cj1*x3413);
IkReal x3420=(sj1*x3413);
IkReal x3421=(sj1*x3412);
IkReal x3422=((1.0)*x3420);
evalcond[0]=(x3419+x3421);
evalcond[1]=((((-1.0)*x3422))+x3418);
evalcond[2]=((((-0.21066117)*sj1))+(((-0.335)*x3418))+(((-1.0)*pz))+(((0.335)*x3420))+(((-0.17676784)*cj1)));
evalcond[3]=((((-1.0)*r00*x3416))+(((-1.0)*r01*x3414))+(((-1.0)*cj6*r11*x3415))+(((-1.0)*x3422))+x3418+(((-1.0)*r10*sj6*x3415)));
evalcond[4]=((((-0.15000018)*r01*x3416))+(((-0.21066117)*cj1))+(((0.335)*x3419))+(((-1.0)*py*x3415))+(((0.17676784)*sj1))+((cj6*r10*x3417))+(((-1.0)*r11*sj6*x3417))+(((0.335)*x3421))+(((-1.0)*cj0*px))+(((0.15000018)*r00*x3414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3423=((1.0)*sj6);
CheckValue<IkReal> x3424=IKPowWithIntegerCheck(IKsign(((((-2000.0)*rxp1_2*sj6))+(((2000.0)*cj6*rxp0_2)))),-1);
if(!x3424.valid){
continue;
}
CheckValue<IkReal> x3425 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x3423))+((cj6*r10)))),IkReal(((((-1.0)*r01*x3423))+((cj6*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3425.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3424.value)))+(x3425.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3426=IKcos(j0);
IkReal x3427=IKsin(j0);
IkReal x3428=((0.15000018)*sj6);
IkReal x3429=((1.0)*sj6);
IkReal x3430=(r11*x3426);
IkReal x3431=(r01*x3427);
IkReal x3432=(r00*x3427);
IkReal x3433=((1.0)*cj6*x3427);
IkReal x3434=(cj6*r10*x3426);
evalcond[0]=(((cj6*x3430))+((r10*sj6*x3426))+(((-1.0)*cj6*x3431))+(((-1.0)*x3429*x3432)));
evalcond[1]=(((sj6*x3431))+x3434+(((-1.0)*cj6*x3432))+(((-1.0)*x3429*x3430)));
evalcond[2]=((-0.0005)+(((-1.0)*x3428*x3431))+((x3428*x3430))+(((-1.0)*px*x3427))+((py*x3426))+(((-0.15000018)*x3434))+(((0.15000018)*cj6*x3432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3435=(cj0*px);
IkReal x3436=(py*sj0);
IkReal x3437=(r11*sj0*sj6);
IkReal x3438=(cj0*cj6*r00);
IkReal x3439=(cj6*r10*sj0);
IkReal x3440=(cj0*r01*sj6);
if( IKabs(((((0.350614328438323)*x3440))+(((-0.350614328438323)*x3438))+(((-0.350614328438323)*x3439))+(((-2.78560232882098)*pz))+(((0.350614328438323)*x3437))+(((2.33742605134422)*x3436))+(((2.33742605134422)*x3435)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.417840850731566)*x3440))+(((-2.78560232882098)*x3435))+(((-2.78560232882098)*x3436))+(((-2.33742605134422)*pz))+(((-0.417840850731566)*x3437))+(((0.417840850731566)*x3438))+(((0.417840850731566)*x3439)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.350614328438323)*x3440))+(((-0.350614328438323)*x3438))+(((-0.350614328438323)*x3439))+(((-2.78560232882098)*pz))+(((0.350614328438323)*x3437))+(((2.33742605134422)*x3436))+(((2.33742605134422)*x3435))))+IKsqr(((((-0.417840850731566)*x3440))+(((-2.78560232882098)*x3435))+(((-2.78560232882098)*x3436))+(((-2.33742605134422)*pz))+(((-0.417840850731566)*x3437))+(((0.417840850731566)*x3438))+(((0.417840850731566)*x3439))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((0.350614328438323)*x3440))+(((-0.350614328438323)*x3438))+(((-0.350614328438323)*x3439))+(((-2.78560232882098)*pz))+(((0.350614328438323)*x3437))+(((2.33742605134422)*x3436))+(((2.33742605134422)*x3435))), ((((-0.417840850731566)*x3440))+(((-2.78560232882098)*x3435))+(((-2.78560232882098)*x3436))+(((-2.33742605134422)*pz))+(((-0.417840850731566)*x3437))+(((0.417840850731566)*x3438))+(((0.417840850731566)*x3439))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[3];
IkReal x3441=IKcos(j1);
IkReal x3442=IKsin(j1);
IkReal x3443=(cj0*r01);
IkReal x3444=((0.335)*cj6);
IkReal x3445=((0.15000018)*sj6);
IkReal x3446=(r11*sj0);
IkReal x3447=((0.15000018)*cj6);
IkReal x3448=(cj0*r00);
IkReal x3449=(r10*sj0);
IkReal x3450=((0.335)*sj6);
IkReal x3451=((0.21066117)*x3442);
IkReal x3452=((0.17676784)*x3441);
IkReal x3453=(x3452+x3451);
evalcond[0]=(((x3444*x3446))+((x3448*x3450))+x3453+pz+((x3443*x3444))+((x3449*x3450)));
evalcond[1]=((((-1.0)*x3447*x3449))+(((-1.0)*x3447*x3448))+(((0.21066117)*x3441))+(((-0.17676784)*x3442))+((x3445*x3446))+((x3443*x3445))+((cj0*px))+((py*sj0)));
evalcond[2]=((((-1.0)*x3453))+(((-1.0)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3454=cj1*cj1;
IkReal x3455=((2.98507462686567)*pz);
IkReal x3456=(cj1*sj1);
if( IKabs(((((-0.628839313432836)*x3456))+(((-1.0)*cj1*x3455))+(((-0.527665194029851)*x3454)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.628839313432836)+(((-0.628839313432836)*x3454))+((sj1*x3455))+(((0.527665194029851)*x3456)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.628839313432836)*x3456))+(((-1.0)*cj1*x3455))+(((-0.527665194029851)*x3454))))+IKsqr(((0.628839313432836)+(((-0.628839313432836)*x3454))+((sj1*x3455))+(((0.527665194029851)*x3456))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.628839313432836)*x3456))+(((-1.0)*cj1*x3455))+(((-0.527665194029851)*x3454))), ((0.628839313432836)+(((-0.628839313432836)*x3454))+((sj1*x3455))+(((0.527665194029851)*x3456))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x3457=IKsin(j2);
IkReal x3458=IKcos(j2);
IkReal x3459=(cj0*cj6);
IkReal x3460=((1.0)*sj0);
IkReal x3461=(cj0*sj6);
IkReal x3462=((0.15000018)*sj0);
IkReal x3463=(cj1*x3457);
IkReal x3464=(cj1*x3458);
IkReal x3465=(sj1*x3458);
IkReal x3466=(sj1*x3457);
IkReal x3467=((1.0)*x3465);
evalcond[0]=(x3466+x3464);
evalcond[1]=(x3463+(((-1.0)*x3467)));
evalcond[2]=((((0.335)*x3465))+(((-0.21066117)*sj1))+(((-0.335)*x3463))+(((-1.0)*pz))+(((-0.17676784)*cj1)));
evalcond[3]=((((-1.0)*r01*x3459))+(((-1.0)*cj6*r11*x3460))+x3463+(((-1.0)*x3467))+(((-1.0)*r10*sj6*x3460))+(((-1.0)*r00*x3461)));
evalcond[4]=((((0.335)*x3466))+(((0.335)*x3464))+(((-0.21066117)*cj1))+(((-1.0)*py*x3460))+(((0.17676784)*sj1))+(((0.15000018)*r00*x3459))+(((-0.15000018)*r01*x3461))+(((-1.0)*cj0*px))+((cj6*r10*x3462))+(((-1.0)*r11*sj6*x3462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3468=cj4*cj4;
IkReal x3469=cj5*cj5;
IkReal x3470=(cj4*sj5);
IkReal x3471=(cj5*sj4);
IkReal x3472=(cj6*r10);
IkReal x3473=(r01*sj6);
IkReal x3474=((1.0)*cj6*r00);
IkReal x3475=((1.0)*r11*sj6);
CheckValue<IkReal> x3476 = IKatan2WithCheck(IkReal((((x3470*x3473))+((x3471*x3473))+(((-1.0)*x3471*x3474))+(((-1.0)*x3470*x3474)))),IkReal((((x3470*x3472))+((x3471*x3472))+(((-1.0)*x3471*x3475))+(((-1.0)*x3470*x3475)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3476.valid){
continue;
}
CheckValue<IkReal> x3477=IKPowWithIntegerCheck(IKsign(((((-2.0)*x3468*x3469))+x3469+x3468+(((2.0)*x3470*x3471)))),-1);
if(!x3477.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3476.value)+(((1.5707963267949)*(x3477.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3478=IKcos(j0);
IkReal x3479=IKsin(j0);
IkReal x3480=(r01*sj6);
IkReal x3481=((0.15)*sj5);
IkReal x3482=(cj5*sj4);
IkReal x3483=((1.0)*cj4);
IkReal x3484=(cj6*r00);
IkReal x3485=(sj4*sj5);
IkReal x3486=(cj6*r10);
IkReal x3487=((1.11e-6)*cj5);
IkReal x3488=(r11*sj6);
IkReal x3489=(sj5*x3479);
IkReal x3490=(cj5*x3479);
IkReal x3491=(sj5*x3478);
IkReal x3492=((1.0)*x3479);
IkReal x3493=((1.8e-7)*x3479);
IkReal x3494=((1.0)*sj4*x3484);
IkReal x3495=(x3478*x3486);
IkReal x3496=(x3478*x3488);
evalcond[0]=((((-1.0)*r00*sj6*x3492))+(((-1.0)*cj6*r01*x3492))+((r10*sj6*x3478))+((cj6*r11*x3478)));
evalcond[1]=(((cj4*x3484*x3490))+((x3485*x3495))+(((-1.0)*x3480*x3483*x3490))+((x3479*x3480*x3485))+((cj4*cj5*x3496))+(((-1.0)*x3485*x3496))+(((-1.0)*cj5*x3483*x3495))+(((-1.0)*x3484*x3485*x3492)));
evalcond[2]=(((x3479*x3482*x3488))+(((-1.0)*x3483*x3486*x3489))+(((-1.0)*x3482*x3486*x3492))+((x3478*x3480*x3482))+(((-1.0)*x3483*x3484*x3491))+((cj4*x3480*x3491))+((cj4*x3488*x3489))+(((-1.0)*x3478*x3482*x3484)));
evalcond[3]=((-1.0)+(((-1.0)*x3483*x3484*x3489))+((cj4*x3486*x3491))+((x3479*x3480*x3482))+(((-1.0)*x3483*x3488*x3491))+(((-1.0)*x3482*x3484*x3492))+((x3482*x3495))+((cj4*x3480*x3489))+(((-1.0)*x3482*x3496)));
evalcond[4]=((-0.0005)+((x3481*x3495))+(((1.8e-7)*x3496))+(((-1.0)*x3480*x3493))+((x3479*x3480*x3481))+((x3479*x3480*x3487))+(((-1.0)*x3487*x3496))+((py*x3478))+(((-1.8e-7)*x3495))+((x3487*x3495))+(((-1.0)*px*x3492))+((x3484*x3493))+(((-1.0)*x3479*x3481*x3484))+(((-1.0)*x3479*x3484*x3487))+(((-1.0)*x3481*x3496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3497=(cj0*px);
IkReal x3498=((5.01408419187776e-7)*cj6);
IkReal x3499=(r10*sj0);
IkReal x3500=((2.59454291699209e-6)*cj5);
IkReal x3501=(cj0*r00);
IkReal x3502=((3.09201858499129e-6)*cj5);
IkReal x3503=(cj6*sj5);
IkReal x3504=((4.2073668924196e-7)*cj6);
IkReal x3505=((0.350613907701634)*sj5);
IkReal x3506=(py*sj0);
IkReal x3507=((0.417840349323147)*sj5);
IkReal x3508=(r11*sj0*sj6);
IkReal x3509=(cj0*r01*sj6);
if( IKabs(((((-2.78560232882098)*pz))+((cj6*x3499*x3500))+(((2.33742605134422)*x3506))+(((0.350613907701634)*x3501*x3503))+(((-1.0)*x3501*x3504))+((cj6*x3500*x3501))+(((-1.0)*x3499*x3504))+(((0.350613907701634)*x3499*x3503))+(((4.2073668924196e-7)*x3508))+(((4.2073668924196e-7)*x3509))+(((-1.0)*x3505*x3508))+(((-1.0)*x3505*x3509))+(((2.33742605134422)*x3497))+(((-1.0)*x3500*x3509))+(((-1.0)*x3500*x3508)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x3498*x3501))+((x3498*x3499))+(((-0.417840349323147)*x3499*x3503))+((x3507*x3509))+((x3507*x3508))+(((-1.0)*cj6*x3499*x3502))+(((-2.78560232882098)*x3497))+(((-2.33742605134422)*pz))+(((-1.0)*cj6*x3501*x3502))+((x3502*x3508))+((x3502*x3509))+(((-5.01408419187776e-7)*x3509))+(((-5.01408419187776e-7)*x3508))+(((-0.417840349323147)*x3501*x3503))+(((-2.78560232882098)*x3506)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.78560232882098)*pz))+((cj6*x3499*x3500))+(((2.33742605134422)*x3506))+(((0.350613907701634)*x3501*x3503))+(((-1.0)*x3501*x3504))+((cj6*x3500*x3501))+(((-1.0)*x3499*x3504))+(((0.350613907701634)*x3499*x3503))+(((4.2073668924196e-7)*x3508))+(((4.2073668924196e-7)*x3509))+(((-1.0)*x3505*x3508))+(((-1.0)*x3505*x3509))+(((2.33742605134422)*x3497))+(((-1.0)*x3500*x3509))+(((-1.0)*x3500*x3508))))+IKsqr((((x3498*x3501))+((x3498*x3499))+(((-0.417840349323147)*x3499*x3503))+((x3507*x3509))+((x3507*x3508))+(((-1.0)*cj6*x3499*x3502))+(((-2.78560232882098)*x3497))+(((-2.33742605134422)*pz))+(((-1.0)*cj6*x3501*x3502))+((x3502*x3508))+((x3502*x3509))+(((-5.01408419187776e-7)*x3509))+(((-5.01408419187776e-7)*x3508))+(((-0.417840349323147)*x3501*x3503))+(((-2.78560232882098)*x3506))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.78560232882098)*pz))+((cj6*x3499*x3500))+(((2.33742605134422)*x3506))+(((0.350613907701634)*x3501*x3503))+(((-1.0)*x3501*x3504))+((cj6*x3500*x3501))+(((-1.0)*x3499*x3504))+(((0.350613907701634)*x3499*x3503))+(((4.2073668924196e-7)*x3508))+(((4.2073668924196e-7)*x3509))+(((-1.0)*x3505*x3508))+(((-1.0)*x3505*x3509))+(((2.33742605134422)*x3497))+(((-1.0)*x3500*x3509))+(((-1.0)*x3500*x3508))), (((x3498*x3501))+((x3498*x3499))+(((-0.417840349323147)*x3499*x3503))+((x3507*x3509))+((x3507*x3508))+(((-1.0)*cj6*x3499*x3502))+(((-2.78560232882098)*x3497))+(((-2.33742605134422)*pz))+(((-1.0)*cj6*x3501*x3502))+((x3502*x3508))+((x3502*x3509))+(((-5.01408419187776e-7)*x3509))+(((-5.01408419187776e-7)*x3508))+(((-0.417840349323147)*x3501*x3503))+(((-2.78560232882098)*x3506))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[3];
IkReal x3510=IKcos(j1);
IkReal x3511=IKsin(j1);
IkReal x3512=(r11*sj0);
IkReal x3513=((0.335)*cj6);
IkReal x3514=(cj0*r01);
IkReal x3515=((1.11e-6)*cj5);
IkReal x3516=((1.8e-7)*sj6);
IkReal x3517=((0.15)*sj5);
IkReal x3518=((0.335)*sj6);
IkReal x3519=((0.21066117)*x3511);
IkReal x3520=((0.17676784)*x3510);
IkReal x3521=(sj6*x3515);
IkReal x3522=(cj6*r10*sj0);
IkReal x3523=(cj0*cj6*r00);
IkReal x3524=(x3519+x3520);
evalcond[0]=(x3524+pz+((r10*sj0*x3518))+((cj0*r00*x3518))+((x3513*x3514))+((x3512*x3513)));
evalcond[1]=((((-1.0)*x3512*x3521))+((x3517*x3522))+((x3517*x3523))+(((-1.8e-7)*x3522))+(((-1.8e-7)*x3523))+(((-1.0)*sj6*x3514*x3517))+(((-1.0)*sj6*x3512*x3517))+(((0.21066117)*x3510))+((x3515*x3523))+((x3515*x3522))+((x3514*x3516))+((cj0*px))+((py*sj0))+((x3512*x3516))+(((-0.17676784)*x3511))+(((-1.0)*x3514*x3521)));
evalcond[2]=((((-1.0)*x3524))+(((-1.0)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3525=cj1*cj1;
IkReal x3526=((2.98507462686567)*pz);
IkReal x3527=(cj1*sj1);
if( IKabs(((((-0.527665194029851)*x3525))+(((-1.0)*cj1*x3526))+(((-0.628839313432836)*x3527)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.628839313432836)+(((-0.628839313432836)*x3525))+((sj1*x3526))+(((0.527665194029851)*x3527)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.527665194029851)*x3525))+(((-1.0)*cj1*x3526))+(((-0.628839313432836)*x3527))))+IKsqr(((0.628839313432836)+(((-0.628839313432836)*x3525))+((sj1*x3526))+(((0.527665194029851)*x3527))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.527665194029851)*x3525))+(((-1.0)*cj1*x3526))+(((-0.628839313432836)*x3527))), ((0.628839313432836)+(((-0.628839313432836)*x3525))+((sj1*x3526))+(((0.527665194029851)*x3527))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x3528=IKsin(j2);
IkReal x3529=IKcos(j2);
IkReal x3530=((1.0)*cj6);
IkReal x3531=(cj0*r01);
IkReal x3532=(r11*sj0);
IkReal x3533=((1.11e-6)*cj5);
IkReal x3534=((1.0)*sj0);
IkReal x3535=((0.15)*sj5);
IkReal x3536=((1.0)*cj0);
IkReal x3537=((1.8e-7)*sj6);
IkReal x3538=(cj1*x3528);
IkReal x3539=(cj1*x3529);
IkReal x3540=(sj6*x3533);
IkReal x3541=(cj6*r10*sj0);
IkReal x3542=(sj1*x3529);
IkReal x3543=(sj1*x3528);
IkReal x3544=(cj0*cj6*r00);
IkReal x3545=((1.0)*x3542);
evalcond[0]=(x3539+x3543);
evalcond[1]=(x3538+(((-1.0)*x3545)));
evalcond[2]=((((-0.21066117)*sj1))+(((-0.335)*x3538))+(((-1.0)*pz))+(((0.335)*x3542))+(((-0.17676784)*cj1)));
evalcond[3]=(x3538+(((-1.0)*r10*sj6*x3534))+(((-1.0)*r00*sj6*x3536))+(((-1.0)*x3530*x3531))+(((-1.0)*x3530*x3532))+(((-1.0)*x3545)));
evalcond[4]=((((0.335)*x3539))+(((-0.21066117)*cj1))+(((0.17676784)*sj1))+(((-1.0)*py*x3534))+(((-1.0)*x3533*x3541))+(((-1.0)*x3533*x3544))+((x3532*x3540))+(((-1.0)*x3535*x3541))+(((-1.0)*x3535*x3544))+(((-1.0)*x3531*x3537))+(((-1.0)*px*x3536))+(((0.335)*x3543))+((x3531*x3540))+(((1.8e-7)*x3544))+(((1.8e-7)*x3541))+(((-1.0)*x3532*x3537))+((sj6*x3531*x3535))+((sj6*x3532*x3535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x3546 = IKatan2WithCheck(IkReal((((r10*sj6))+((cj6*r11)))),IkReal((((r00*sj6))+((cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3546.valid){
continue;
}
CheckValue<IkReal> x3547=IKPowWithIntegerCheck(IKsign(((((2000.0)*rxp0_2*sj6))+((r22*(((0.00036)+(((-0.00222)*cj5))+(((-300.0)*sj5))))))+(((2000.0)*cj6*rxp1_2)))),-1);
if(!x3547.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3546.value)+(((1.5707963267949)*(x3547.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3548=IKcos(j0);
IkReal x3549=IKsin(j0);
IkReal x3550=(r01*sj6);
IkReal x3551=((0.15)*sj5);
IkReal x3552=(cj5*sj4);
IkReal x3553=((1.0)*cj4);
IkReal x3554=(cj6*r00);
IkReal x3555=(sj4*sj5);
IkReal x3556=(cj6*r10);
IkReal x3557=((1.11e-6)*cj5);
IkReal x3558=(r11*sj6);
IkReal x3559=(sj5*x3549);
IkReal x3560=(cj5*x3549);
IkReal x3561=(sj5*x3548);
IkReal x3562=((1.0)*x3549);
IkReal x3563=((1.8e-7)*x3549);
IkReal x3564=((1.0)*sj4*x3554);
IkReal x3565=(x3548*x3556);
IkReal x3566=(x3548*x3558);
evalcond[0]=((((-1.0)*r00*sj6*x3562))+((r10*sj6*x3548))+(((-1.0)*cj6*r01*x3562))+((cj6*r11*x3548)));
evalcond[1]=(((cj4*cj5*x3566))+(((-1.0)*x3555*x3566))+((cj4*x3554*x3560))+(((-1.0)*x3550*x3553*x3560))+(((-1.0)*cj5*x3553*x3565))+((x3555*x3565))+((x3549*x3550*x3555))+(((-1.0)*x3554*x3555*x3562)));
evalcond[2]=(((x3548*x3550*x3552))+(((-1.0)*x3553*x3556*x3559))+(((-1.0)*x3553*x3554*x3561))+(((-1.0)*x3548*x3552*x3554))+((cj4*x3550*x3561))+((x3549*x3552*x3558))+(((-1.0)*x3552*x3556*x3562))+((cj4*x3558*x3559)));
evalcond[3]=((-1.0)+((cj4*x3556*x3561))+(((-1.0)*x3552*x3554*x3562))+(((-1.0)*x3552*x3566))+((cj4*x3550*x3559))+(((-1.0)*x3553*x3554*x3559))+((x3552*x3565))+((x3549*x3550*x3552))+(((-1.0)*x3553*x3558*x3561)));
evalcond[4]=((-0.0005)+(((-1.8e-7)*x3565))+((py*x3548))+(((-1.0)*x3551*x3566))+(((-1.0)*px*x3562))+(((-1.0)*x3550*x3563))+((x3551*x3565))+(((-1.0)*x3549*x3554*x3557))+(((1.8e-7)*x3566))+((x3554*x3563))+(((-1.0)*x3557*x3566))+((x3549*x3550*x3557))+((x3549*x3550*x3551))+((x3557*x3565))+(((-1.0)*x3549*x3551*x3554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3567=(cj0*px);
IkReal x3568=((5.01408419187776e-7)*cj6);
IkReal x3569=(r10*sj0);
IkReal x3570=((2.59454291699209e-6)*cj5);
IkReal x3571=(cj0*r00);
IkReal x3572=((3.09201858499129e-6)*cj5);
IkReal x3573=(cj6*sj5);
IkReal x3574=((4.2073668924196e-7)*cj6);
IkReal x3575=((0.350613907701634)*sj5);
IkReal x3576=(py*sj0);
IkReal x3577=((0.417840349323147)*sj5);
IkReal x3578=(r11*sj0*sj6);
IkReal x3579=(cj0*r01*sj6);
if( IKabs(((((-2.78560232882098)*pz))+(((0.350613907701634)*x3571*x3573))+(((2.33742605134422)*x3567))+(((-1.0)*x3575*x3579))+(((-1.0)*x3575*x3578))+(((2.33742605134422)*x3576))+(((0.350613907701634)*x3569*x3573))+(((-1.0)*x3571*x3574))+((cj6*x3570*x3571))+(((-1.0)*x3569*x3574))+((cj6*x3569*x3570))+(((4.2073668924196e-7)*x3578))+(((4.2073668924196e-7)*x3579))+(((-1.0)*x3570*x3579))+(((-1.0)*x3570*x3578)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.78560232882098)*x3567))+(((-1.0)*cj6*x3569*x3572))+(((-1.0)*cj6*x3571*x3572))+(((-2.33742605134422)*pz))+((x3568*x3569))+(((-5.01408419187776e-7)*x3579))+(((-5.01408419187776e-7)*x3578))+((x3568*x3571))+((x3572*x3578))+((x3572*x3579))+(((-0.417840349323147)*x3569*x3573))+((x3577*x3578))+((x3577*x3579))+(((-2.78560232882098)*x3576))+(((-0.417840349323147)*x3571*x3573)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.78560232882098)*pz))+(((0.350613907701634)*x3571*x3573))+(((2.33742605134422)*x3567))+(((-1.0)*x3575*x3579))+(((-1.0)*x3575*x3578))+(((2.33742605134422)*x3576))+(((0.350613907701634)*x3569*x3573))+(((-1.0)*x3571*x3574))+((cj6*x3570*x3571))+(((-1.0)*x3569*x3574))+((cj6*x3569*x3570))+(((4.2073668924196e-7)*x3578))+(((4.2073668924196e-7)*x3579))+(((-1.0)*x3570*x3579))+(((-1.0)*x3570*x3578))))+IKsqr(((((-2.78560232882098)*x3567))+(((-1.0)*cj6*x3569*x3572))+(((-1.0)*cj6*x3571*x3572))+(((-2.33742605134422)*pz))+((x3568*x3569))+(((-5.01408419187776e-7)*x3579))+(((-5.01408419187776e-7)*x3578))+((x3568*x3571))+((x3572*x3578))+((x3572*x3579))+(((-0.417840349323147)*x3569*x3573))+((x3577*x3578))+((x3577*x3579))+(((-2.78560232882098)*x3576))+(((-0.417840349323147)*x3571*x3573))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.78560232882098)*pz))+(((0.350613907701634)*x3571*x3573))+(((2.33742605134422)*x3567))+(((-1.0)*x3575*x3579))+(((-1.0)*x3575*x3578))+(((2.33742605134422)*x3576))+(((0.350613907701634)*x3569*x3573))+(((-1.0)*x3571*x3574))+((cj6*x3570*x3571))+(((-1.0)*x3569*x3574))+((cj6*x3569*x3570))+(((4.2073668924196e-7)*x3578))+(((4.2073668924196e-7)*x3579))+(((-1.0)*x3570*x3579))+(((-1.0)*x3570*x3578))), ((((-2.78560232882098)*x3567))+(((-1.0)*cj6*x3569*x3572))+(((-1.0)*cj6*x3571*x3572))+(((-2.33742605134422)*pz))+((x3568*x3569))+(((-5.01408419187776e-7)*x3579))+(((-5.01408419187776e-7)*x3578))+((x3568*x3571))+((x3572*x3578))+((x3572*x3579))+(((-0.417840349323147)*x3569*x3573))+((x3577*x3578))+((x3577*x3579))+(((-2.78560232882098)*x3576))+(((-0.417840349323147)*x3571*x3573))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[3];
IkReal x3580=IKcos(j1);
IkReal x3581=IKsin(j1);
IkReal x3582=(r11*sj0);
IkReal x3583=((0.335)*cj6);
IkReal x3584=(cj0*r01);
IkReal x3585=((1.11e-6)*cj5);
IkReal x3586=((1.8e-7)*sj6);
IkReal x3587=((0.15)*sj5);
IkReal x3588=((0.335)*sj6);
IkReal x3589=((0.21066117)*x3581);
IkReal x3590=((0.17676784)*x3580);
IkReal x3591=(sj6*x3585);
IkReal x3592=(cj6*r10*sj0);
IkReal x3593=(cj0*cj6*r00);
IkReal x3594=(x3589+x3590);
evalcond[0]=(((x3583*x3584))+((r10*sj0*x3588))+x3594+pz+((cj0*r00*x3588))+((x3582*x3583)));
evalcond[1]=(((x3585*x3593))+((x3585*x3592))+(((-0.17676784)*x3581))+((x3584*x3586))+(((-1.0)*x3582*x3591))+(((-1.8e-7)*x3593))+(((-1.8e-7)*x3592))+((x3587*x3592))+((x3587*x3593))+(((-1.0)*sj6*x3582*x3587))+(((0.21066117)*x3580))+(((-1.0)*x3584*x3591))+((cj0*px))+((py*sj0))+((x3582*x3586))+(((-1.0)*sj6*x3584*x3587)));
evalcond[2]=((((-1.0)*pz))+(((-1.0)*x3594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3595=cj1*cj1;
IkReal x3596=((2.98507462686567)*pz);
IkReal x3597=(cj1*sj1);
if( IKabs(((((-1.0)*cj1*x3596))+(((-0.628839313432836)*x3597))+(((-0.527665194029851)*x3595)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.628839313432836)+((sj1*x3596))+(((-0.628839313432836)*x3595))+(((0.527665194029851)*x3597)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x3596))+(((-0.628839313432836)*x3597))+(((-0.527665194029851)*x3595))))+IKsqr(((0.628839313432836)+((sj1*x3596))+(((-0.628839313432836)*x3595))+(((0.527665194029851)*x3597))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x3596))+(((-0.628839313432836)*x3597))+(((-0.527665194029851)*x3595))), ((0.628839313432836)+((sj1*x3596))+(((-0.628839313432836)*x3595))+(((0.527665194029851)*x3597))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x3598=IKsin(j2);
IkReal x3599=IKcos(j2);
IkReal x3600=((1.0)*cj6);
IkReal x3601=(cj0*r01);
IkReal x3602=(r11*sj0);
IkReal x3603=((1.11e-6)*cj5);
IkReal x3604=((1.0)*sj0);
IkReal x3605=((0.15)*sj5);
IkReal x3606=((1.0)*cj0);
IkReal x3607=((1.8e-7)*sj6);
IkReal x3608=(cj1*x3598);
IkReal x3609=(cj1*x3599);
IkReal x3610=(sj6*x3603);
IkReal x3611=(cj6*r10*sj0);
IkReal x3612=(sj1*x3599);
IkReal x3613=(sj1*x3598);
IkReal x3614=(cj0*cj6*r00);
IkReal x3615=((1.0)*x3612);
evalcond[0]=(x3613+x3609);
evalcond[1]=(x3608+(((-1.0)*x3615)));
evalcond[2]=((((-0.21066117)*sj1))+(((-0.335)*x3608))+(((-1.0)*pz))+(((-0.17676784)*cj1))+(((0.335)*x3612)));
evalcond[3]=(x3608+(((-1.0)*x3600*x3601))+(((-1.0)*x3600*x3602))+(((-1.0)*r00*sj6*x3606))+(((-1.0)*x3615))+(((-1.0)*r10*sj6*x3604)));
evalcond[4]=((((-1.0)*x3605*x3611))+(((-1.0)*x3605*x3614))+(((-0.21066117)*cj1))+(((-1.0)*py*x3604))+(((0.17676784)*sj1))+(((-1.0)*x3603*x3611))+(((-1.0)*x3603*x3614))+(((-1.0)*x3601*x3607))+(((-1.0)*x3602*x3607))+((sj6*x3602*x3605))+((sj6*x3601*x3605))+(((1.8e-7)*x3611))+(((1.8e-7)*x3614))+((x3602*x3610))+((x3601*x3610))+(((-1.0)*px*x3606))+(((0.335)*x3613))+(((0.335)*x3609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x3616=IKPowWithIntegerCheck(IKsign((r22*(((((-1.0)*cj5*sj4))+(((-1.0)*cj4*sj5)))))),-1);
if(!x3616.valid){
continue;
}
CheckValue<IkReal> x3617 = IKatan2WithCheck(IkReal((((r10*sj6))+((cj6*r11)))),IkReal((((r00*sj6))+((cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3617.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3616.value)))+(x3617.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3618=IKcos(j0);
IkReal x3619=IKsin(j0);
IkReal x3620=(r01*sj6);
IkReal x3621=((0.15)*sj5);
IkReal x3622=(cj5*sj4);
IkReal x3623=((1.0)*cj4);
IkReal x3624=(cj6*r00);
IkReal x3625=(sj4*sj5);
IkReal x3626=(cj6*r10);
IkReal x3627=((1.11e-6)*cj5);
IkReal x3628=(r11*sj6);
IkReal x3629=(sj5*x3619);
IkReal x3630=(cj5*x3619);
IkReal x3631=(sj5*x3618);
IkReal x3632=((1.0)*x3619);
IkReal x3633=((1.8e-7)*x3619);
IkReal x3634=((1.0)*sj4*x3624);
IkReal x3635=(x3618*x3626);
IkReal x3636=(x3618*x3628);
evalcond[0]=(((cj6*r11*x3618))+((r10*sj6*x3618))+(((-1.0)*cj6*r01*x3632))+(((-1.0)*r00*sj6*x3632)));
evalcond[1]=((((-1.0)*x3620*x3623*x3630))+((x3625*x3635))+(((-1.0)*cj5*x3623*x3635))+((x3619*x3620*x3625))+(((-1.0)*x3624*x3625*x3632))+(((-1.0)*x3625*x3636))+((cj4*x3624*x3630))+((cj4*cj5*x3636)));
evalcond[2]=((((-1.0)*x3623*x3626*x3629))+(((-1.0)*x3623*x3624*x3631))+((cj4*x3620*x3631))+(((-1.0)*x3622*x3626*x3632))+((x3619*x3622*x3628))+((x3618*x3620*x3622))+(((-1.0)*x3618*x3622*x3624))+((cj4*x3628*x3629)));
evalcond[3]=((-1.0)+(((-1.0)*x3622*x3624*x3632))+((x3622*x3635))+(((-1.0)*x3623*x3628*x3631))+(((-1.0)*x3622*x3636))+((x3619*x3620*x3622))+((cj4*x3626*x3631))+((cj4*x3620*x3629))+(((-1.0)*x3623*x3624*x3629)));
evalcond[4]=((-0.0005)+(((-1.0)*x3627*x3636))+((x3621*x3635))+(((-1.8e-7)*x3635))+(((-1.0)*x3620*x3633))+(((-1.0)*x3621*x3636))+((x3619*x3620*x3621))+((x3619*x3620*x3627))+((py*x3618))+(((-1.0)*x3619*x3621*x3624))+(((-1.0)*px*x3632))+(((1.8e-7)*x3636))+(((-1.0)*x3619*x3624*x3627))+((x3627*x3635))+((x3624*x3633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3637=(cj0*px);
IkReal x3638=((5.01408419187776e-7)*cj6);
IkReal x3639=(r10*sj0);
IkReal x3640=((2.59454291699209e-6)*cj5);
IkReal x3641=(cj0*r00);
IkReal x3642=((3.09201858499129e-6)*cj5);
IkReal x3643=(cj6*sj5);
IkReal x3644=((4.2073668924196e-7)*cj6);
IkReal x3645=((0.350613907701634)*sj5);
IkReal x3646=(py*sj0);
IkReal x3647=((0.417840349323147)*sj5);
IkReal x3648=(r11*sj0*sj6);
IkReal x3649=(cj0*r01*sj6);
if( IKabs((((cj6*x3640*x3641))+(((-1.0)*x3640*x3648))+(((-1.0)*x3640*x3649))+(((-2.78560232882098)*pz))+(((4.2073668924196e-7)*x3649))+(((4.2073668924196e-7)*x3648))+(((2.33742605134422)*x3637))+(((2.33742605134422)*x3646))+(((0.350613907701634)*x3639*x3643))+(((-1.0)*x3639*x3644))+(((-1.0)*x3645*x3648))+(((-1.0)*x3645*x3649))+((cj6*x3639*x3640))+(((0.350613907701634)*x3641*x3643))+(((-1.0)*x3641*x3644)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*x3639*x3642))+(((-1.0)*cj6*x3641*x3642))+(((-2.78560232882098)*x3646))+((x3638*x3639))+(((-2.33742605134422)*pz))+(((-5.01408419187776e-7)*x3649))+(((-5.01408419187776e-7)*x3648))+((x3647*x3649))+((x3647*x3648))+(((-0.417840349323147)*x3639*x3643))+((x3642*x3649))+((x3642*x3648))+((x3638*x3641))+(((-0.417840349323147)*x3641*x3643))+(((-2.78560232882098)*x3637)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*x3640*x3641))+(((-1.0)*x3640*x3648))+(((-1.0)*x3640*x3649))+(((-2.78560232882098)*pz))+(((4.2073668924196e-7)*x3649))+(((4.2073668924196e-7)*x3648))+(((2.33742605134422)*x3637))+(((2.33742605134422)*x3646))+(((0.350613907701634)*x3639*x3643))+(((-1.0)*x3639*x3644))+(((-1.0)*x3645*x3648))+(((-1.0)*x3645*x3649))+((cj6*x3639*x3640))+(((0.350613907701634)*x3641*x3643))+(((-1.0)*x3641*x3644))))+IKsqr(((((-1.0)*cj6*x3639*x3642))+(((-1.0)*cj6*x3641*x3642))+(((-2.78560232882098)*x3646))+((x3638*x3639))+(((-2.33742605134422)*pz))+(((-5.01408419187776e-7)*x3649))+(((-5.01408419187776e-7)*x3648))+((x3647*x3649))+((x3647*x3648))+(((-0.417840349323147)*x3639*x3643))+((x3642*x3649))+((x3642*x3648))+((x3638*x3641))+(((-0.417840349323147)*x3641*x3643))+(((-2.78560232882098)*x3637))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((cj6*x3640*x3641))+(((-1.0)*x3640*x3648))+(((-1.0)*x3640*x3649))+(((-2.78560232882098)*pz))+(((4.2073668924196e-7)*x3649))+(((4.2073668924196e-7)*x3648))+(((2.33742605134422)*x3637))+(((2.33742605134422)*x3646))+(((0.350613907701634)*x3639*x3643))+(((-1.0)*x3639*x3644))+(((-1.0)*x3645*x3648))+(((-1.0)*x3645*x3649))+((cj6*x3639*x3640))+(((0.350613907701634)*x3641*x3643))+(((-1.0)*x3641*x3644))), ((((-1.0)*cj6*x3639*x3642))+(((-1.0)*cj6*x3641*x3642))+(((-2.78560232882098)*x3646))+((x3638*x3639))+(((-2.33742605134422)*pz))+(((-5.01408419187776e-7)*x3649))+(((-5.01408419187776e-7)*x3648))+((x3647*x3649))+((x3647*x3648))+(((-0.417840349323147)*x3639*x3643))+((x3642*x3649))+((x3642*x3648))+((x3638*x3641))+(((-0.417840349323147)*x3641*x3643))+(((-2.78560232882098)*x3637))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[3];
IkReal x3650=IKcos(j1);
IkReal x3651=IKsin(j1);
IkReal x3652=(r11*sj0);
IkReal x3653=((0.335)*cj6);
IkReal x3654=(cj0*r01);
IkReal x3655=((1.11e-6)*cj5);
IkReal x3656=((1.8e-7)*sj6);
IkReal x3657=((0.15)*sj5);
IkReal x3658=((0.335)*sj6);
IkReal x3659=((0.21066117)*x3651);
IkReal x3660=((0.17676784)*x3650);
IkReal x3661=(sj6*x3655);
IkReal x3662=(cj6*r10*sj0);
IkReal x3663=(cj0*cj6*r00);
IkReal x3664=(x3660+x3659);
evalcond[0]=(((x3653*x3654))+((x3652*x3653))+x3664+((cj0*r00*x3658))+pz+((r10*sj0*x3658)));
evalcond[1]=(((x3652*x3656))+(((-1.0)*sj6*x3652*x3657))+(((-1.0)*x3652*x3661))+(((-1.0)*x3654*x3661))+(((-0.17676784)*x3651))+((x3657*x3663))+((x3657*x3662))+((x3654*x3656))+(((0.21066117)*x3650))+((x3655*x3662))+((x3655*x3663))+(((-1.0)*sj6*x3654*x3657))+((cj0*px))+((py*sj0))+(((-1.8e-7)*x3662))+(((-1.8e-7)*x3663)));
evalcond[2]=((((-1.0)*x3664))+(((-1.0)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3665=cj1*cj1;
IkReal x3666=((2.98507462686567)*pz);
IkReal x3667=(cj1*sj1);
if( IKabs(((((-0.628839313432836)*x3667))+(((-1.0)*cj1*x3666))+(((-0.527665194029851)*x3665)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.628839313432836)+((sj1*x3666))+(((0.527665194029851)*x3667))+(((-0.628839313432836)*x3665)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.628839313432836)*x3667))+(((-1.0)*cj1*x3666))+(((-0.527665194029851)*x3665))))+IKsqr(((0.628839313432836)+((sj1*x3666))+(((0.527665194029851)*x3667))+(((-0.628839313432836)*x3665))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.628839313432836)*x3667))+(((-1.0)*cj1*x3666))+(((-0.527665194029851)*x3665))), ((0.628839313432836)+((sj1*x3666))+(((0.527665194029851)*x3667))+(((-0.628839313432836)*x3665))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x3668=IKsin(j2);
IkReal x3669=IKcos(j2);
IkReal x3670=((1.0)*cj6);
IkReal x3671=(cj0*r01);
IkReal x3672=(r11*sj0);
IkReal x3673=((1.11e-6)*cj5);
IkReal x3674=((1.0)*sj0);
IkReal x3675=((0.15)*sj5);
IkReal x3676=((1.0)*cj0);
IkReal x3677=((1.8e-7)*sj6);
IkReal x3678=(cj1*x3668);
IkReal x3679=(cj1*x3669);
IkReal x3680=(sj6*x3673);
IkReal x3681=(cj6*r10*sj0);
IkReal x3682=(sj1*x3669);
IkReal x3683=(sj1*x3668);
IkReal x3684=(cj0*cj6*r00);
IkReal x3685=((1.0)*x3682);
evalcond[0]=(x3683+x3679);
evalcond[1]=((((-1.0)*x3685))+x3678);
evalcond[2]=((((-0.21066117)*sj1))+(((0.335)*x3682))+(((-1.0)*pz))+(((-0.17676784)*cj1))+(((-0.335)*x3678)));
evalcond[3]=((((-1.0)*x3670*x3672))+(((-1.0)*x3670*x3671))+(((-1.0)*x3685))+(((-1.0)*r00*sj6*x3676))+x3678+(((-1.0)*r10*sj6*x3674)));
evalcond[4]=(((x3672*x3680))+(((-1.0)*x3671*x3677))+((sj6*x3672*x3675))+(((-0.21066117)*cj1))+(((1.8e-7)*x3681))+(((1.8e-7)*x3684))+(((-1.0)*py*x3674))+((x3671*x3680))+(((0.17676784)*sj1))+((sj6*x3671*x3675))+(((0.335)*x3683))+(((-1.0)*x3672*x3677))+(((-1.0)*x3675*x3684))+(((-1.0)*x3675*x3681))+(((-1.0)*px*x3676))+(((0.335)*x3679))+(((-1.0)*x3673*x3681))+(((-1.0)*x3673*x3684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x3686=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x3686);
rxp1_0=(pz*r11);
rxp1_1=(r01*x3686);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4=0;
sj4=0;
cj4=1.0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
IkReal x3687=cj6*cj6;
IkReal x3688=sj3*sj3;
IkReal x3689=cj3*cj3;
IkReal x3690=sj6*sj6;
j0eval[0]=r22;
j0eval[1]=(((x3688*x3690))+((x3689*x3690))+((x3687*x3688))+((x3687*x3689)));
j0eval[2]=IKsign(r22);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x3691=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x3691);
rxp1_0=(pz*r11);
rxp1_1=(r01*x3691);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4=0;
sj4=0;
cj4=1.0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
IkReal x3692=(rxp1_2*sj6);
IkReal x3693=(cj6*r00);
IkReal x3694=(cj6*rxp0_2);
IkReal x3695=(cj6*r10);
IkReal x3696=((2000.0)*sj3);
IkReal x3697=((299.99964)*sj3);
IkReal x3698=((1.0)*sj6);
j0eval[0]=(x3694+(((-1.0)*x3692)));
j0eval[1]=((IKabs((((x3693*x3697))+x3693+(((-1.0)*r01*sj6*x3697))+((px*x3696))+(((-1.0)*r01*x3698)))))+(IKabs(((((-1.0)*r11*x3698))+((x3695*x3697))+((py*x3696))+x3695+(((-1.0)*r11*sj6*x3697))))));
j0eval[2]=IKsign(((((-2000.0)*x3692))+(((2000.0)*x3694))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x3699=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x3699);
rxp1_0=(pz*r11);
rxp1_1=(r01*x3699);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4=0;
sj4=0;
cj4=1.0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
IkReal x3700=(rxp0_2*sj6);
IkReal x3701=(cj6*rxp1_2);
IkReal x3702=((299.99964)*cj3);
IkReal x3703=((2000.0)*cj3);
j0eval[0]=((((6.66667466667627)*x3701))+(((6.66667466667627)*x3700))+(((-1.0)*r22)));
j0eval[1]=((IKabs((((r10*sj6))+(((-1.0)*cj6*r10*x3702))+((r11*sj6*x3702))+(((-1.0)*py*x3703))+((cj6*r11)))))+(IKabs((((r00*sj6))+(((-1.0)*cj6*r00*x3702))+(((-1.0)*px*x3703))+((r01*sj6*x3702))+((cj6*r01))))));
j0eval[2]=IKsign(((((2000.0)*x3701))+(((2000.0)*x3700))+(((-299.99964)*r22))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3704=((299.99964)*cj3);
IkReal x3705=((2000.0)*cj3);
CheckValue<IkReal> x3706 = IKatan2WithCheck(IkReal((((r10*sj6))+(((-1.0)*cj6*r10*x3704))+((r11*sj6*x3704))+(((-1.0)*py*x3705))+((cj6*r11)))),IkReal((((r00*sj6))+(((-1.0)*cj6*r00*x3704))+(((-1.0)*px*x3705))+((r01*sj6*x3704))+((cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3706.valid){
continue;
}
CheckValue<IkReal> x3707=IKPowWithIntegerCheck(IKsign(((((2000.0)*rxp0_2*sj6))+(((-299.99964)*r22))+(((2000.0)*cj6*rxp1_2)))),-1);
if(!x3707.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3706.value)+(((1.5707963267949)*(x3707.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3708=IKcos(j0);
IkReal x3709=IKsin(j0);
IkReal x3710=(cj6*r00);
IkReal x3711=(r01*sj6);
IkReal x3712=((1.0)*x3709);
IkReal x3713=((0.14999982)*x3709);
IkReal x3714=(cj6*x3708);
IkReal x3715=(r11*sj6*x3708);
evalcond[0]=(sj3+((x3709*x3711))+(((-1.0)*x3710*x3712))+((r10*x3714))+(((-1.0)*x3715)));
evalcond[1]=((((-1.0)*cj6*r01*x3712))+((r11*x3714))+((r10*sj6*x3708))+(((-1.0)*r00*sj6*x3712))+(((-1.0)*cj3)));
evalcond[2]=((-0.0005)+((x3711*x3713))+(((-1.0)*px*x3712))+(((-1.0)*x3710*x3713))+(((-0.14999982)*x3715))+((py*x3708))+(((0.14999982)*r10*x3714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3716=((0.350613486964944)*cj6);
IkReal x3717=(r10*sj0);
IkReal x3718=((0.417839847914728)*cj0);
IkReal x3719=(r01*sj6);
IkReal x3720=(cj0*px);
IkReal x3721=(py*sj0);
IkReal x3722=(r11*sj0*sj6);
if( IKabs(((((0.933173688136443)*r22))+(((-2.78560232882098)*pz))+(((-0.350613486964944)*cj0*x3719))+((cj0*r00*x3716))+(((2.33742605134422)*x3720))+(((2.33742605134422)*x3721))+(((-0.350613486964944)*x3722))+((x3716*x3717)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.78560232882098)*x3720))+(((-2.78560232882098)*x3721))+(((-1.0)*cj6*r00*x3718))+(((0.417839847914728)*x3722))+(((-0.417839847914728)*cj6*x3717))+((x3718*x3719))+(((-2.33742605134422)*pz))+(((0.783035132657398)*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.933173688136443)*r22))+(((-2.78560232882098)*pz))+(((-0.350613486964944)*cj0*x3719))+((cj0*r00*x3716))+(((2.33742605134422)*x3720))+(((2.33742605134422)*x3721))+(((-0.350613486964944)*x3722))+((x3716*x3717))))+IKsqr(((((-2.78560232882098)*x3720))+(((-2.78560232882098)*x3721))+(((-1.0)*cj6*r00*x3718))+(((0.417839847914728)*x3722))+(((-0.417839847914728)*cj6*x3717))+((x3718*x3719))+(((-2.33742605134422)*pz))+(((0.783035132657398)*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((0.933173688136443)*r22))+(((-2.78560232882098)*pz))+(((-0.350613486964944)*cj0*x3719))+((cj0*r00*x3716))+(((2.33742605134422)*x3720))+(((2.33742605134422)*x3721))+(((-0.350613486964944)*x3722))+((x3716*x3717))), ((((-2.78560232882098)*x3720))+(((-2.78560232882098)*x3721))+(((-1.0)*cj6*r00*x3718))+(((0.417839847914728)*x3722))+(((-0.417839847914728)*cj6*x3717))+((x3718*x3719))+(((-2.33742605134422)*pz))+(((0.783035132657398)*r22))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x3723=IKsin(j1);
IkReal x3724=IKcos(j1);
IkReal x3725=((0.335)*cj6);
IkReal x3726=((0.14999982)*sj3);
IkReal x3727=((1.11e-6)*r22);
IkReal x3728=(cj0*r00);
IkReal x3729=((1.0)*pz);
IkReal x3730=((0.335)*sj6);
IkReal x3731=(r10*sj0);
IkReal x3732=(cj0*r01);
IkReal x3733=((0.14999982)*cj3);
IkReal x3734=((0.17676784)*x3724);
IkReal x3735=(sj3*x3723);
IkReal x3736=(r11*sj0*sj6);
IkReal x3737=((1.0)*cj0*px);
IkReal x3738=((0.17676784)*x3723);
IkReal x3739=((0.21066117)*x3724);
IkReal x3740=((1.0)*py*sj0);
IkReal x3741=((0.21066117)*x3723);
IkReal x3742=((0.14999982)*cj6*x3731);
evalcond[0]=((((-1.0)*x3734))+(((-1.0)*x3729))+(((-1.0)*x3741))+(((0.33499889)*r22)));
evalcond[1]=((((-0.14999982)*cj6*x3728))+(((-1.0)*x3737))+(((-1.0)*x3739))+(((0.14999982)*sj6*x3732))+(((-1.0)*x3740))+(((-1.0)*x3742))+(((0.14999982)*x3736))+x3738);
evalcond[2]=(((x3730*x3731))+((x3725*x3732))+(((-1.0)*sj3*x3727))+(((-1.0)*sj3*x3729))+(((-1.0)*sj3*x3734))+(((-0.21066117)*x3735))+((r11*sj0*x3725))+((x3728*x3730)));
evalcond[3]=((((-1.0)*cj3*x3727))+(((-1.0)*cj3*x3729))+(((-1.0)*cj3*x3734))+(((-1.0)*cj3*x3741))+((x3725*x3728))+((x3725*x3731))+(((-1.0)*r11*sj0*x3730))+(((-1.0)*x3730*x3732)));
evalcond[4]=(((cj3*x3738))+(((-1.0)*cj6*x3731*x3733))+((x3733*x3736))+(((-1.0)*cj3*x3739))+(((-1.0)*cj3*x3737))+(((-1.0)*cj3*x3740))+(((-1.0)*cj6*x3728*x3733))+((sj6*x3732*x3733)));
evalcond[5]=(((sj6*x3726*x3732))+((x3726*x3736))+(((-1.0)*sj3*x3737))+(((-1.0)*sj3*x3739))+(((-1.0)*sj3*x3740))+(((-1.0)*cj6*x3726*x3731))+(((0.17676784)*x3735))+(((-1.0)*cj6*x3726*x3728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((-1.0)*cj1*r22)) < IKFAST_ATAN2_MAGTHRESH && IKabs((r22*sj1)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj1*r22))+IKsqr((r22*sj1))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*cj1*r22), (r22*sj1));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x3743=IKsin(j2);
IkReal x3744=IKcos(j2);
IkReal x3745=((0.14999982)*sj0);
IkReal x3746=(cj6*r10);
IkReal x3747=((1.0)*cj6);
IkReal x3748=(cj0*r01);
IkReal x3749=(r11*sj6);
IkReal x3750=((1.0)*sj1);
IkReal x3751=((1.0)*sj0);
IkReal x3752=(cj0*r00);
IkReal x3753=(cj3*x3743);
IkReal x3754=(cj1*x3743);
IkReal x3755=(sj1*x3744);
IkReal x3756=((1.0)*cj1*x3744);
evalcond[0]=(x3754+r22+(((-1.0)*x3744*x3750)));
evalcond[1]=((((-1.0)*x3743*x3750))+(((-1.0)*x3756)));
evalcond[2]=((((-1.0)*sj3*x3756))+(((-1.0)*sj3*x3743*x3750)));
evalcond[3]=((((-1.0)*x3750*x3753))+(((-1.0)*cj3*x3756)));
evalcond[4]=((((-0.21066117)*sj1))+(((0.335)*x3755))+(((-1.0)*pz))+(((-1.11e-6)*r22))+(((-0.17676784)*cj1))+(((-0.335)*x3754)));
evalcond[5]=(((cj3*x3755))+((sj6*x3748))+((sj0*x3749))+(((-1.0)*x3746*x3751))+(((-1.0)*x3747*x3752))+(((-1.0)*cj1*x3753)));
evalcond[6]=((((-1.0)*sj6*x3752))+(((-1.0)*sj3*x3754))+(((-1.0)*r10*sj6*x3751))+(((-1.0)*r11*sj0*x3747))+(((-1.0)*x3747*x3748))+((sj3*x3755)));
evalcond[7]=((((-0.21066117)*cj1))+(((0.335)*sj1*x3743))+(((-0.14999982)*cj6*x3752))+(((0.335)*cj1*x3744))+(((0.17676784)*sj1))+(((0.14999982)*sj6*x3748))+(((-1.0)*x3745*x3746))+(((-1.0)*py*x3751))+(((-1.0)*cj0*px))+((x3745*x3749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3757=(cj6*r00);
IkReal x3758=(cj6*r10);
IkReal x3759=((299.99964)*sj3);
IkReal x3760=((2000.0)*sj3);
IkReal x3761=((1.0)*sj6);
CheckValue<IkReal> x3762 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x3761))+((py*x3760))+(((-1.0)*r11*sj6*x3759))+x3758+((x3758*x3759)))),IkReal((((px*x3760))+((x3757*x3759))+(((-1.0)*r01*sj6*x3759))+x3757+(((-1.0)*r01*x3761)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3762.valid){
continue;
}
CheckValue<IkReal> x3763=IKPowWithIntegerCheck(IKsign(((((-2000.0)*rxp1_2*sj6))+(((2000.0)*cj6*rxp0_2)))),-1);
if(!x3763.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3762.value)+(((1.5707963267949)*(x3763.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3764=IKcos(j0);
IkReal x3765=IKsin(j0);
IkReal x3766=(cj6*r00);
IkReal x3767=(r01*sj6);
IkReal x3768=((1.0)*x3765);
IkReal x3769=((0.14999982)*x3765);
IkReal x3770=(cj6*x3764);
IkReal x3771=(r11*sj6*x3764);
evalcond[0]=(sj3+((r10*x3770))+(((-1.0)*x3771))+(((-1.0)*x3766*x3768))+((x3765*x3767)));
evalcond[1]=((((-1.0)*r00*sj6*x3768))+((r10*sj6*x3764))+(((-1.0)*cj6*r01*x3768))+((r11*x3770))+(((-1.0)*cj3)));
evalcond[2]=((-0.0005)+((py*x3764))+(((-0.14999982)*x3771))+((x3767*x3769))+(((0.14999982)*r10*x3770))+(((-1.0)*x3766*x3769))+(((-1.0)*px*x3768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3772=((0.350613486964944)*cj6);
IkReal x3773=(r10*sj0);
IkReal x3774=((0.417839847914728)*cj0);
IkReal x3775=(r01*sj6);
IkReal x3776=(cj0*px);
IkReal x3777=(py*sj0);
IkReal x3778=(r11*sj0*sj6);
if( IKabs(((((0.933173688136443)*r22))+(((-0.350613486964944)*x3778))+(((-2.78560232882098)*pz))+(((2.33742605134422)*x3777))+(((2.33742605134422)*x3776))+((cj0*r00*x3772))+(((-0.350613486964944)*cj0*x3775))+((x3772*x3773)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.78560232882098)*x3777))+(((-2.78560232882098)*x3776))+(((-2.33742605134422)*pz))+(((0.417839847914728)*x3778))+(((-1.0)*cj6*r00*x3774))+(((-0.417839847914728)*cj6*x3773))+((x3774*x3775))+(((0.783035132657398)*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.933173688136443)*r22))+(((-0.350613486964944)*x3778))+(((-2.78560232882098)*pz))+(((2.33742605134422)*x3777))+(((2.33742605134422)*x3776))+((cj0*r00*x3772))+(((-0.350613486964944)*cj0*x3775))+((x3772*x3773))))+IKsqr(((((-2.78560232882098)*x3777))+(((-2.78560232882098)*x3776))+(((-2.33742605134422)*pz))+(((0.417839847914728)*x3778))+(((-1.0)*cj6*r00*x3774))+(((-0.417839847914728)*cj6*x3773))+((x3774*x3775))+(((0.783035132657398)*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((0.933173688136443)*r22))+(((-0.350613486964944)*x3778))+(((-2.78560232882098)*pz))+(((2.33742605134422)*x3777))+(((2.33742605134422)*x3776))+((cj0*r00*x3772))+(((-0.350613486964944)*cj0*x3775))+((x3772*x3773))), ((((-2.78560232882098)*x3777))+(((-2.78560232882098)*x3776))+(((-2.33742605134422)*pz))+(((0.417839847914728)*x3778))+(((-1.0)*cj6*r00*x3774))+(((-0.417839847914728)*cj6*x3773))+((x3774*x3775))+(((0.783035132657398)*r22))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x3779=IKsin(j1);
IkReal x3780=IKcos(j1);
IkReal x3781=((0.335)*cj6);
IkReal x3782=((0.14999982)*sj3);
IkReal x3783=((1.11e-6)*r22);
IkReal x3784=(cj0*r00);
IkReal x3785=((1.0)*pz);
IkReal x3786=((0.335)*sj6);
IkReal x3787=(r10*sj0);
IkReal x3788=(cj0*r01);
IkReal x3789=((0.14999982)*cj3);
IkReal x3790=((0.17676784)*x3780);
IkReal x3791=(sj3*x3779);
IkReal x3792=(r11*sj0*sj6);
IkReal x3793=((1.0)*cj0*px);
IkReal x3794=((0.17676784)*x3779);
IkReal x3795=((0.21066117)*x3780);
IkReal x3796=((1.0)*py*sj0);
IkReal x3797=((0.21066117)*x3779);
IkReal x3798=((0.14999982)*cj6*x3787);
evalcond[0]=((((-1.0)*x3797))+(((-1.0)*x3790))+(((-1.0)*x3785))+(((0.33499889)*r22)));
evalcond[1]=((((-1.0)*x3796))+(((-1.0)*x3795))+(((-1.0)*x3798))+(((-1.0)*x3793))+(((-0.14999982)*cj6*x3784))+x3794+(((0.14999982)*sj6*x3788))+(((0.14999982)*x3792)));
evalcond[2]=(((x3784*x3786))+(((-1.0)*sj3*x3783))+(((-1.0)*sj3*x3785))+(((-0.21066117)*x3791))+(((-1.0)*sj3*x3790))+((r11*sj0*x3781))+((x3786*x3787))+((x3781*x3788)));
evalcond[3]=((((-1.0)*r11*sj0*x3786))+(((-1.0)*x3786*x3788))+(((-1.0)*cj3*x3790))+(((-1.0)*cj3*x3797))+(((-1.0)*cj3*x3783))+(((-1.0)*cj3*x3785))+((x3781*x3784))+((x3781*x3787)));
evalcond[4]=(((x3789*x3792))+(((-1.0)*cj6*x3787*x3789))+((cj3*x3794))+(((-1.0)*cj6*x3784*x3789))+(((-1.0)*cj3*x3793))+(((-1.0)*cj3*x3795))+(((-1.0)*cj3*x3796))+((sj6*x3788*x3789)));
evalcond[5]=((((0.17676784)*x3791))+((sj6*x3782*x3788))+(((-1.0)*sj3*x3793))+(((-1.0)*sj3*x3795))+(((-1.0)*sj3*x3796))+((x3782*x3792))+(((-1.0)*cj6*x3782*x3787))+(((-1.0)*cj6*x3782*x3784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((-1.0)*cj1*r22)) < IKFAST_ATAN2_MAGTHRESH && IKabs((r22*sj1)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj1*r22))+IKsqr((r22*sj1))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*cj1*r22), (r22*sj1));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x3799=IKsin(j2);
IkReal x3800=IKcos(j2);
IkReal x3801=((0.14999982)*sj0);
IkReal x3802=(cj6*r10);
IkReal x3803=((1.0)*cj6);
IkReal x3804=(cj0*r01);
IkReal x3805=(r11*sj6);
IkReal x3806=((1.0)*sj1);
IkReal x3807=((1.0)*sj0);
IkReal x3808=(cj0*r00);
IkReal x3809=(cj3*x3799);
IkReal x3810=(cj1*x3799);
IkReal x3811=(sj1*x3800);
IkReal x3812=((1.0)*cj1*x3800);
evalcond[0]=((((-1.0)*x3800*x3806))+x3810+r22);
evalcond[1]=((((-1.0)*x3812))+(((-1.0)*x3799*x3806)));
evalcond[2]=((((-1.0)*sj3*x3812))+(((-1.0)*sj3*x3799*x3806)));
evalcond[3]=((((-1.0)*cj3*x3812))+(((-1.0)*x3806*x3809)));
evalcond[4]=((((-0.21066117)*sj1))+(((-0.335)*x3810))+(((-1.0)*pz))+(((-1.11e-6)*r22))+(((-0.17676784)*cj1))+(((0.335)*x3811)));
evalcond[5]=(((cj3*x3811))+(((-1.0)*x3802*x3807))+((sj6*x3804))+(((-1.0)*x3803*x3808))+(((-1.0)*cj1*x3809))+((sj0*x3805)));
evalcond[6]=((((-1.0)*r10*sj6*x3807))+(((-1.0)*sj6*x3808))+(((-1.0)*r11*sj0*x3803))+((sj3*x3811))+(((-1.0)*x3803*x3804))+(((-1.0)*sj3*x3810)));
evalcond[7]=((((-0.21066117)*cj1))+(((0.14999982)*sj6*x3804))+(((-0.14999982)*cj6*x3808))+(((-1.0)*x3801*x3802))+(((-1.0)*py*x3807))+(((0.17676784)*sj1))+(((0.335)*cj1*x3800))+((x3801*x3805))+(((0.335)*sj1*x3799))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3813=(cj3*cj6);
IkReal x3814=(cj6*sj3);
IkReal x3815=(sj3*sj6);
IkReal x3816=((1.0)*cj3*sj6);
CheckValue<IkReal> x3817 = IKatan2WithCheck(IkReal((((r11*x3814))+((r10*x3815))+((r10*x3813))+(((-1.0)*r11*x3816)))),IkReal(((((-1.0)*r01*x3816))+((r01*x3814))+((r00*x3813))+((r00*x3815)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3817.valid){
continue;
}
CheckValue<IkReal> x3818=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x3818.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3817.value)+(((1.5707963267949)*(x3818.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3819=IKcos(j0);
IkReal x3820=IKsin(j0);
IkReal x3821=(cj6*r00);
IkReal x3822=(r01*sj6);
IkReal x3823=((1.0)*x3820);
IkReal x3824=((0.14999982)*x3820);
IkReal x3825=(cj6*x3819);
IkReal x3826=(r11*sj6*x3819);
evalcond[0]=(sj3+(((-1.0)*x3821*x3823))+((x3820*x3822))+((r10*x3825))+(((-1.0)*x3826)));
evalcond[1]=(((r10*sj6*x3819))+((r11*x3825))+(((-1.0)*cj6*r01*x3823))+(((-1.0)*r00*sj6*x3823))+(((-1.0)*cj3)));
evalcond[2]=((-0.0005)+(((-0.14999982)*x3826))+(((0.14999982)*r10*x3825))+(((-1.0)*x3821*x3824))+((x3822*x3824))+(((-1.0)*px*x3823))+((py*x3819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3827=((0.350613486964944)*cj6);
IkReal x3828=(r10*sj0);
IkReal x3829=((0.417839847914728)*cj0);
IkReal x3830=(r01*sj6);
IkReal x3831=(cj0*px);
IkReal x3832=(py*sj0);
IkReal x3833=(r11*sj0*sj6);
if( IKabs(((((0.933173688136443)*r22))+(((-2.78560232882098)*pz))+(((-0.350613486964944)*x3833))+((cj0*r00*x3827))+(((-0.350613486964944)*cj0*x3830))+(((2.33742605134422)*x3831))+(((2.33742605134422)*x3832))+((x3827*x3828)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.33742605134422)*pz))+((x3829*x3830))+(((-1.0)*cj6*r00*x3829))+(((-2.78560232882098)*x3831))+(((-2.78560232882098)*x3832))+(((-0.417839847914728)*cj6*x3828))+(((0.783035132657398)*r22))+(((0.417839847914728)*x3833)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.933173688136443)*r22))+(((-2.78560232882098)*pz))+(((-0.350613486964944)*x3833))+((cj0*r00*x3827))+(((-0.350613486964944)*cj0*x3830))+(((2.33742605134422)*x3831))+(((2.33742605134422)*x3832))+((x3827*x3828))))+IKsqr(((((-2.33742605134422)*pz))+((x3829*x3830))+(((-1.0)*cj6*r00*x3829))+(((-2.78560232882098)*x3831))+(((-2.78560232882098)*x3832))+(((-0.417839847914728)*cj6*x3828))+(((0.783035132657398)*r22))+(((0.417839847914728)*x3833))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((0.933173688136443)*r22))+(((-2.78560232882098)*pz))+(((-0.350613486964944)*x3833))+((cj0*r00*x3827))+(((-0.350613486964944)*cj0*x3830))+(((2.33742605134422)*x3831))+(((2.33742605134422)*x3832))+((x3827*x3828))), ((((-2.33742605134422)*pz))+((x3829*x3830))+(((-1.0)*cj6*r00*x3829))+(((-2.78560232882098)*x3831))+(((-2.78560232882098)*x3832))+(((-0.417839847914728)*cj6*x3828))+(((0.783035132657398)*r22))+(((0.417839847914728)*x3833))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x3834=IKsin(j1);
IkReal x3835=IKcos(j1);
IkReal x3836=((0.335)*cj6);
IkReal x3837=((0.14999982)*sj3);
IkReal x3838=((1.11e-6)*r22);
IkReal x3839=(cj0*r00);
IkReal x3840=((1.0)*pz);
IkReal x3841=((0.335)*sj6);
IkReal x3842=(r10*sj0);
IkReal x3843=(cj0*r01);
IkReal x3844=((0.14999982)*cj3);
IkReal x3845=((0.17676784)*x3835);
IkReal x3846=(sj3*x3834);
IkReal x3847=(r11*sj0*sj6);
IkReal x3848=((1.0)*cj0*px);
IkReal x3849=((0.17676784)*x3834);
IkReal x3850=((0.21066117)*x3835);
IkReal x3851=((1.0)*py*sj0);
IkReal x3852=((0.21066117)*x3834);
IkReal x3853=((0.14999982)*cj6*x3842);
evalcond[0]=((((-1.0)*x3852))+(((0.33499889)*r22))+(((-1.0)*x3845))+(((-1.0)*x3840)));
evalcond[1]=((((-1.0)*x3851))+(((-1.0)*x3850))+(((-1.0)*x3853))+(((0.14999982)*sj6*x3843))+x3849+(((0.14999982)*x3847))+(((-0.14999982)*cj6*x3839))+(((-1.0)*x3848)));
evalcond[2]=(((x3841*x3842))+((x3839*x3841))+(((-0.21066117)*x3846))+((r11*sj0*x3836))+(((-1.0)*sj3*x3845))+(((-1.0)*sj3*x3840))+((x3836*x3843))+(((-1.0)*sj3*x3838)));
evalcond[3]=((((-1.0)*cj3*x3852))+((x3836*x3842))+(((-1.0)*x3841*x3843))+((x3836*x3839))+(((-1.0)*r11*sj0*x3841))+(((-1.0)*cj3*x3838))+(((-1.0)*cj3*x3840))+(((-1.0)*cj3*x3845)));
evalcond[4]=((((-1.0)*cj3*x3850))+(((-1.0)*cj3*x3851))+((x3844*x3847))+((cj3*x3849))+((sj6*x3843*x3844))+(((-1.0)*cj6*x3839*x3844))+(((-1.0)*cj6*x3842*x3844))+(((-1.0)*cj3*x3848)));
evalcond[5]=((((-1.0)*cj6*x3837*x3839))+((sj6*x3837*x3843))+((x3837*x3847))+(((-1.0)*sj3*x3848))+(((-1.0)*sj3*x3851))+(((-1.0)*sj3*x3850))+(((0.17676784)*x3846))+(((-1.0)*cj6*x3837*x3842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((-1.0)*cj1*r22)) < IKFAST_ATAN2_MAGTHRESH && IKabs((r22*sj1)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj1*r22))+IKsqr((r22*sj1))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*cj1*r22), (r22*sj1));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x3854=IKsin(j2);
IkReal x3855=IKcos(j2);
IkReal x3856=((0.14999982)*sj0);
IkReal x3857=(cj6*r10);
IkReal x3858=((1.0)*cj6);
IkReal x3859=(cj0*r01);
IkReal x3860=(r11*sj6);
IkReal x3861=((1.0)*sj1);
IkReal x3862=((1.0)*sj0);
IkReal x3863=(cj0*r00);
IkReal x3864=(cj3*x3854);
IkReal x3865=(cj1*x3854);
IkReal x3866=(sj1*x3855);
IkReal x3867=((1.0)*cj1*x3855);
evalcond[0]=((((-1.0)*x3855*x3861))+x3865+r22);
evalcond[1]=((((-1.0)*x3867))+(((-1.0)*x3854*x3861)));
evalcond[2]=((((-1.0)*sj3*x3854*x3861))+(((-1.0)*sj3*x3867)));
evalcond[3]=((((-1.0)*cj3*x3867))+(((-1.0)*x3861*x3864)));
evalcond[4]=((((-0.21066117)*sj1))+(((-1.0)*pz))+(((-1.11e-6)*r22))+(((-0.17676784)*cj1))+(((0.335)*x3866))+(((-0.335)*x3865)));
evalcond[5]=((((-1.0)*x3858*x3863))+(((-1.0)*x3857*x3862))+((cj3*x3866))+(((-1.0)*cj1*x3864))+((sj0*x3860))+((sj6*x3859)));
evalcond[6]=((((-1.0)*x3858*x3859))+((sj3*x3866))+(((-1.0)*sj6*x3863))+(((-1.0)*sj3*x3865))+(((-1.0)*r11*sj0*x3858))+(((-1.0)*r10*sj6*x3862)));
evalcond[7]=((((0.335)*cj1*x3855))+(((-1.0)*py*x3862))+(((-0.21066117)*cj1))+(((0.17676784)*sj1))+((x3856*x3860))+(((0.14999982)*sj6*x3859))+(((-1.0)*x3856*x3857))+(((-0.14999982)*cj6*x3863))+(((-1.0)*cj0*px))+(((0.335)*sj1*x3854)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x3868=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x3868);
rxp1_0=(pz*r11);
rxp1_1=(r01*x3868);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4=0;
sj4=0;
cj4=1.0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
IkReal x3869=cj6*cj6;
IkReal x3870=sj3*sj3;
IkReal x3871=cj3*cj3;
IkReal x3872=sj6*sj6;
j0eval[0]=r22;
j0eval[1]=(((x3871*x3872))+((x3870*x3872))+((x3869*x3871))+((x3869*x3870)));
j0eval[2]=IKsign(r22);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x3873=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x3873);
rxp1_0=(pz*r11);
rxp1_1=(r01*x3873);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4=0;
sj4=0;
cj4=1.0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
IkReal x3874=(r11*sj6);
IkReal x3875=(r01*sj6);
IkReal x3876=(cj6*r00);
IkReal x3877=((300.00036)*sj3);
IkReal x3878=((2000.0)*sj3);
IkReal x3879=(rxp1_2*sj6);
IkReal x3880=((1.0)*cj6);
j0eval[0]=((((-1.0)*rxp0_2*x3880))+x3879);
j0eval[1]=((IKabs((((px*x3878))+(((-1.0)*x3876*x3877))+x3875+((x3875*x3877))+(((-1.0)*x3876)))))+(IKabs((((py*x3878))+((x3874*x3877))+x3874+(((-1.0)*cj6*r10*x3877))+(((-1.0)*r10*x3880))))));
j0eval[2]=IKsign(((((-2000.0)*cj6*rxp0_2))+(((2000.0)*x3879))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x3881=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x3881);
rxp1_0=(pz*r11);
rxp1_1=(r01*x3881);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4=0;
sj4=0;
cj4=1.0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
IkReal x3882=((300.00036)*cj3);
IkReal x3883=(cj6*rxp1_2);
IkReal x3884=((2000.0)*cj3);
IkReal x3885=(rxp0_2*sj6);
j0eval[0]=((((6.66665866667627)*x3883))+(((6.66665866667627)*x3885))+r22);
j0eval[1]=((IKabs((((r00*sj6))+((cj6*r00*x3882))+(((-1.0)*r01*sj6*x3882))+((cj6*r01))+(((-1.0)*px*x3884)))))+(IKabs((((r10*sj6))+(((-1.0)*r11*sj6*x3882))+((cj6*r11))+(((-1.0)*py*x3884))+((cj6*r10*x3882))))));
j0eval[2]=IKsign(((((2000.0)*x3883))+(((2000.0)*x3885))+(((300.00036)*r22))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3886=((300.00036)*cj3);
IkReal x3887=((2000.0)*cj3);
CheckValue<IkReal> x3888 = IKatan2WithCheck(IkReal((((r10*sj6))+(((-1.0)*r11*sj6*x3886))+((cj6*r11))+(((-1.0)*py*x3887))+((cj6*r10*x3886)))),IkReal((((r00*sj6))+((cj6*r00*x3886))+(((-1.0)*r01*sj6*x3886))+((cj6*r01))+(((-1.0)*px*x3887)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3888.valid){
continue;
}
CheckValue<IkReal> x3889=IKPowWithIntegerCheck(IKsign(((((300.00036)*r22))+(((2000.0)*rxp0_2*sj6))+(((2000.0)*cj6*rxp1_2)))),-1);
if(!x3889.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3888.value)+(((1.5707963267949)*(x3889.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3890=IKsin(j0);
IkReal x3891=IKcos(j0);
IkReal x3892=((1.0)*r01);
IkReal x3893=(cj6*x3890);
IkReal x3894=(cj6*x3891);
IkReal x3895=(sj6*x3890);
IkReal x3896=(r11*sj6*x3891);
evalcond[0]=(sj3+(((-1.0)*r10*x3894))+((r00*x3893))+(((-1.0)*x3892*x3895))+x3896);
evalcond[1]=(((r10*sj6*x3891))+(((-1.0)*x3892*x3893))+((r11*x3894))+(((-1.0)*cj3))+(((-1.0)*r00*x3895)));
evalcond[2]=((-0.0005)+(((0.15000018)*r00*x3893))+(((-0.15000018)*r10*x3894))+(((0.15000018)*x3896))+((py*x3891))+(((-0.15000018)*r01*x3895))+(((-1.0)*px*x3890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3897=(cj0*px);
IkReal x3898=(py*sj0);
IkReal x3899=(r11*sj0*sj6);
IkReal x3900=(cj0*cj6*r00);
IkReal x3901=(cj6*r10*sj0);
IkReal x3902=(cj0*r01*sj6);
if( IKabs(((((-0.933173688136443)*r22))+(((0.350614328438323)*x3902))+(((-2.78560232882098)*pz))+(((0.350614328438323)*x3899))+(((-0.350614328438323)*x3900))+(((-0.350614328438323)*x3901))+(((2.33742605134422)*x3898))+(((2.33742605134422)*x3897)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.417840850731566)*x3901))+(((0.417840850731566)*x3900))+(((-2.33742605134422)*pz))+(((-0.783035132657398)*r22))+(((-2.78560232882098)*x3898))+(((-2.78560232882098)*x3897))+(((-0.417840850731566)*x3899))+(((-0.417840850731566)*x3902)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.933173688136443)*r22))+(((0.350614328438323)*x3902))+(((-2.78560232882098)*pz))+(((0.350614328438323)*x3899))+(((-0.350614328438323)*x3900))+(((-0.350614328438323)*x3901))+(((2.33742605134422)*x3898))+(((2.33742605134422)*x3897))))+IKsqr(((((0.417840850731566)*x3901))+(((0.417840850731566)*x3900))+(((-2.33742605134422)*pz))+(((-0.783035132657398)*r22))+(((-2.78560232882098)*x3898))+(((-2.78560232882098)*x3897))+(((-0.417840850731566)*x3899))+(((-0.417840850731566)*x3902))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-0.933173688136443)*r22))+(((0.350614328438323)*x3902))+(((-2.78560232882098)*pz))+(((0.350614328438323)*x3899))+(((-0.350614328438323)*x3900))+(((-0.350614328438323)*x3901))+(((2.33742605134422)*x3898))+(((2.33742605134422)*x3897))), ((((0.417840850731566)*x3901))+(((0.417840850731566)*x3900))+(((-2.33742605134422)*pz))+(((-0.783035132657398)*r22))+(((-2.78560232882098)*x3898))+(((-2.78560232882098)*x3897))+(((-0.417840850731566)*x3899))+(((-0.417840850731566)*x3902))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x3903=IKsin(j1);
IkReal x3904=IKcos(j1);
IkReal x3905=((1.11e-6)*r22);
IkReal x3906=((0.15000018)*cj6);
IkReal x3907=(cj0*r00);
IkReal x3908=(r10*sj0);
IkReal x3909=((0.335)*cj6);
IkReal x3910=((1.0)*pz);
IkReal x3911=((0.335)*sj6);
IkReal x3912=((0.15000018)*sj3);
IkReal x3913=((0.15000018)*cj3);
IkReal x3914=((0.17676784)*x3904);
IkReal x3915=(sj3*x3903);
IkReal x3916=((1.0)*cj0*px);
IkReal x3917=((0.335)*r11*sj0);
IkReal x3918=((0.17676784)*x3903);
IkReal x3919=(cj0*r01*sj6);
IkReal x3920=((0.21066117)*x3904);
IkReal x3921=((1.0)*py*sj0);
IkReal x3922=(r11*sj0*sj6);
IkReal x3923=((0.21066117)*x3903);
evalcond[0]=((((-1.0)*x3914))+(((-1.0)*x3910))+(((-1.0)*x3923))+(((-0.33499889)*r22)));
evalcond[1]=((((-1.0)*x3916))+(((-0.15000018)*x3922))+(((-1.0)*x3921))+(((-1.0)*x3920))+((x3906*x3907))+((x3906*x3908))+(((-0.15000018)*x3919))+x3918);
evalcond[2]=(((sj3*x3905))+((r11*sj0*x3909))+((cj0*r01*x3909))+(((-1.0)*sj3*x3910))+(((-1.0)*sj3*x3914))+((x3907*x3911))+((x3908*x3911))+(((-0.21066117)*x3915)));
evalcond[3]=(((cj3*x3905))+((r11*sj0*x3911))+(((-1.0)*x3907*x3909))+(((-1.0)*cj3*x3910))+(((-1.0)*cj3*x3914))+(((-1.0)*x3908*x3909))+(((-1.0)*cj3*x3923))+((cj0*r01*x3911)));
evalcond[4]=(((cj3*x3906*x3908))+((cj3*x3906*x3907))+(((-1.0)*x3913*x3922))+(((-1.0)*cj3*x3916))+(((-1.0)*x3913*x3919))+((cj3*x3918))+(((-1.0)*cj3*x3920))+(((-1.0)*cj3*x3921)));
evalcond[5]=((((-1.0)*x3912*x3919))+(((0.17676784)*x3915))+(((-1.0)*sj3*x3916))+(((-1.0)*x3912*x3922))+(((-1.0)*sj3*x3920))+(((-1.0)*sj3*x3921))+((sj3*x3906*x3908))+((sj3*x3906*x3907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs((cj1*r22)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*r22*sj1)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj1*r22))+IKsqr(((-1.0)*r22*sj1))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((cj1*r22), ((-1.0)*r22*sj1));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x3924=IKcos(j2);
IkReal x3925=IKsin(j2);
IkReal x3926=((1.0)*cj6);
IkReal x3927=(cj0*r01);
IkReal x3928=(r11*sj0);
IkReal x3929=((1.0)*sj1);
IkReal x3930=((0.15000018)*sj6);
IkReal x3931=((1.0)*sj6);
IkReal x3932=(cj3*x3925);
IkReal x3933=(cj0*cj6*r00);
IkReal x3934=(cj1*x3925);
IkReal x3935=(sj1*x3924);
IkReal x3936=(cj6*r10*sj0);
IkReal x3937=((1.0)*cj1*x3924);
evalcond[0]=((((-1.0)*x3925*x3929))+(((-1.0)*x3937)));
evalcond[1]=((((-1.0)*sj3*x3937))+(((-1.0)*sj3*x3925*x3929)));
evalcond[2]=((((-1.0)*x3924*x3929))+x3934+(((-1.0)*r22)));
evalcond[3]=((((-1.0)*x3929*x3932))+(((-1.0)*cj3*x3937)));
evalcond[4]=((((-0.21066117)*sj1))+(((-0.335)*x3934))+(((-1.0)*pz))+(((-0.17676784)*cj1))+(((1.11e-6)*r22))+(((0.335)*x3935)));
evalcond[5]=((((-1.0)*cj1*x3932))+x3936+x3933+(((-1.0)*x3927*x3931))+(((-1.0)*x3928*x3931))+((cj3*x3935)));
evalcond[6]=((((-1.0)*cj0*r00*x3931))+(((-1.0)*x3926*x3927))+(((-1.0)*x3926*x3928))+(((-1.0)*sj3*x3934))+(((-1.0)*r10*sj0*x3931))+((sj3*x3935)));
evalcond[7]=((((-0.21066117)*cj1))+(((0.335)*sj1*x3925))+(((0.17676784)*sj1))+(((0.15000018)*x3933))+(((0.15000018)*x3936))+(((0.335)*cj1*x3924))+(((-1.0)*x3927*x3930))+(((-1.0)*py*sj0))+(((-1.0)*x3928*x3930))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3938=(r11*sj6);
IkReal x3939=(r01*sj6);
IkReal x3940=(cj6*r00);
IkReal x3941=((300.00036)*sj3);
IkReal x3942=((2000.0)*sj3);
IkReal x3943=(cj6*r10);
CheckValue<IkReal> x3944=IKPowWithIntegerCheck(IKsign(((((-2000.0)*cj6*rxp0_2))+(((2000.0)*rxp1_2*sj6)))),-1);
if(!x3944.valid){
continue;
}
CheckValue<IkReal> x3945 = IKatan2WithCheck(IkReal((((py*x3942))+(((-1.0)*x3943))+(((-1.0)*x3941*x3943))+((x3938*x3941))+x3938)),IkReal(((((-1.0)*x3940))+((x3939*x3941))+x3939+(((-1.0)*x3940*x3941))+((px*x3942)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3945.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3944.value)))+(x3945.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3946=IKsin(j0);
IkReal x3947=IKcos(j0);
IkReal x3948=((1.0)*r01);
IkReal x3949=(cj6*x3946);
IkReal x3950=(cj6*x3947);
IkReal x3951=(sj6*x3946);
IkReal x3952=(r11*sj6*x3947);
evalcond[0]=(((r00*x3949))+(((-1.0)*x3948*x3951))+sj3+x3952+(((-1.0)*r10*x3950)));
evalcond[1]=((((-1.0)*x3948*x3949))+((r10*sj6*x3947))+((r11*x3950))+(((-1.0)*cj3))+(((-1.0)*r00*x3951)));
evalcond[2]=((-0.0005)+((py*x3947))+(((-0.15000018)*r10*x3950))+(((0.15000018)*x3952))+(((-1.0)*px*x3946))+(((0.15000018)*r00*x3949))+(((-0.15000018)*r01*x3951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3953=(cj0*px);
IkReal x3954=(py*sj0);
IkReal x3955=(r11*sj0*sj6);
IkReal x3956=(cj0*cj6*r00);
IkReal x3957=(cj6*r10*sj0);
IkReal x3958=(cj0*r01*sj6);
if( IKabs(((((-0.933173688136443)*r22))+(((2.33742605134422)*x3953))+(((2.33742605134422)*x3954))+(((-2.78560232882098)*pz))+(((-0.350614328438323)*x3956))+(((-0.350614328438323)*x3957))+(((0.350614328438323)*x3958))+(((0.350614328438323)*x3955)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.78560232882098)*x3953))+(((-2.78560232882098)*x3954))+(((-2.33742605134422)*pz))+(((-0.783035132657398)*r22))+(((-0.417840850731566)*x3955))+(((-0.417840850731566)*x3958))+(((0.417840850731566)*x3957))+(((0.417840850731566)*x3956)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.933173688136443)*r22))+(((2.33742605134422)*x3953))+(((2.33742605134422)*x3954))+(((-2.78560232882098)*pz))+(((-0.350614328438323)*x3956))+(((-0.350614328438323)*x3957))+(((0.350614328438323)*x3958))+(((0.350614328438323)*x3955))))+IKsqr(((((-2.78560232882098)*x3953))+(((-2.78560232882098)*x3954))+(((-2.33742605134422)*pz))+(((-0.783035132657398)*r22))+(((-0.417840850731566)*x3955))+(((-0.417840850731566)*x3958))+(((0.417840850731566)*x3957))+(((0.417840850731566)*x3956))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-0.933173688136443)*r22))+(((2.33742605134422)*x3953))+(((2.33742605134422)*x3954))+(((-2.78560232882098)*pz))+(((-0.350614328438323)*x3956))+(((-0.350614328438323)*x3957))+(((0.350614328438323)*x3958))+(((0.350614328438323)*x3955))), ((((-2.78560232882098)*x3953))+(((-2.78560232882098)*x3954))+(((-2.33742605134422)*pz))+(((-0.783035132657398)*r22))+(((-0.417840850731566)*x3955))+(((-0.417840850731566)*x3958))+(((0.417840850731566)*x3957))+(((0.417840850731566)*x3956))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x3959=IKsin(j1);
IkReal x3960=IKcos(j1);
IkReal x3961=((1.11e-6)*r22);
IkReal x3962=((0.15000018)*cj6);
IkReal x3963=(cj0*r00);
IkReal x3964=(r10*sj0);
IkReal x3965=((0.335)*cj6);
IkReal x3966=((1.0)*pz);
IkReal x3967=((0.335)*sj6);
IkReal x3968=((0.15000018)*sj3);
IkReal x3969=((0.15000018)*cj3);
IkReal x3970=((0.17676784)*x3960);
IkReal x3971=(sj3*x3959);
IkReal x3972=((1.0)*cj0*px);
IkReal x3973=((0.335)*r11*sj0);
IkReal x3974=((0.17676784)*x3959);
IkReal x3975=(cj0*r01*sj6);
IkReal x3976=((0.21066117)*x3960);
IkReal x3977=((1.0)*py*sj0);
IkReal x3978=(r11*sj0*sj6);
IkReal x3979=((0.21066117)*x3959);
evalcond[0]=((((-1.0)*x3979))+(((-1.0)*x3970))+(((-1.0)*x3966))+(((-0.33499889)*r22)));
evalcond[1]=(((x3962*x3964))+((x3962*x3963))+(((-1.0)*x3976))+(((-1.0)*x3977))+(((-1.0)*x3972))+(((-0.15000018)*x3975))+(((-0.15000018)*x3978))+x3974);
evalcond[2]=(((sj3*x3961))+(((-0.21066117)*x3971))+((cj0*r01*x3965))+(((-1.0)*sj3*x3966))+((x3964*x3967))+((r11*sj0*x3965))+(((-1.0)*sj3*x3970))+((x3963*x3967)));
evalcond[3]=((((-1.0)*x3963*x3965))+((cj0*r01*x3967))+((cj3*x3961))+((r11*sj0*x3967))+(((-1.0)*x3964*x3965))+(((-1.0)*cj3*x3966))+(((-1.0)*cj3*x3970))+(((-1.0)*cj3*x3979)));
evalcond[4]=((((-1.0)*x3969*x3975))+(((-1.0)*x3969*x3978))+((cj3*x3962*x3964))+((cj3*x3962*x3963))+((cj3*x3974))+(((-1.0)*cj3*x3972))+(((-1.0)*cj3*x3977))+(((-1.0)*cj3*x3976)));
evalcond[5]=(((sj3*x3962*x3963))+((sj3*x3962*x3964))+(((-1.0)*x3968*x3975))+(((-1.0)*x3968*x3978))+(((0.17676784)*x3971))+(((-1.0)*sj3*x3976))+(((-1.0)*sj3*x3977))+(((-1.0)*sj3*x3972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs((cj1*r22)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*r22*sj1)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj1*r22))+IKsqr(((-1.0)*r22*sj1))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((cj1*r22), ((-1.0)*r22*sj1));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x3980=IKcos(j2);
IkReal x3981=IKsin(j2);
IkReal x3982=((1.0)*cj6);
IkReal x3983=(cj0*r01);
IkReal x3984=(r11*sj0);
IkReal x3985=((1.0)*sj1);
IkReal x3986=((0.15000018)*sj6);
IkReal x3987=((1.0)*sj6);
IkReal x3988=(cj3*x3981);
IkReal x3989=(cj0*cj6*r00);
IkReal x3990=(cj1*x3981);
IkReal x3991=(sj1*x3980);
IkReal x3992=(cj6*r10*sj0);
IkReal x3993=((1.0)*cj1*x3980);
evalcond[0]=((((-1.0)*x3993))+(((-1.0)*x3981*x3985)));
evalcond[1]=((((-1.0)*sj3*x3981*x3985))+(((-1.0)*sj3*x3993)));
evalcond[2]=(x3990+(((-1.0)*r22))+(((-1.0)*x3980*x3985)));
evalcond[3]=((((-1.0)*x3985*x3988))+(((-1.0)*cj3*x3993)));
evalcond[4]=((((-0.335)*x3990))+(((-0.21066117)*sj1))+(((0.335)*x3991))+(((-1.0)*pz))+(((-0.17676784)*cj1))+(((1.11e-6)*r22)));
evalcond[5]=((((-1.0)*x3984*x3987))+(((-1.0)*x3983*x3987))+x3992+x3989+((cj3*x3991))+(((-1.0)*cj1*x3988)));
evalcond[6]=(((sj3*x3991))+(((-1.0)*sj3*x3990))+(((-1.0)*x3982*x3984))+(((-1.0)*x3982*x3983))+(((-1.0)*cj0*r00*x3987))+(((-1.0)*r10*sj0*x3987)));
evalcond[7]=((((0.335)*cj1*x3980))+(((-0.21066117)*cj1))+(((-1.0)*x3984*x3986))+(((0.17676784)*sj1))+(((0.15000018)*x3989))+(((-1.0)*x3983*x3986))+(((0.335)*sj1*x3981))+(((-1.0)*py*sj0))+(((0.15000018)*x3992))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3994=(cj6*sj3);
IkReal x3995=(sj3*sj6);
IkReal x3996=(cj3*sj6);
IkReal x3997=((1.0)*cj3*cj6);
CheckValue<IkReal> x3998 = IKatan2WithCheck(IkReal((((r10*x3995))+(((-1.0)*r10*x3997))+((r11*x3994))+((r11*x3996)))),IkReal((((r00*x3995))+(((-1.0)*r00*x3997))+((r01*x3994))+((r01*x3996)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3998.valid){
continue;
}
CheckValue<IkReal> x3999=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x3999.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3998.value)+(((-1.5707963267949)*(x3999.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x4000=IKsin(j0);
IkReal x4001=IKcos(j0);
IkReal x4002=((1.0)*r01);
IkReal x4003=(cj6*x4000);
IkReal x4004=(cj6*x4001);
IkReal x4005=(sj6*x4000);
IkReal x4006=(r11*sj6*x4001);
evalcond[0]=(sj3+(((-1.0)*x4002*x4005))+((r00*x4003))+x4006+(((-1.0)*r10*x4004)));
evalcond[1]=((((-1.0)*x4002*x4003))+((r10*sj6*x4001))+(((-1.0)*r00*x4005))+(((-1.0)*cj3))+((r11*x4004)));
evalcond[2]=((-0.0005)+(((-1.0)*px*x4000))+(((-0.15000018)*r01*x4005))+(((0.15000018)*r00*x4003))+(((0.15000018)*x4006))+(((-0.15000018)*r10*x4004))+((py*x4001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4007=(cj0*px);
IkReal x4008=(py*sj0);
IkReal x4009=(r11*sj0*sj6);
IkReal x4010=(cj0*cj6*r00);
IkReal x4011=(cj6*r10*sj0);
IkReal x4012=(cj0*r01*sj6);
if( IKabs(((((-0.933173688136443)*r22))+(((-2.78560232882098)*pz))+(((-0.350614328438323)*x4011))+(((-0.350614328438323)*x4010))+(((0.350614328438323)*x4009))+(((0.350614328438323)*x4012))+(((2.33742605134422)*x4008))+(((2.33742605134422)*x4007)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.417840850731566)*x4009))+(((-2.33742605134422)*pz))+(((-0.783035132657398)*r22))+(((-0.417840850731566)*x4012))+(((0.417840850731566)*x4010))+(((0.417840850731566)*x4011))+(((-2.78560232882098)*x4008))+(((-2.78560232882098)*x4007)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.933173688136443)*r22))+(((-2.78560232882098)*pz))+(((-0.350614328438323)*x4011))+(((-0.350614328438323)*x4010))+(((0.350614328438323)*x4009))+(((0.350614328438323)*x4012))+(((2.33742605134422)*x4008))+(((2.33742605134422)*x4007))))+IKsqr(((((-0.417840850731566)*x4009))+(((-2.33742605134422)*pz))+(((-0.783035132657398)*r22))+(((-0.417840850731566)*x4012))+(((0.417840850731566)*x4010))+(((0.417840850731566)*x4011))+(((-2.78560232882098)*x4008))+(((-2.78560232882098)*x4007))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-0.933173688136443)*r22))+(((-2.78560232882098)*pz))+(((-0.350614328438323)*x4011))+(((-0.350614328438323)*x4010))+(((0.350614328438323)*x4009))+(((0.350614328438323)*x4012))+(((2.33742605134422)*x4008))+(((2.33742605134422)*x4007))), ((((-0.417840850731566)*x4009))+(((-2.33742605134422)*pz))+(((-0.783035132657398)*r22))+(((-0.417840850731566)*x4012))+(((0.417840850731566)*x4010))+(((0.417840850731566)*x4011))+(((-2.78560232882098)*x4008))+(((-2.78560232882098)*x4007))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x4013=IKsin(j1);
IkReal x4014=IKcos(j1);
IkReal x4015=((1.11e-6)*r22);
IkReal x4016=((0.15000018)*cj6);
IkReal x4017=(cj0*r00);
IkReal x4018=(r10*sj0);
IkReal x4019=((0.335)*cj6);
IkReal x4020=((1.0)*pz);
IkReal x4021=((0.335)*sj6);
IkReal x4022=((0.15000018)*sj3);
IkReal x4023=((0.15000018)*cj3);
IkReal x4024=((0.17676784)*x4014);
IkReal x4025=(sj3*x4013);
IkReal x4026=((1.0)*cj0*px);
IkReal x4027=((0.335)*r11*sj0);
IkReal x4028=((0.17676784)*x4013);
IkReal x4029=(cj0*r01*sj6);
IkReal x4030=((0.21066117)*x4014);
IkReal x4031=((1.0)*py*sj0);
IkReal x4032=(r11*sj0*sj6);
IkReal x4033=((0.21066117)*x4013);
evalcond[0]=((((-0.33499889)*r22))+(((-1.0)*x4024))+(((-1.0)*x4020))+(((-1.0)*x4033)));
evalcond[1]=((((-0.15000018)*x4032))+((x4016*x4018))+((x4016*x4017))+(((-0.15000018)*x4029))+(((-1.0)*x4026))+x4028+(((-1.0)*x4030))+(((-1.0)*x4031)));
evalcond[2]=(((x4017*x4021))+((cj0*r01*x4019))+(((-0.21066117)*x4025))+((x4018*x4021))+((r11*sj0*x4019))+(((-1.0)*sj3*x4020))+(((-1.0)*sj3*x4024))+((sj3*x4015)));
evalcond[3]=((((-1.0)*x4018*x4019))+(((-1.0)*cj3*x4020))+(((-1.0)*cj3*x4024))+((cj3*x4015))+(((-1.0)*cj3*x4033))+((cj0*r01*x4021))+((r11*sj0*x4021))+(((-1.0)*x4017*x4019)));
evalcond[4]=(((cj3*x4016*x4017))+((cj3*x4016*x4018))+(((-1.0)*x4023*x4029))+(((-1.0)*cj3*x4026))+(((-1.0)*cj3*x4031))+(((-1.0)*cj3*x4030))+((cj3*x4028))+(((-1.0)*x4023*x4032)));
evalcond[5]=((((-1.0)*x4022*x4029))+(((-1.0)*x4022*x4032))+(((0.17676784)*x4025))+(((-1.0)*sj3*x4026))+(((-1.0)*sj3*x4030))+(((-1.0)*sj3*x4031))+((sj3*x4016*x4017))+((sj3*x4016*x4018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs((cj1*r22)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*r22*sj1)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj1*r22))+IKsqr(((-1.0)*r22*sj1))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((cj1*r22), ((-1.0)*r22*sj1));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4034=IKcos(j2);
IkReal x4035=IKsin(j2);
IkReal x4036=((1.0)*cj6);
IkReal x4037=(cj0*r01);
IkReal x4038=(r11*sj0);
IkReal x4039=((1.0)*sj1);
IkReal x4040=((0.15000018)*sj6);
IkReal x4041=((1.0)*sj6);
IkReal x4042=(cj3*x4035);
IkReal x4043=(cj0*cj6*r00);
IkReal x4044=(cj1*x4035);
IkReal x4045=(sj1*x4034);
IkReal x4046=(cj6*r10*sj0);
IkReal x4047=((1.0)*cj1*x4034);
evalcond[0]=((((-1.0)*x4035*x4039))+(((-1.0)*x4047)));
evalcond[1]=((((-1.0)*sj3*x4047))+(((-1.0)*sj3*x4035*x4039)));
evalcond[2]=((((-1.0)*x4034*x4039))+x4044+(((-1.0)*r22)));
evalcond[3]=((((-1.0)*cj3*x4047))+(((-1.0)*x4039*x4042)));
evalcond[4]=((((-0.335)*x4044))+(((-0.21066117)*sj1))+(((-1.0)*pz))+(((-0.17676784)*cj1))+(((1.11e-6)*r22))+(((0.335)*x4045)));
evalcond[5]=((((-1.0)*cj1*x4042))+((cj3*x4045))+x4046+x4043+(((-1.0)*x4037*x4041))+(((-1.0)*x4038*x4041)));
evalcond[6]=((((-1.0)*cj0*r00*x4041))+((sj3*x4045))+(((-1.0)*sj3*x4044))+(((-1.0)*x4036*x4038))+(((-1.0)*x4036*x4037))+(((-1.0)*r10*sj0*x4041)));
evalcond[7]=((((0.335)*sj1*x4035))+(((-0.21066117)*cj1))+(((0.17676784)*sj1))+(((0.335)*cj1*x4034))+(((-1.0)*py*sj0))+(((-1.0)*x4037*x4040))+(((0.15000018)*x4043))+(((0.15000018)*x4046))+(((-1.0)*cj0*px))+(((-1.0)*x4038*x4040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x4048=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x4048);
rxp1_0=(pz*r11);
rxp1_1=(r01*x4048);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4=1.5707963267949;
sj4=1.0;
cj4=0;
j5=0;
sj5=0;
cj5=1.0;
IkReal x4049=cj6*cj6;
IkReal x4050=sj3*sj3;
IkReal x4051=cj3*cj3;
IkReal x4052=sj6*sj6;
j0eval[0]=r22;
j0eval[1]=(((x4049*x4051))+((x4049*x4050))+((x4051*x4052))+((x4050*x4052)));
j0eval[2]=IKsign(r22);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x4053=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x4053);
rxp1_0=(pz*r11);
rxp1_1=(r01*x4053);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4=1.5707963267949;
sj4=1.0;
cj4=0;
j5=0;
sj5=0;
cj5=1.0;
IkReal x4054=((1.0)*sj6);
IkReal x4055=(cj6*r00);
IkReal x4056=(cj6*rxp0_2);
IkReal x4057=(cj6*r10);
IkReal x4058=((0.00186)*sj3);
IkReal x4059=((2000.0)*sj3);
j0eval[0]=(x4056+(((-1.0)*rxp1_2*x4054)));
j0eval[1]=IKsign(((((-2000.0)*rxp1_2*sj6))+(((2000.0)*x4056))));
j0eval[2]=((IKabs((x4055+((x4055*x4058))+(((-1.0)*r01*x4054))+(((-1.0)*r01*sj6*x4058))+((px*x4059)))))+(IKabs(((((-1.0)*r11*x4054))+x4057+((py*x4059))+((x4057*x4058))+(((-1.0)*r11*sj6*x4058))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x4060=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x4060);
rxp1_0=(pz*r11);
rxp1_1=(r01*x4060);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4=1.5707963267949;
sj4=1.0;
cj4=0;
j5=0;
sj5=0;
cj5=1.0;
IkReal x4061=(cj6*rxp1_2);
IkReal x4062=((0.00186)*cj3);
IkReal x4063=(rxp0_2*sj6);
IkReal x4064=((2000.0)*cj3);
j0eval[0]=((((1075268.8172043)*x4061))+(((1075268.8172043)*x4063))+(((-1.0)*r22)));
j0eval[1]=IKsign(((((-0.00186)*r22))+(((2000.0)*x4061))+(((2000.0)*x4063))));
j0eval[2]=((IKabs((((r10*sj6))+((r11*sj6*x4062))+((cj6*r11))+(((-1.0)*cj6*r10*x4062))+(((-1.0)*py*x4064)))))+(IKabs((((r00*sj6))+(((-1.0)*px*x4064))+((cj6*r01))+(((-1.0)*cj6*r00*x4062))+((r01*sj6*x4062))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4065=((0.00186)*cj3);
IkReal x4066=((2000.0)*cj3);
CheckValue<IkReal> x4067=IKPowWithIntegerCheck(IKsign(((((-0.00186)*r22))+(((2000.0)*rxp0_2*sj6))+(((2000.0)*cj6*rxp1_2)))),-1);
if(!x4067.valid){
continue;
}
CheckValue<IkReal> x4068 = IKatan2WithCheck(IkReal((((r10*sj6))+((r11*sj6*x4065))+((cj6*r11))+(((-1.0)*cj6*r10*x4065))+(((-1.0)*py*x4066)))),IkReal((((r00*sj6))+(((-1.0)*px*x4066))+((cj6*r01))+(((-1.0)*cj6*r00*x4065))+((r01*sj6*x4065)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4068.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4067.value)))+(x4068.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x4069=IKcos(j0);
IkReal x4070=IKsin(j0);
IkReal x4071=(cj6*r10);
IkReal x4072=(r11*sj6);
IkReal x4073=((9.3e-7)*x4069);
IkReal x4074=(r00*x4070);
IkReal x4075=((1.0)*cj6*x4070);
IkReal x4076=(r01*sj6*x4070);
evalcond[0]=(sj3+(((-1.0)*x4069*x4072))+(((-1.0)*cj6*x4074))+x4076+((x4069*x4071)));
evalcond[1]=(((r10*sj6*x4069))+(((-1.0)*r01*x4075))+((cj6*r11*x4069))+(((-1.0)*sj6*x4074))+(((-1.0)*cj3)));
evalcond[2]=((-0.0005)+(((-9.3e-7)*cj6*x4074))+((x4071*x4073))+(((9.3e-7)*x4076))+((py*x4069))+(((-1.0)*x4072*x4073))+(((-1.0)*px*x4070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4077=((2.59061016580351e-6)*cj0);
IkReal x4078=(r01*sj6);
IkReal x4079=(cj6*r00);
IkReal x4080=((2.17380622775013e-6)*sj0);
IkReal x4081=(cj6*r10);
IkReal x4082=(r11*sj6);
IkReal x4083=(cj0*px);
IkReal x4084=((2.17380622775013e-6)*cj0);
IkReal x4085=((2.59061016580351e-6)*sj0);
IkReal x4086=(py*sj0);
if( IKabs(((((1.35101712947818)*r22))+(((-2.78560232882098)*pz))+((x4079*x4084))+((x4080*x4081))+(((-1.0)*x4078*x4084))+(((2.33742605134422)*x4083))+(((2.33742605134422)*x4086))+(((-1.0)*x4080*x4082)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x4082*x4085))+((x4077*x4078))+(((-2.33742605134422)*pz))+(((-2.78560232882098)*x4083))+(((-2.78560232882098)*x4086))+(((1.13365163490195)*r22))+(((-1.0)*x4081*x4085))+(((-1.0)*x4077*x4079)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.35101712947818)*r22))+(((-2.78560232882098)*pz))+((x4079*x4084))+((x4080*x4081))+(((-1.0)*x4078*x4084))+(((2.33742605134422)*x4083))+(((2.33742605134422)*x4086))+(((-1.0)*x4080*x4082))))+IKsqr((((x4082*x4085))+((x4077*x4078))+(((-2.33742605134422)*pz))+(((-2.78560232882098)*x4083))+(((-2.78560232882098)*x4086))+(((1.13365163490195)*r22))+(((-1.0)*x4081*x4085))+(((-1.0)*x4077*x4079))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.35101712947818)*r22))+(((-2.78560232882098)*pz))+((x4079*x4084))+((x4080*x4081))+(((-1.0)*x4078*x4084))+(((2.33742605134422)*x4083))+(((2.33742605134422)*x4086))+(((-1.0)*x4080*x4082))), (((x4082*x4085))+((x4077*x4078))+(((-2.33742605134422)*pz))+(((-2.78560232882098)*x4083))+(((-2.78560232882098)*x4086))+(((1.13365163490195)*r22))+(((-1.0)*x4081*x4085))+(((-1.0)*x4077*x4079))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x4087=IKsin(j1);
IkReal x4088=IKcos(j1);
IkReal x4089=((0.15)*r22);
IkReal x4090=((9.3e-7)*sj6);
IkReal x4091=(r11*sj0);
IkReal x4092=((1.0)*pz);
IkReal x4093=(cj0*r01);
IkReal x4094=(r10*sj0);
IkReal x4095=((9.3e-7)*cj6);
IkReal x4096=((0.335)*sj6);
IkReal x4097=((0.335)*cj6);
IkReal x4098=(cj3*x4088);
IkReal x4099=(sj3*x4087);
IkReal x4100=((1.0)*cj0*px);
IkReal x4101=((0.335)*x4091);
IkReal x4102=((0.17676784)*x4088);
IkReal x4103=(cj0*cj6*r00);
IkReal x4104=((0.17676784)*x4087);
IkReal x4105=((0.21066117)*x4088);
IkReal x4106=((1.0)*py*sj0);
IkReal x4107=((0.21066117)*x4087);
evalcond[0]=((((-1.0)*x4092))+(((0.485)*r22))+(((-1.0)*x4107))+(((-1.0)*x4102)));
evalcond[1]=((((-1.0)*cj0*r00*x4095))+(((-1.0)*x4100))+(((-1.0)*x4106))+(((-1.0)*x4105))+x4104+((x4090*x4091))+((x4090*x4093))+(((-1.0)*x4094*x4095)));
evalcond[2]=(((x4094*x4096))+(((-1.0)*sj3*x4092))+((cj0*r00*x4096))+(((-1.0)*sj3*x4102))+(((-0.21066117)*x4099))+((sj3*x4089))+((x4091*x4097))+((x4093*x4097)));
evalcond[3]=(((x4094*x4097))+(((-1.0)*cj3*x4107))+(((-1.0)*cj3*x4092))+(((-0.17676784)*x4098))+((cj0*r00*x4097))+(((-1.0)*x4093*x4096))+((cj3*x4089))+(((-1.0)*x4091*x4096)));
evalcond[4]=((((-1.0)*cj3*x4100))+(((-1.0)*cj3*x4106))+((cj3*x4090*x4091))+((cj3*x4090*x4093))+(((-1.0)*cj3*x4094*x4095))+((cj3*x4104))+(((-0.21066117)*x4098))+(((-1.0)*cj0*cj3*r00*x4095)));
evalcond[5]=((((0.17676784)*x4099))+(((-1.0)*sj3*x4105))+(((-1.0)*sj3*x4106))+(((-1.0)*sj3*x4100))+(((-1.0)*sj3*x4094*x4095))+(((-1.0)*cj0*r00*sj3*x4095))+((sj3*x4090*x4091))+((sj3*x4090*x4093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((-1.0)*cj1*r22)) < IKFAST_ATAN2_MAGTHRESH && IKabs((r22*sj1)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj1*r22))+IKsqr((r22*sj1))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*cj1*r22), (r22*sj1));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4108=IKsin(j2);
IkReal x4109=IKcos(j2);
IkReal x4110=((1.0)*cj6);
IkReal x4111=(cj0*r01);
IkReal x4112=(r11*sj0);
IkReal x4113=((1.0)*sj1);
IkReal x4114=((9.3e-7)*sj6);
IkReal x4115=((9.3e-7)*cj6);
IkReal x4116=(r10*sj0);
IkReal x4117=(cj0*r00);
IkReal x4118=((1.0)*sj6);
IkReal x4119=(cj3*x4108);
IkReal x4120=(cj1*x4108);
IkReal x4121=(sj1*x4109);
IkReal x4122=((1.0)*cj1*x4109);
evalcond[0]=((((-1.0)*x4109*x4113))+x4120+r22);
evalcond[1]=((((-1.0)*x4122))+(((-1.0)*x4108*x4113)));
evalcond[2]=((((-1.0)*sj3*x4122))+(((-1.0)*sj3*x4108*x4113)));
evalcond[3]=((((-1.0)*cj3*x4122))+(((-1.0)*x4113*x4119)));
evalcond[4]=((((-0.21066117)*sj1))+(((0.15)*r22))+(((-1.0)*pz))+(((-0.17676784)*cj1))+(((-0.335)*x4120))+(((0.335)*x4121)));
evalcond[5]=((((-1.0)*x4110*x4117))+(((-1.0)*x4110*x4116))+((sj6*x4111))+((sj6*x4112))+(((-1.0)*cj1*x4119))+((cj3*x4121)));
evalcond[6]=((((-1.0)*x4117*x4118))+((sj3*x4121))+(((-1.0)*x4110*x4112))+(((-1.0)*x4110*x4111))+(((-1.0)*x4116*x4118))+(((-1.0)*sj3*x4120)));
evalcond[7]=(((x4112*x4114))+(((-0.21066117)*cj1))+(((0.17676784)*sj1))+(((0.335)*cj1*x4109))+(((-1.0)*py*sj0))+((x4111*x4114))+(((0.335)*sj1*x4108))+(((-1.0)*x4115*x4116))+(((-1.0)*x4115*x4117))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4123=((0.00186)*sj3);
IkReal x4124=(r01*sj6);
IkReal x4125=(cj6*r00);
IkReal x4126=(cj6*r10);
IkReal x4127=((2000.0)*sj3);
IkReal x4128=(r11*sj6);
CheckValue<IkReal> x4129 = IKatan2WithCheck(IkReal((((py*x4127))+x4126+(((-1.0)*x4123*x4128))+((x4123*x4126))+(((-1.0)*x4128)))),IkReal((((px*x4127))+x4125+(((-1.0)*x4123*x4124))+((x4123*x4125))+(((-1.0)*x4124)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4129.valid){
continue;
}
CheckValue<IkReal> x4130=IKPowWithIntegerCheck(IKsign(((((-2000.0)*rxp1_2*sj6))+(((2000.0)*cj6*rxp0_2)))),-1);
if(!x4130.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4129.value)+(((1.5707963267949)*(x4130.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x4131=IKcos(j0);
IkReal x4132=IKsin(j0);
IkReal x4133=(cj6*r10);
IkReal x4134=(r11*sj6);
IkReal x4135=((9.3e-7)*x4131);
IkReal x4136=(r00*x4132);
IkReal x4137=((1.0)*cj6*x4132);
IkReal x4138=(r01*sj6*x4132);
evalcond[0]=((((-1.0)*cj6*x4136))+sj3+((x4131*x4133))+x4138+(((-1.0)*x4131*x4134)));
evalcond[1]=(((r10*sj6*x4131))+((cj6*r11*x4131))+(((-1.0)*sj6*x4136))+(((-1.0)*r01*x4137))+(((-1.0)*cj3)));
evalcond[2]=((-0.0005)+(((-9.3e-7)*cj6*x4136))+(((-1.0)*px*x4132))+(((-1.0)*x4134*x4135))+(((9.3e-7)*x4138))+((py*x4131))+((x4133*x4135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4139=((2.59061016580351e-6)*cj0);
IkReal x4140=(r01*sj6);
IkReal x4141=(cj6*r00);
IkReal x4142=((2.17380622775013e-6)*sj0);
IkReal x4143=(cj6*r10);
IkReal x4144=(r11*sj6);
IkReal x4145=(cj0*px);
IkReal x4146=((2.17380622775013e-6)*cj0);
IkReal x4147=((2.59061016580351e-6)*sj0);
IkReal x4148=(py*sj0);
if( IKabs(((((1.35101712947818)*r22))+((x4142*x4143))+(((-2.78560232882098)*pz))+(((-1.0)*x4140*x4146))+((x4141*x4146))+(((-1.0)*x4142*x4144))+(((2.33742605134422)*x4145))+(((2.33742605134422)*x4148)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x4139*x4140))+(((-2.33742605134422)*pz))+(((-2.78560232882098)*x4145))+(((-2.78560232882098)*x4148))+(((-1.0)*x4143*x4147))+(((-1.0)*x4139*x4141))+(((1.13365163490195)*r22))+((x4144*x4147)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.35101712947818)*r22))+((x4142*x4143))+(((-2.78560232882098)*pz))+(((-1.0)*x4140*x4146))+((x4141*x4146))+(((-1.0)*x4142*x4144))+(((2.33742605134422)*x4145))+(((2.33742605134422)*x4148))))+IKsqr((((x4139*x4140))+(((-2.33742605134422)*pz))+(((-2.78560232882098)*x4145))+(((-2.78560232882098)*x4148))+(((-1.0)*x4143*x4147))+(((-1.0)*x4139*x4141))+(((1.13365163490195)*r22))+((x4144*x4147))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.35101712947818)*r22))+((x4142*x4143))+(((-2.78560232882098)*pz))+(((-1.0)*x4140*x4146))+((x4141*x4146))+(((-1.0)*x4142*x4144))+(((2.33742605134422)*x4145))+(((2.33742605134422)*x4148))), (((x4139*x4140))+(((-2.33742605134422)*pz))+(((-2.78560232882098)*x4145))+(((-2.78560232882098)*x4148))+(((-1.0)*x4143*x4147))+(((-1.0)*x4139*x4141))+(((1.13365163490195)*r22))+((x4144*x4147))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x4149=IKsin(j1);
IkReal x4150=IKcos(j1);
IkReal x4151=((0.15)*r22);
IkReal x4152=((9.3e-7)*sj6);
IkReal x4153=(r11*sj0);
IkReal x4154=((1.0)*pz);
IkReal x4155=(cj0*r01);
IkReal x4156=(r10*sj0);
IkReal x4157=((9.3e-7)*cj6);
IkReal x4158=((0.335)*sj6);
IkReal x4159=((0.335)*cj6);
IkReal x4160=(cj3*x4150);
IkReal x4161=(sj3*x4149);
IkReal x4162=((1.0)*cj0*px);
IkReal x4163=((0.335)*x4153);
IkReal x4164=((0.17676784)*x4150);
IkReal x4165=(cj0*cj6*r00);
IkReal x4166=((0.17676784)*x4149);
IkReal x4167=((0.21066117)*x4150);
IkReal x4168=((1.0)*py*sj0);
IkReal x4169=((0.21066117)*x4149);
evalcond[0]=((((0.485)*r22))+(((-1.0)*x4164))+(((-1.0)*x4169))+(((-1.0)*x4154)));
evalcond[1]=(((x4152*x4153))+((x4152*x4155))+(((-1.0)*cj0*r00*x4157))+(((-1.0)*x4167))+(((-1.0)*x4162))+(((-1.0)*x4168))+(((-1.0)*x4156*x4157))+x4166);
evalcond[2]=(((x4153*x4159))+((x4155*x4159))+(((-1.0)*sj3*x4164))+(((-0.21066117)*x4161))+((cj0*r00*x4158))+((x4156*x4158))+((sj3*x4151))+(((-1.0)*sj3*x4154)));
evalcond[3]=((((-1.0)*cj3*x4169))+(((-1.0)*x4155*x4158))+(((-1.0)*x4153*x4158))+((cj3*x4151))+(((-0.17676784)*x4160))+((cj0*r00*x4159))+((x4156*x4159))+(((-1.0)*cj3*x4154)));
evalcond[4]=((((-1.0)*cj3*x4168))+(((-1.0)*cj3*x4162))+(((-0.21066117)*x4160))+((cj3*x4152*x4153))+((cj3*x4152*x4155))+((cj3*x4166))+(((-1.0)*cj3*x4156*x4157))+(((-1.0)*cj0*cj3*r00*x4157)));
evalcond[5]=((((0.17676784)*x4161))+(((-1.0)*cj0*r00*sj3*x4157))+(((-1.0)*sj3*x4168))+(((-1.0)*sj3*x4162))+(((-1.0)*sj3*x4167))+((sj3*x4152*x4153))+((sj3*x4152*x4155))+(((-1.0)*sj3*x4156*x4157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((-1.0)*cj1*r22)) < IKFAST_ATAN2_MAGTHRESH && IKabs((r22*sj1)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj1*r22))+IKsqr((r22*sj1))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*cj1*r22), (r22*sj1));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4170=IKsin(j2);
IkReal x4171=IKcos(j2);
IkReal x4172=((1.0)*cj6);
IkReal x4173=(cj0*r01);
IkReal x4174=(r11*sj0);
IkReal x4175=((1.0)*sj1);
IkReal x4176=((9.3e-7)*sj6);
IkReal x4177=((9.3e-7)*cj6);
IkReal x4178=(r10*sj0);
IkReal x4179=(cj0*r00);
IkReal x4180=((1.0)*sj6);
IkReal x4181=(cj3*x4170);
IkReal x4182=(cj1*x4170);
IkReal x4183=(sj1*x4171);
IkReal x4184=((1.0)*cj1*x4171);
evalcond[0]=((((-1.0)*x4171*x4175))+x4182+r22);
evalcond[1]=((((-1.0)*x4184))+(((-1.0)*x4170*x4175)));
evalcond[2]=((((-1.0)*sj3*x4184))+(((-1.0)*sj3*x4170*x4175)));
evalcond[3]=((((-1.0)*x4175*x4181))+(((-1.0)*cj3*x4184)));
evalcond[4]=((((-0.21066117)*sj1))+(((0.15)*r22))+(((-1.0)*pz))+(((-0.335)*x4182))+(((-0.17676784)*cj1))+(((0.335)*x4183)));
evalcond[5]=((((-1.0)*x4172*x4178))+(((-1.0)*x4172*x4179))+((cj3*x4183))+(((-1.0)*cj1*x4181))+((sj6*x4174))+((sj6*x4173)));
evalcond[6]=(((sj3*x4183))+(((-1.0)*x4172*x4174))+(((-1.0)*x4172*x4173))+(((-1.0)*sj3*x4182))+(((-1.0)*x4179*x4180))+(((-1.0)*x4178*x4180)));
evalcond[7]=((((-1.0)*x4177*x4178))+(((-1.0)*x4177*x4179))+((x4173*x4176))+(((-0.21066117)*cj1))+(((0.17676784)*sj1))+(((0.335)*cj1*x4171))+(((-1.0)*py*sj0))+(((0.335)*sj1*x4170))+(((-1.0)*cj0*px))+((x4174*x4176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4185=(cj3*cj6);
IkReal x4186=(cj6*sj3);
IkReal x4187=(sj3*sj6);
IkReal x4188=((1.0)*cj3*sj6);
CheckValue<IkReal> x4189 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x4188))+((r11*x4186))+((r10*x4187))+((r10*x4185)))),IkReal(((((-1.0)*r01*x4188))+((r01*x4186))+((r00*x4187))+((r00*x4185)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4189.valid){
continue;
}
CheckValue<IkReal> x4190=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x4190.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4189.value)+(((1.5707963267949)*(x4190.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x4191=IKcos(j0);
IkReal x4192=IKsin(j0);
IkReal x4193=(cj6*r10);
IkReal x4194=(r11*sj6);
IkReal x4195=((9.3e-7)*x4191);
IkReal x4196=(r00*x4192);
IkReal x4197=((1.0)*cj6*x4192);
IkReal x4198=(r01*sj6*x4192);
evalcond[0]=(sj3+(((-1.0)*x4191*x4194))+(((-1.0)*cj6*x4196))+((x4191*x4193))+x4198);
evalcond[1]=((((-1.0)*r01*x4197))+((r10*sj6*x4191))+((cj6*r11*x4191))+(((-1.0)*cj3))+(((-1.0)*sj6*x4196)));
evalcond[2]=((-0.0005)+(((-1.0)*x4194*x4195))+((x4193*x4195))+(((-1.0)*px*x4192))+(((9.3e-7)*x4198))+(((-9.3e-7)*cj6*x4196))+((py*x4191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4199=((2.59061016580351e-6)*cj0);
IkReal x4200=(r01*sj6);
IkReal x4201=(cj6*r00);
IkReal x4202=((2.17380622775013e-6)*sj0);
IkReal x4203=(cj6*r10);
IkReal x4204=(r11*sj6);
IkReal x4205=(cj0*px);
IkReal x4206=((2.17380622775013e-6)*cj0);
IkReal x4207=((2.59061016580351e-6)*sj0);
IkReal x4208=(py*sj0);
if( IKabs(((((1.35101712947818)*r22))+(((-2.78560232882098)*pz))+(((2.33742605134422)*x4208))+(((2.33742605134422)*x4205))+((x4201*x4206))+((x4202*x4203))+(((-1.0)*x4202*x4204))+(((-1.0)*x4200*x4206)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x4199*x4200))+((x4204*x4207))+(((-2.78560232882098)*x4208))+(((-2.78560232882098)*x4205))+(((-2.33742605134422)*pz))+(((-1.0)*x4199*x4201))+(((1.13365163490195)*r22))+(((-1.0)*x4203*x4207)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.35101712947818)*r22))+(((-2.78560232882098)*pz))+(((2.33742605134422)*x4208))+(((2.33742605134422)*x4205))+((x4201*x4206))+((x4202*x4203))+(((-1.0)*x4202*x4204))+(((-1.0)*x4200*x4206))))+IKsqr((((x4199*x4200))+((x4204*x4207))+(((-2.78560232882098)*x4208))+(((-2.78560232882098)*x4205))+(((-2.33742605134422)*pz))+(((-1.0)*x4199*x4201))+(((1.13365163490195)*r22))+(((-1.0)*x4203*x4207))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.35101712947818)*r22))+(((-2.78560232882098)*pz))+(((2.33742605134422)*x4208))+(((2.33742605134422)*x4205))+((x4201*x4206))+((x4202*x4203))+(((-1.0)*x4202*x4204))+(((-1.0)*x4200*x4206))), (((x4199*x4200))+((x4204*x4207))+(((-2.78560232882098)*x4208))+(((-2.78560232882098)*x4205))+(((-2.33742605134422)*pz))+(((-1.0)*x4199*x4201))+(((1.13365163490195)*r22))+(((-1.0)*x4203*x4207))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x4209=IKsin(j1);
IkReal x4210=IKcos(j1);
IkReal x4211=((0.15)*r22);
IkReal x4212=((9.3e-7)*sj6);
IkReal x4213=(r11*sj0);
IkReal x4214=((1.0)*pz);
IkReal x4215=(cj0*r01);
IkReal x4216=(r10*sj0);
IkReal x4217=((9.3e-7)*cj6);
IkReal x4218=((0.335)*sj6);
IkReal x4219=((0.335)*cj6);
IkReal x4220=(cj3*x4210);
IkReal x4221=(sj3*x4209);
IkReal x4222=((1.0)*cj0*px);
IkReal x4223=((0.335)*x4213);
IkReal x4224=((0.17676784)*x4210);
IkReal x4225=(cj0*cj6*r00);
IkReal x4226=((0.17676784)*x4209);
IkReal x4227=((0.21066117)*x4210);
IkReal x4228=((1.0)*py*sj0);
IkReal x4229=((0.21066117)*x4209);
evalcond[0]=((((-1.0)*x4224))+(((-1.0)*x4229))+(((0.485)*r22))+(((-1.0)*x4214)));
evalcond[1]=((((-1.0)*x4228))+(((-1.0)*x4222))+(((-1.0)*x4227))+(((-1.0)*x4216*x4217))+((x4212*x4215))+((x4212*x4213))+x4226+(((-1.0)*cj0*r00*x4217)));
evalcond[2]=((((-1.0)*sj3*x4224))+(((-1.0)*sj3*x4214))+((cj0*r00*x4218))+((x4215*x4219))+((x4213*x4219))+((sj3*x4211))+((x4216*x4218))+(((-0.21066117)*x4221)));
evalcond[3]=(((cj3*x4211))+(((-1.0)*cj3*x4229))+(((-1.0)*x4213*x4218))+((cj0*r00*x4219))+(((-1.0)*x4215*x4218))+((x4216*x4219))+(((-1.0)*cj3*x4214))+(((-0.17676784)*x4220)));
evalcond[4]=((((-1.0)*cj3*x4222))+(((-1.0)*cj3*x4228))+((cj3*x4212*x4213))+((cj3*x4212*x4215))+((cj3*x4226))+(((-1.0)*cj0*cj3*r00*x4217))+(((-0.21066117)*x4220))+(((-1.0)*cj3*x4216*x4217)));
evalcond[5]=((((-1.0)*sj3*x4227))+(((-1.0)*sj3*x4222))+(((-1.0)*sj3*x4228))+((sj3*x4212*x4213))+((sj3*x4212*x4215))+(((-1.0)*cj0*r00*sj3*x4217))+(((0.17676784)*x4221))+(((-1.0)*sj3*x4216*x4217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((-1.0)*cj1*r22)) < IKFAST_ATAN2_MAGTHRESH && IKabs((r22*sj1)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj1*r22))+IKsqr((r22*sj1))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*cj1*r22), (r22*sj1));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4230=IKsin(j2);
IkReal x4231=IKcos(j2);
IkReal x4232=((1.0)*cj6);
IkReal x4233=(cj0*r01);
IkReal x4234=(r11*sj0);
IkReal x4235=((1.0)*sj1);
IkReal x4236=((9.3e-7)*sj6);
IkReal x4237=((9.3e-7)*cj6);
IkReal x4238=(r10*sj0);
IkReal x4239=(cj0*r00);
IkReal x4240=((1.0)*sj6);
IkReal x4241=(cj3*x4230);
IkReal x4242=(cj1*x4230);
IkReal x4243=(sj1*x4231);
IkReal x4244=((1.0)*cj1*x4231);
evalcond[0]=((((-1.0)*x4231*x4235))+x4242+r22);
evalcond[1]=((((-1.0)*x4244))+(((-1.0)*x4230*x4235)));
evalcond[2]=((((-1.0)*sj3*x4244))+(((-1.0)*sj3*x4230*x4235)));
evalcond[3]=((((-1.0)*cj3*x4244))+(((-1.0)*x4235*x4241)));
evalcond[4]=((((-0.21066117)*sj1))+(((-0.335)*x4242))+(((0.335)*x4243))+(((0.15)*r22))+(((-1.0)*pz))+(((-0.17676784)*cj1)));
evalcond[5]=((((-1.0)*cj1*x4241))+(((-1.0)*x4232*x4238))+(((-1.0)*x4232*x4239))+((cj3*x4243))+((sj6*x4233))+((sj6*x4234)));
evalcond[6]=((((-1.0)*x4232*x4233))+(((-1.0)*x4232*x4234))+(((-1.0)*sj3*x4242))+(((-1.0)*x4238*x4240))+((sj3*x4243))+(((-1.0)*x4239*x4240)));
evalcond[7]=((((-0.21066117)*cj1))+(((0.335)*sj1*x4230))+(((0.17676784)*sj1))+(((-1.0)*x4237*x4239))+(((-1.0)*x4237*x4238))+(((-1.0)*py*sj0))+((x4233*x4236))+(((0.335)*cj1*x4231))+(((-1.0)*cj0*px))+((x4234*x4236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j5, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x4245=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x4245);
rxp1_0=(pz*r11);
rxp1_1=(r01*x4245);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4=1.5707963267949;
sj4=1.0;
cj4=0;
j5=3.14159265358979;
sj5=0;
cj5=-1.0;
IkReal x4246=cj6*cj6;
IkReal x4247=sj3*sj3;
IkReal x4248=cj3*cj3;
IkReal x4249=sj6*sj6;
j0eval[0]=r22;
j0eval[1]=(((x4246*x4248))+((x4246*x4247))+((x4248*x4249))+((x4247*x4249)));
j0eval[2]=IKsign(r22);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x4250=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x4250);
rxp1_0=(pz*r11);
rxp1_1=(r01*x4250);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4=1.5707963267949;
sj4=1.0;
cj4=0;
j5=3.14159265358979;
sj5=0;
cj5=-1.0;
IkReal x4251=(r11*sj6);
IkReal x4252=(r01*sj6);
IkReal x4253=((1.0)*cj6);
IkReal x4254=((2000.0)*sj3);
IkReal x4255=(rxp1_2*sj6);
IkReal x4256=((0.00258)*sj3);
IkReal x4257=(cj6*x4256);
j0eval[0]=((((-1.0)*rxp0_2*x4253))+x4255);
j0eval[1]=((IKabs((((px*x4254))+x4252+((x4252*x4256))+(((-1.0)*r00*x4253))+(((-1.0)*r00*x4257)))))+(IKabs((((py*x4254))+x4251+((x4251*x4256))+(((-1.0)*r10*x4257))+(((-1.0)*r10*x4253))))));
j0eval[2]=IKsign(((((-2000.0)*cj6*rxp0_2))+(((2000.0)*x4255))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x4258=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x4258);
rxp1_0=(pz*r11);
rxp1_1=(r01*x4258);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4=1.5707963267949;
sj4=1.0;
cj4=0;
j5=3.14159265358979;
sj5=0;
cj5=-1.0;
IkReal x4259=(cj6*rxp1_2);
IkReal x4260=(rxp0_2*sj6);
IkReal x4261=((2000.0)*cj3);
IkReal x4262=((0.00258)*cj3*sj6);
IkReal x4263=((0.00258)*cj3*cj6);
j0eval[0]=((((775193.798449612)*x4259))+r22+(((775193.798449612)*x4260)));
j0eval[1]=((IKabs((((r00*sj6))+(((-1.0)*px*x4261))+(((-1.0)*r01*x4262))+((cj6*r01))+((r00*x4263)))))+(IKabs(((((-1.0)*r11*x4262))+((r10*sj6))+(((-1.0)*py*x4261))+((cj6*r11))+((r10*x4263))))));
j0eval[2]=IKsign(((((2000.0)*x4260))+(((2000.0)*x4259))+(((0.00258)*r22))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4264=((2000.0)*cj3);
IkReal x4265=((0.00258)*cj3*sj6);
IkReal x4266=((0.00258)*cj3*cj6);
CheckValue<IkReal> x4267=IKPowWithIntegerCheck(IKsign(((((2000.0)*rxp0_2*sj6))+(((0.00258)*r22))+(((2000.0)*cj6*rxp1_2)))),-1);
if(!x4267.valid){
continue;
}
CheckValue<IkReal> x4268 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x4265))+((r10*sj6))+(((-1.0)*py*x4264))+((cj6*r11))+((r10*x4266)))),IkReal((((r00*sj6))+(((-1.0)*px*x4264))+(((-1.0)*r01*x4265))+((cj6*r01))+((r00*x4266)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4268.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4267.value)))+(x4268.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x4269=IKsin(j0);
IkReal x4270=IKcos(j0);
IkReal x4271=((1.0)*r01);
IkReal x4272=(cj6*x4269);
IkReal x4273=(cj6*x4270);
IkReal x4274=(sj6*x4269);
IkReal x4275=(r11*sj6*x4270);
evalcond[0]=(((r00*x4272))+sj3+(((-1.0)*r10*x4273))+(((-1.0)*x4271*x4274))+x4275);
evalcond[1]=(((r11*x4273))+((r10*sj6*x4270))+(((-1.0)*r00*x4274))+(((-1.0)*x4271*x4272))+(((-1.0)*cj3)));
evalcond[2]=((-0.0005)+((py*x4270))+(((1.29e-6)*r00*x4272))+(((1.29e-6)*x4275))+(((-1.29e-6)*r10*x4273))+(((-1.0)*px*x4269))+(((-1.29e-6)*r01*x4274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4276=((3.59342700417906e-6)*sj0);
IkReal x4277=(r11*sj6);
IkReal x4278=(cj6*r10);
IkReal x4279=(cj0*px);
IkReal x4280=((3.01527960623405e-6)*sj0);
IkReal x4281=(py*sj0);
IkReal x4282=(cj0*cj6*r00);
IkReal x4283=(cj0*r01*sj6);
if( IKabs(((((-2.78560232882098)*pz))+(((-1.35101712947818)*r22))+(((3.01527960623405e-6)*x4283))+(((-1.0)*x4278*x4280))+((x4277*x4280))+(((2.33742605134422)*x4281))+(((2.33742605134422)*x4279))+(((-3.01527960623405e-6)*x4282)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.59342700417906e-6)*x4282))+(((-1.13365163490195)*r22))+(((-2.33742605134422)*pz))+(((-1.0)*x4276*x4277))+((x4276*x4278))+(((-3.59342700417906e-6)*x4283))+(((-2.78560232882098)*x4281))+(((-2.78560232882098)*x4279)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.78560232882098)*pz))+(((-1.35101712947818)*r22))+(((3.01527960623405e-6)*x4283))+(((-1.0)*x4278*x4280))+((x4277*x4280))+(((2.33742605134422)*x4281))+(((2.33742605134422)*x4279))+(((-3.01527960623405e-6)*x4282))))+IKsqr(((((3.59342700417906e-6)*x4282))+(((-1.13365163490195)*r22))+(((-2.33742605134422)*pz))+(((-1.0)*x4276*x4277))+((x4276*x4278))+(((-3.59342700417906e-6)*x4283))+(((-2.78560232882098)*x4281))+(((-2.78560232882098)*x4279))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.78560232882098)*pz))+(((-1.35101712947818)*r22))+(((3.01527960623405e-6)*x4283))+(((-1.0)*x4278*x4280))+((x4277*x4280))+(((2.33742605134422)*x4281))+(((2.33742605134422)*x4279))+(((-3.01527960623405e-6)*x4282))), ((((3.59342700417906e-6)*x4282))+(((-1.13365163490195)*r22))+(((-2.33742605134422)*pz))+(((-1.0)*x4276*x4277))+((x4276*x4278))+(((-3.59342700417906e-6)*x4283))+(((-2.78560232882098)*x4281))+(((-2.78560232882098)*x4279))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x4284=IKsin(j1);
IkReal x4285=IKcos(j1);
IkReal x4286=((1.29e-6)*cj0);
IkReal x4287=(cj6*r00);
IkReal x4288=(r01*sj6);
IkReal x4289=((1.29e-6)*cj3);
IkReal x4290=(cj6*sj0);
IkReal x4291=((0.335)*cj0);
IkReal x4292=((1.29e-6)*r10);
IkReal x4293=((1.0)*pz);
IkReal x4294=((0.335)*r10);
IkReal x4295=((0.15)*r22);
IkReal x4296=((0.17676784)*x4285);
IkReal x4297=(sj3*x4284);
IkReal x4298=((1.0)*cj0*px);
IkReal x4299=(r11*sj0*sj6);
IkReal x4300=((0.17676784)*x4284);
IkReal x4301=((0.21066117)*x4285);
IkReal x4302=((1.0)*py*sj0);
IkReal x4303=((0.21066117)*x4284);
evalcond[0]=((((-1.0)*x4296))+(((-1.0)*x4293))+(((-0.485)*r22))+(((-1.0)*x4303)));
evalcond[1]=((((-1.0)*x4286*x4288))+(((-1.29e-6)*x4299))+(((-1.0)*x4298))+((x4286*x4287))+((x4290*x4292))+x4300+(((-1.0)*x4301))+(((-1.0)*x4302)));
evalcond[2]=(((cj6*r01*x4291))+(((-0.21066117)*x4297))+(((0.335)*r11*x4290))+((r00*sj6*x4291))+((sj0*sj6*x4294))+(((-1.0)*sj3*x4293))+(((-1.0)*sj3*x4295))+(((-1.0)*sj3*x4296)));
evalcond[3]=((((-1.0)*cj3*x4293))+(((-1.0)*cj3*x4295))+(((-1.0)*cj3*x4296))+((x4288*x4291))+(((-1.0)*cj3*x4303))+(((-1.0)*x4290*x4294))+(((0.335)*x4299))+(((-1.0)*x4287*x4291)));
evalcond[4]=((((-1.0)*cj3*x4298))+((cj3*x4300))+((r10*x4289*x4290))+(((-1.0)*cj3*x4302))+(((-1.0)*cj3*x4301))+(((-1.0)*x4289*x4299))+((cj3*x4286*x4287))+(((-1.0)*cj3*x4286*x4288)));
evalcond[5]=((((-1.0)*sj3*x4286*x4288))+(((-1.0)*sj3*x4301))+(((-1.0)*sj3*x4302))+((sj3*x4286*x4287))+(((-1.29e-6)*sj3*x4299))+(((-1.0)*sj3*x4298))+((sj3*x4290*x4292))+(((0.17676784)*x4297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs((cj1*r22)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*r22*sj1)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj1*r22))+IKsqr(((-1.0)*r22*sj1))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((cj1*r22), ((-1.0)*r22*sj1));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4304=IKcos(j2);
IkReal x4305=IKsin(j2);
IkReal x4306=(cj0*cj6);
IkReal x4307=((1.0)*r01);
IkReal x4308=(cj6*sj0);
IkReal x4309=((1.0)*r11);
IkReal x4310=((1.0)*sj1);
IkReal x4311=(cj0*sj6);
IkReal x4312=(sj0*sj6);
IkReal x4313=(cj3*x4305);
IkReal x4314=(cj1*x4305);
IkReal x4315=(sj1*x4304);
IkReal x4316=((1.0)*cj1*x4304);
evalcond[0]=((((-1.0)*x4305*x4310))+(((-1.0)*x4316)));
evalcond[1]=((((-1.0)*sj3*x4316))+(((-1.0)*sj3*x4305*x4310)));
evalcond[2]=((((-1.0)*r22))+x4314+(((-1.0)*x4304*x4310)));
evalcond[3]=((((-1.0)*cj3*x4316))+(((-1.0)*x4310*x4313)));
evalcond[4]=((((-0.21066117)*sj1))+(((-0.15)*r22))+(((-1.0)*pz))+(((-0.17676784)*cj1))+(((-0.335)*x4314))+(((0.335)*x4315)));
evalcond[5]=(((cj3*x4315))+(((-1.0)*x4307*x4311))+(((-1.0)*x4309*x4312))+((r10*x4308))+((r00*x4306))+(((-1.0)*cj1*x4313)));
evalcond[6]=(((sj3*x4315))+(((-1.0)*r10*x4312))+(((-1.0)*sj3*x4314))+(((-1.0)*x4306*x4307))+(((-1.0)*r00*x4311))+(((-1.0)*x4308*x4309)));
evalcond[7]=((((-1.29e-6)*r01*x4311))+(((-0.21066117)*cj1))+(((-1.29e-6)*r11*x4312))+(((0.17676784)*sj1))+(((1.29e-6)*r00*x4306))+(((0.335)*sj1*x4305))+(((1.29e-6)*r10*x4308))+(((0.335)*cj1*x4304))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4317=(r11*sj6);
IkReal x4318=(r01*sj6);
IkReal x4319=((1.0)*cj6);
IkReal x4320=((2000.0)*sj3);
IkReal x4321=((0.00258)*sj3);
IkReal x4322=(cj6*x4321);
CheckValue<IkReal> x4323 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x4322))+((py*x4320))+((x4317*x4321))+x4317+(((-1.0)*r10*x4319)))),IkReal(((((-1.0)*r00*x4322))+((x4318*x4321))+x4318+((px*x4320))+(((-1.0)*r00*x4319)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4323.valid){
continue;
}
CheckValue<IkReal> x4324=IKPowWithIntegerCheck(IKsign(((((-2000.0)*cj6*rxp0_2))+(((2000.0)*rxp1_2*sj6)))),-1);
if(!x4324.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4323.value)+(((1.5707963267949)*(x4324.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x4325=IKsin(j0);
IkReal x4326=IKcos(j0);
IkReal x4327=((1.0)*r01);
IkReal x4328=(cj6*x4325);
IkReal x4329=(cj6*x4326);
IkReal x4330=(sj6*x4325);
IkReal x4331=(r11*sj6*x4326);
evalcond[0]=(((r00*x4328))+sj3+(((-1.0)*x4327*x4330))+(((-1.0)*r10*x4329))+x4331);
evalcond[1]=(((r10*sj6*x4326))+(((-1.0)*x4327*x4328))+(((-1.0)*r00*x4330))+((r11*x4329))+(((-1.0)*cj3)));
evalcond[2]=((-0.0005)+((py*x4326))+(((-1.29e-6)*r01*x4330))+(((1.29e-6)*x4331))+(((-1.0)*px*x4325))+(((-1.29e-6)*r10*x4329))+(((1.29e-6)*r00*x4328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4332=((3.59342700417906e-6)*sj0);
IkReal x4333=(r11*sj6);
IkReal x4334=(cj6*r10);
IkReal x4335=(cj0*px);
IkReal x4336=((3.01527960623405e-6)*sj0);
IkReal x4337=(py*sj0);
IkReal x4338=(cj0*cj6*r00);
IkReal x4339=(cj0*r01*sj6);
if( IKabs(((((-3.01527960623405e-6)*x4338))+(((-2.78560232882098)*pz))+(((-1.0)*x4334*x4336))+(((-1.35101712947818)*r22))+(((3.01527960623405e-6)*x4339))+((x4333*x4336))+(((2.33742605134422)*x4337))+(((2.33742605134422)*x4335)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x4332*x4333))+(((-1.13365163490195)*r22))+(((-2.33742605134422)*pz))+((x4332*x4334))+(((3.59342700417906e-6)*x4338))+(((-2.78560232882098)*x4337))+(((-2.78560232882098)*x4335))+(((-3.59342700417906e-6)*x4339)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.01527960623405e-6)*x4338))+(((-2.78560232882098)*pz))+(((-1.0)*x4334*x4336))+(((-1.35101712947818)*r22))+(((3.01527960623405e-6)*x4339))+((x4333*x4336))+(((2.33742605134422)*x4337))+(((2.33742605134422)*x4335))))+IKsqr(((((-1.0)*x4332*x4333))+(((-1.13365163490195)*r22))+(((-2.33742605134422)*pz))+((x4332*x4334))+(((3.59342700417906e-6)*x4338))+(((-2.78560232882098)*x4337))+(((-2.78560232882098)*x4335))+(((-3.59342700417906e-6)*x4339))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-3.01527960623405e-6)*x4338))+(((-2.78560232882098)*pz))+(((-1.0)*x4334*x4336))+(((-1.35101712947818)*r22))+(((3.01527960623405e-6)*x4339))+((x4333*x4336))+(((2.33742605134422)*x4337))+(((2.33742605134422)*x4335))), ((((-1.0)*x4332*x4333))+(((-1.13365163490195)*r22))+(((-2.33742605134422)*pz))+((x4332*x4334))+(((3.59342700417906e-6)*x4338))+(((-2.78560232882098)*x4337))+(((-2.78560232882098)*x4335))+(((-3.59342700417906e-6)*x4339))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x4340=IKsin(j1);
IkReal x4341=IKcos(j1);
IkReal x4342=((1.29e-6)*cj0);
IkReal x4343=(cj6*r00);
IkReal x4344=(r01*sj6);
IkReal x4345=((1.29e-6)*cj3);
IkReal x4346=(cj6*sj0);
IkReal x4347=((0.335)*cj0);
IkReal x4348=((1.29e-6)*r10);
IkReal x4349=((1.0)*pz);
IkReal x4350=((0.335)*r10);
IkReal x4351=((0.15)*r22);
IkReal x4352=((0.17676784)*x4341);
IkReal x4353=(sj3*x4340);
IkReal x4354=((1.0)*cj0*px);
IkReal x4355=(r11*sj0*sj6);
IkReal x4356=((0.17676784)*x4340);
IkReal x4357=((0.21066117)*x4341);
IkReal x4358=((1.0)*py*sj0);
IkReal x4359=((0.21066117)*x4340);
evalcond[0]=((((-1.0)*x4349))+(((-1.0)*x4359))+(((-1.0)*x4352))+(((-0.485)*r22)));
evalcond[1]=((((-1.0)*x4342*x4344))+(((-1.0)*x4358))+(((-1.0)*x4357))+(((-1.0)*x4354))+((x4342*x4343))+(((-1.29e-6)*x4355))+x4356+((x4346*x4348)));
evalcond[2]=((((-0.21066117)*x4353))+((cj6*r01*x4347))+((sj0*sj6*x4350))+(((0.335)*r11*x4346))+((r00*sj6*x4347))+(((-1.0)*sj3*x4352))+(((-1.0)*sj3*x4351))+(((-1.0)*sj3*x4349)));
evalcond[3]=((((-1.0)*cj3*x4349))+((x4344*x4347))+(((-1.0)*x4343*x4347))+(((0.335)*x4355))+(((-1.0)*x4346*x4350))+(((-1.0)*cj3*x4351))+(((-1.0)*cj3*x4352))+(((-1.0)*cj3*x4359)));
evalcond[4]=((((-1.0)*x4345*x4355))+((cj3*x4342*x4343))+(((-1.0)*cj3*x4342*x4344))+((r10*x4345*x4346))+((cj3*x4356))+(((-1.0)*cj3*x4354))+(((-1.0)*cj3*x4357))+(((-1.0)*cj3*x4358)));
evalcond[5]=((((-1.29e-6)*sj3*x4355))+(((0.17676784)*x4353))+((sj3*x4342*x4343))+((sj3*x4346*x4348))+(((-1.0)*sj3*x4354))+(((-1.0)*sj3*x4357))+(((-1.0)*sj3*x4358))+(((-1.0)*sj3*x4342*x4344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs((cj1*r22)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*r22*sj1)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj1*r22))+IKsqr(((-1.0)*r22*sj1))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((cj1*r22), ((-1.0)*r22*sj1));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4360=IKcos(j2);
IkReal x4361=IKsin(j2);
IkReal x4362=(cj0*cj6);
IkReal x4363=((1.0)*r01);
IkReal x4364=(cj6*sj0);
IkReal x4365=((1.0)*r11);
IkReal x4366=((1.0)*sj1);
IkReal x4367=(cj0*sj6);
IkReal x4368=(sj0*sj6);
IkReal x4369=(cj3*x4361);
IkReal x4370=(cj1*x4361);
IkReal x4371=(sj1*x4360);
IkReal x4372=((1.0)*cj1*x4360);
evalcond[0]=((((-1.0)*x4361*x4366))+(((-1.0)*x4372)));
evalcond[1]=((((-1.0)*sj3*x4372))+(((-1.0)*sj3*x4361*x4366)));
evalcond[2]=((((-1.0)*x4360*x4366))+(((-1.0)*r22))+x4370);
evalcond[3]=((((-1.0)*cj3*x4372))+(((-1.0)*x4366*x4369)));
evalcond[4]=((((-0.21066117)*sj1))+(((-0.15)*r22))+(((-1.0)*pz))+(((-0.335)*x4370))+(((-0.17676784)*cj1))+(((0.335)*x4371)));
evalcond[5]=(((cj3*x4371))+((r10*x4364))+((r00*x4362))+(((-1.0)*x4365*x4368))+(((-1.0)*cj1*x4369))+(((-1.0)*x4363*x4367)));
evalcond[6]=((((-1.0)*x4362*x4363))+(((-1.0)*r10*x4368))+(((-1.0)*x4364*x4365))+(((-1.0)*sj3*x4370))+((sj3*x4371))+(((-1.0)*r00*x4367)));
evalcond[7]=((((-1.29e-6)*r01*x4367))+(((1.29e-6)*r10*x4364))+(((-0.21066117)*cj1))+(((-1.29e-6)*r11*x4368))+(((0.17676784)*sj1))+(((1.29e-6)*r00*x4362))+(((0.335)*sj1*x4361))+(((-1.0)*py*sj0))+(((0.335)*cj1*x4360))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4373=(cj6*sj3);
IkReal x4374=(sj3*sj6);
IkReal x4375=(cj3*sj6);
IkReal x4376=((1.0)*cj3*cj6);
CheckValue<IkReal> x4377 = IKatan2WithCheck(IkReal((((r10*x4374))+((r11*x4375))+((r11*x4373))+(((-1.0)*r10*x4376)))),IkReal((((r01*x4375))+((r01*x4373))+((r00*x4374))+(((-1.0)*r00*x4376)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4377.valid){
continue;
}
CheckValue<IkReal> x4378=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x4378.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4377.value)+(((-1.5707963267949)*(x4378.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x4379=IKsin(j0);
IkReal x4380=IKcos(j0);
IkReal x4381=((1.0)*r01);
IkReal x4382=(cj6*x4379);
IkReal x4383=(cj6*x4380);
IkReal x4384=(sj6*x4379);
IkReal x4385=(r11*sj6*x4380);
evalcond[0]=(((r00*x4382))+sj3+(((-1.0)*x4381*x4384))+x4385+(((-1.0)*r10*x4383)));
evalcond[1]=(((r10*sj6*x4380))+(((-1.0)*x4381*x4382))+(((-1.0)*r00*x4384))+((r11*x4383))+(((-1.0)*cj3)));
evalcond[2]=((-0.0005)+(((1.29e-6)*x4385))+(((-1.0)*px*x4379))+(((-1.29e-6)*r01*x4384))+(((-1.29e-6)*r10*x4383))+((py*x4380))+(((1.29e-6)*r00*x4382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4386=((3.59342700417906e-6)*sj0);
IkReal x4387=(r11*sj6);
IkReal x4388=(cj6*r10);
IkReal x4389=(cj0*px);
IkReal x4390=((3.01527960623405e-6)*sj0);
IkReal x4391=(py*sj0);
IkReal x4392=(cj0*cj6*r00);
IkReal x4393=(cj0*r01*sj6);
if( IKabs(((((3.01527960623405e-6)*x4393))+(((-2.78560232882098)*pz))+(((-1.0)*x4388*x4390))+(((-1.35101712947818)*r22))+((x4387*x4390))+(((-3.01527960623405e-6)*x4392))+(((2.33742605134422)*x4389))+(((2.33742605134422)*x4391)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.59342700417906e-6)*x4392))+(((-2.78560232882098)*x4389))+(((-1.13365163490195)*r22))+(((-2.78560232882098)*x4391))+(((-2.33742605134422)*pz))+(((-1.0)*x4386*x4387))+((x4386*x4388))+(((-3.59342700417906e-6)*x4393)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.01527960623405e-6)*x4393))+(((-2.78560232882098)*pz))+(((-1.0)*x4388*x4390))+(((-1.35101712947818)*r22))+((x4387*x4390))+(((-3.01527960623405e-6)*x4392))+(((2.33742605134422)*x4389))+(((2.33742605134422)*x4391))))+IKsqr(((((3.59342700417906e-6)*x4392))+(((-2.78560232882098)*x4389))+(((-1.13365163490195)*r22))+(((-2.78560232882098)*x4391))+(((-2.33742605134422)*pz))+(((-1.0)*x4386*x4387))+((x4386*x4388))+(((-3.59342700417906e-6)*x4393))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((3.01527960623405e-6)*x4393))+(((-2.78560232882098)*pz))+(((-1.0)*x4388*x4390))+(((-1.35101712947818)*r22))+((x4387*x4390))+(((-3.01527960623405e-6)*x4392))+(((2.33742605134422)*x4389))+(((2.33742605134422)*x4391))), ((((3.59342700417906e-6)*x4392))+(((-2.78560232882098)*x4389))+(((-1.13365163490195)*r22))+(((-2.78560232882098)*x4391))+(((-2.33742605134422)*pz))+(((-1.0)*x4386*x4387))+((x4386*x4388))+(((-3.59342700417906e-6)*x4393))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x4394=IKsin(j1);
IkReal x4395=IKcos(j1);
IkReal x4396=((1.29e-6)*cj0);
IkReal x4397=(cj6*r00);
IkReal x4398=(r01*sj6);
IkReal x4399=((1.29e-6)*cj3);
IkReal x4400=(cj6*sj0);
IkReal x4401=((0.335)*cj0);
IkReal x4402=((1.29e-6)*r10);
IkReal x4403=((1.0)*pz);
IkReal x4404=((0.335)*r10);
IkReal x4405=((0.15)*r22);
IkReal x4406=((0.17676784)*x4395);
IkReal x4407=(sj3*x4394);
IkReal x4408=((1.0)*cj0*px);
IkReal x4409=(r11*sj0*sj6);
IkReal x4410=((0.17676784)*x4394);
IkReal x4411=((0.21066117)*x4395);
IkReal x4412=((1.0)*py*sj0);
IkReal x4413=((0.21066117)*x4394);
evalcond[0]=((((-1.0)*x4413))+(((-1.0)*x4406))+(((-1.0)*x4403))+(((-0.485)*r22)));
evalcond[1]=((((-1.0)*x4396*x4398))+(((-1.29e-6)*x4409))+x4410+((x4400*x4402))+(((-1.0)*x4411))+(((-1.0)*x4412))+(((-1.0)*x4408))+((x4396*x4397)));
evalcond[2]=(((r00*sj6*x4401))+((sj0*sj6*x4404))+(((-1.0)*sj3*x4403))+(((-1.0)*sj3*x4406))+(((-1.0)*sj3*x4405))+(((-0.21066117)*x4407))+(((0.335)*r11*x4400))+((cj6*r01*x4401)));
evalcond[3]=((((0.335)*x4409))+(((-1.0)*x4400*x4404))+(((-1.0)*cj3*x4403))+(((-1.0)*cj3*x4405))+(((-1.0)*cj3*x4406))+(((-1.0)*cj3*x4413))+(((-1.0)*x4397*x4401))+((x4398*x4401)));
evalcond[4]=(((r10*x4399*x4400))+(((-1.0)*cj3*x4408))+(((-1.0)*cj3*x4396*x4398))+(((-1.0)*x4399*x4409))+(((-1.0)*cj3*x4412))+(((-1.0)*cj3*x4411))+((cj3*x4396*x4397))+((cj3*x4410)));
evalcond[5]=((((0.17676784)*x4407))+(((-1.0)*sj3*x4408))+(((-1.0)*sj3*x4411))+(((-1.0)*sj3*x4412))+((sj3*x4396*x4397))+(((-1.0)*sj3*x4396*x4398))+(((-1.29e-6)*sj3*x4409))+((sj3*x4400*x4402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs((cj1*r22)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*r22*sj1)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj1*r22))+IKsqr(((-1.0)*r22*sj1))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((cj1*r22), ((-1.0)*r22*sj1));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4414=IKcos(j2);
IkReal x4415=IKsin(j2);
IkReal x4416=(cj0*cj6);
IkReal x4417=((1.0)*r01);
IkReal x4418=(cj6*sj0);
IkReal x4419=((1.0)*r11);
IkReal x4420=((1.0)*sj1);
IkReal x4421=(cj0*sj6);
IkReal x4422=(sj0*sj6);
IkReal x4423=(cj3*x4415);
IkReal x4424=(cj1*x4415);
IkReal x4425=(sj1*x4414);
IkReal x4426=((1.0)*cj1*x4414);
evalcond[0]=((((-1.0)*x4426))+(((-1.0)*x4415*x4420)));
evalcond[1]=((((-1.0)*sj3*x4415*x4420))+(((-1.0)*sj3*x4426)));
evalcond[2]=((((-1.0)*x4414*x4420))+x4424+(((-1.0)*r22)));
evalcond[3]=((((-1.0)*x4420*x4423))+(((-1.0)*cj3*x4426)));
evalcond[4]=((((-0.21066117)*sj1))+(((-0.15)*r22))+(((-1.0)*pz))+(((-0.17676784)*cj1))+(((0.335)*x4425))+(((-0.335)*x4424)));
evalcond[5]=((((-1.0)*cj1*x4423))+(((-1.0)*x4417*x4421))+((r00*x4416))+((cj3*x4425))+(((-1.0)*x4419*x4422))+((r10*x4418)));
evalcond[6]=((((-1.0)*x4418*x4419))+(((-1.0)*sj3*x4424))+(((-1.0)*x4416*x4417))+(((-1.0)*r00*x4421))+((sj3*x4425))+(((-1.0)*r10*x4422)));
evalcond[7]=((((-0.21066117)*cj1))+(((0.335)*sj1*x4415))+(((0.17676784)*sj1))+(((1.29e-6)*r10*x4418))+(((0.335)*cj1*x4414))+(((-1.0)*py*sj0))+(((1.29e-6)*r00*x4416))+(((-1.0)*cj0*px))+(((-1.29e-6)*r01*x4421))+(((-1.29e-6)*r11*x4422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j4, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x4427=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x4427);
rxp1_0=(pz*r11);
rxp1_1=(r01*x4427);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4=3.14159265358979;
sj4=0;
cj4=-1.0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
IkReal x4428=cj6*cj6;
IkReal x4429=sj3*sj3;
IkReal x4430=cj3*cj3;
IkReal x4431=sj6*sj6;
j0eval[0]=r22;
j0eval[1]=(((x4429*x4431))+((x4428*x4430))+((x4430*x4431))+((x4428*x4429)));
j0eval[2]=IKsign(r22);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x4432=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x4432);
rxp1_0=(pz*r11);
rxp1_1=(r01*x4432);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4=3.14159265358979;
sj4=0;
cj4=-1.0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
IkReal x4433=(rxp1_2*sj6);
IkReal x4434=(r11*sj6);
IkReal x4435=(r01*sj6);
IkReal x4436=(cj6*r00);
IkReal x4437=((2000.0)*sj3);
IkReal x4438=((299.99964)*sj3);
IkReal x4439=((1.0)*cj6);
j0eval[0]=(x4433+(((-1.0)*rxp0_2*x4439)));
j0eval[1]=((IKabs(((((-1.0)*x4434*x4438))+x4434+((cj6*r10*x4438))+((py*x4437))+(((-1.0)*r10*x4439)))))+(IKabs((x4435+(((-1.0)*x4436))+((px*x4437))+((x4436*x4438))+(((-1.0)*x4435*x4438))))));
j0eval[2]=IKsign(((((-2000.0)*cj6*rxp0_2))+(((2000.0)*x4433))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x4440=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x4440);
rxp1_0=(pz*r11);
rxp1_1=(r01*x4440);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4=3.14159265358979;
sj4=0;
cj4=-1.0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
IkReal x4441=(rxp0_2*sj6);
IkReal x4442=(cj6*rxp1_2);
IkReal x4443=((299.99964)*cj3);
IkReal x4444=((2000.0)*cj3);
j0eval[0]=((((6.66667466667627)*x4442))+(((6.66667466667627)*x4441))+(((-1.0)*r22)));
j0eval[1]=((IKabs((((r11*sj6*x4443))+(((-1.0)*cj6*r10*x4443))+((r10*sj6))+(((-1.0)*py*x4444))+((cj6*r11)))))+(IKabs((((r00*sj6))+(((-1.0)*cj6*r00*x4443))+(((-1.0)*px*x4444))+((cj6*r01))+((r01*sj6*x4443))))));
j0eval[2]=IKsign(((((2000.0)*x4442))+(((2000.0)*x4441))+(((-299.99964)*r22))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4445=((299.99964)*cj3);
IkReal x4446=((2000.0)*cj3);
CheckValue<IkReal> x4447=IKPowWithIntegerCheck(IKsign(((((2000.0)*rxp0_2*sj6))+(((-299.99964)*r22))+(((2000.0)*cj6*rxp1_2)))),-1);
if(!x4447.valid){
continue;
}
CheckValue<IkReal> x4448 = IKatan2WithCheck(IkReal((((r11*sj6*x4445))+(((-1.0)*cj6*r10*x4445))+((r10*sj6))+(((-1.0)*py*x4446))+((cj6*r11)))),IkReal((((r00*sj6))+(((-1.0)*cj6*r00*x4445))+(((-1.0)*px*x4446))+((cj6*r01))+((r01*sj6*x4445)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4448.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4447.value)))+(x4448.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x4449=IKsin(j0);
IkReal x4450=IKcos(j0);
IkReal x4451=(r01*sj6);
IkReal x4452=(cj6*r00);
IkReal x4453=((0.14999982)*x4449);
IkReal x4454=((1.0)*x4449);
IkReal x4455=(cj6*x4450);
IkReal x4456=(r11*sj6*x4450);
evalcond[0]=((((-1.0)*r10*x4455))+sj3+x4456+((x4449*x4452))+(((-1.0)*x4451*x4454)));
evalcond[1]=((((-1.0)*cj6*r01*x4454))+((r10*sj6*x4450))+((r11*x4455))+(((-1.0)*r00*sj6*x4454))+(((-1.0)*cj3)));
evalcond[2]=((-0.0005)+(((0.14999982)*r10*x4455))+((x4451*x4453))+((py*x4450))+(((-1.0)*px*x4454))+(((-0.14999982)*x4456))+(((-1.0)*x4452*x4453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4457=((0.350613486964944)*cj6);
IkReal x4458=(r10*sj0);
IkReal x4459=((0.417839847914728)*cj0);
IkReal x4460=(r01*sj6);
IkReal x4461=(cj0*px);
IkReal x4462=(py*sj0);
IkReal x4463=(r11*sj0*sj6);
if( IKabs(((((-0.350613486964944)*x4463))+(((-2.78560232882098)*pz))+(((-0.350613486964944)*cj0*x4460))+((cj0*r00*x4457))+((x4457*x4458))+(((2.33742605134422)*x4461))+(((2.33742605134422)*x4462))+(((-0.933179872173613)*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r00*x4459))+(((0.417839847914728)*x4463))+(((-2.33742605134422)*pz))+(((-2.78560232882098)*x4461))+(((-2.78560232882098)*x4462))+(((-0.783040321743232)*r22))+(((-0.417839847914728)*cj6*x4458))+((x4459*x4460)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.350613486964944)*x4463))+(((-2.78560232882098)*pz))+(((-0.350613486964944)*cj0*x4460))+((cj0*r00*x4457))+((x4457*x4458))+(((2.33742605134422)*x4461))+(((2.33742605134422)*x4462))+(((-0.933179872173613)*r22))))+IKsqr(((((-1.0)*cj6*r00*x4459))+(((0.417839847914728)*x4463))+(((-2.33742605134422)*pz))+(((-2.78560232882098)*x4461))+(((-2.78560232882098)*x4462))+(((-0.783040321743232)*r22))+(((-0.417839847914728)*cj6*x4458))+((x4459*x4460))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-0.350613486964944)*x4463))+(((-2.78560232882098)*pz))+(((-0.350613486964944)*cj0*x4460))+((cj0*r00*x4457))+((x4457*x4458))+(((2.33742605134422)*x4461))+(((2.33742605134422)*x4462))+(((-0.933179872173613)*r22))), ((((-1.0)*cj6*r00*x4459))+(((0.417839847914728)*x4463))+(((-2.33742605134422)*pz))+(((-2.78560232882098)*x4461))+(((-2.78560232882098)*x4462))+(((-0.783040321743232)*r22))+(((-0.417839847914728)*cj6*x4458))+((x4459*x4460))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x4464=IKsin(j1);
IkReal x4465=IKcos(j1);
IkReal x4466=((0.335)*cj6);
IkReal x4467=((0.14999982)*sj3);
IkReal x4468=(cj0*r00);
IkReal x4469=((1.0)*pz);
IkReal x4470=((0.335)*sj6);
IkReal x4471=(r10*sj0);
IkReal x4472=(cj0*r01);
IkReal x4473=((1.11e-6)*r22);
IkReal x4474=((0.14999982)*cj3);
IkReal x4475=((0.17676784)*x4465);
IkReal x4476=(sj3*x4464);
IkReal x4477=(r11*sj0*sj6);
IkReal x4478=((1.0)*cj0*px);
IkReal x4479=((0.17676784)*x4464);
IkReal x4480=((0.21066117)*x4465);
IkReal x4481=((1.0)*py*sj0);
IkReal x4482=((0.21066117)*x4464);
IkReal x4483=((0.14999982)*cj6*x4471);
evalcond[0]=((((-1.0)*x4475))+(((-0.33500111)*r22))+(((-1.0)*x4469))+(((-1.0)*x4482)));
evalcond[1]=((((-1.0)*x4478))+(((0.14999982)*sj6*x4472))+x4479+(((0.14999982)*x4477))+(((-0.14999982)*cj6*x4468))+(((-1.0)*x4483))+(((-1.0)*x4481))+(((-1.0)*x4480)));
evalcond[2]=(((x4470*x4471))+(((-1.0)*sj3*x4475))+(((-1.0)*sj3*x4473))+(((-1.0)*sj3*x4469))+((r11*sj0*x4466))+(((-0.21066117)*x4476))+((x4468*x4470))+((x4466*x4472)));
evalcond[3]=((((-1.0)*cj3*x4473))+(((-1.0)*cj3*x4475))+((x4470*x4472))+(((-1.0)*cj3*x4482))+((r11*sj0*x4470))+(((-1.0)*x4466*x4468))+(((-1.0)*cj3*x4469))+(((-1.0)*x4466*x4471)));
evalcond[4]=((((-1.0)*cj3*x4478))+(((-1.0)*cj3*x4480))+(((-1.0)*cj3*x4481))+(((-1.0)*cj6*x4468*x4474))+((cj3*x4479))+((sj6*x4472*x4474))+((x4474*x4477))+(((-1.0)*cj6*x4471*x4474)));
evalcond[5]=((((-1.0)*cj6*x4467*x4468))+(((-1.0)*sj3*x4478))+(((-1.0)*sj3*x4480))+(((-1.0)*sj3*x4481))+((sj6*x4467*x4472))+((x4467*x4477))+(((0.17676784)*x4476))+(((-1.0)*cj6*x4467*x4471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs((cj1*r22)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*r22*sj1)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj1*r22))+IKsqr(((-1.0)*r22*sj1))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((cj1*r22), ((-1.0)*r22*sj1));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4484=IKcos(j2);
IkReal x4485=IKsin(j2);
IkReal x4486=((0.14999982)*sj0);
IkReal x4487=(cj6*r10);
IkReal x4488=((1.0)*cj6);
IkReal x4489=(cj0*r01);
IkReal x4490=(r11*sj6);
IkReal x4491=((1.0)*sj1);
IkReal x4492=(cj0*r00);
IkReal x4493=((1.0)*sj0);
IkReal x4494=((1.0)*sj6);
IkReal x4495=(cj3*x4485);
IkReal x4496=(cj1*x4485);
IkReal x4497=(sj1*x4484);
IkReal x4498=((1.0)*cj1*x4484);
evalcond[0]=((((-1.0)*x4485*x4491))+(((-1.0)*x4498)));
evalcond[1]=((((-1.0)*sj3*x4498))+(((-1.0)*sj3*x4485*x4491)));
evalcond[2]=((((-1.0)*x4484*x4491))+x4496+(((-1.0)*r22)));
evalcond[3]=((((-1.0)*cj3*x4498))+(((-1.0)*x4491*x4495)));
evalcond[4]=((((-0.21066117)*sj1))+(((-0.335)*x4496))+(((-1.0)*pz))+(((-1.11e-6)*r22))+(((-0.17676784)*cj1))+(((0.335)*x4497)));
evalcond[5]=((((-1.0)*x4489*x4494))+((sj0*x4487))+((cj3*x4497))+((cj6*x4492))+(((-1.0)*x4490*x4493))+(((-1.0)*cj1*x4495)));
evalcond[6]=((((-1.0)*x4492*x4494))+(((-1.0)*r10*sj6*x4493))+(((-1.0)*x4488*x4489))+(((-1.0)*r11*sj0*x4488))+(((-1.0)*sj3*x4496))+((sj3*x4497)));
evalcond[7]=((((-1.0)*x4486*x4487))+(((0.335)*cj1*x4484))+(((-0.21066117)*cj1))+(((0.335)*sj1*x4485))+(((0.17676784)*sj1))+(((-0.14999982)*cj6*x4492))+((x4486*x4490))+(((-1.0)*py*x4493))+(((0.14999982)*sj6*x4489))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4499=(r11*sj6);
IkReal x4500=(r01*sj6);
IkReal x4501=(cj6*r00);
IkReal x4502=((2000.0)*sj3);
IkReal x4503=((299.99964)*sj3);
IkReal x4504=(cj6*r10);
CheckValue<IkReal> x4505 = IKatan2WithCheck(IkReal((x4499+((x4503*x4504))+((py*x4502))+(((-1.0)*x4504))+(((-1.0)*x4499*x4503)))),IkReal((x4500+((x4501*x4503))+(((-1.0)*x4500*x4503))+((px*x4502))+(((-1.0)*x4501)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4505.valid){
continue;
}
CheckValue<IkReal> x4506=IKPowWithIntegerCheck(IKsign(((((-2000.0)*cj6*rxp0_2))+(((2000.0)*rxp1_2*sj6)))),-1);
if(!x4506.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4505.value)+(((1.5707963267949)*(x4506.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x4507=IKsin(j0);
IkReal x4508=IKcos(j0);
IkReal x4509=(r01*sj6);
IkReal x4510=(cj6*r00);
IkReal x4511=((0.14999982)*x4507);
IkReal x4512=((1.0)*x4507);
IkReal x4513=(cj6*x4508);
IkReal x4514=(r11*sj6*x4508);
evalcond[0]=(sj3+x4514+(((-1.0)*r10*x4513))+((x4507*x4510))+(((-1.0)*x4509*x4512)));
evalcond[1]=((((-1.0)*r00*sj6*x4512))+((r10*sj6*x4508))+((r11*x4513))+(((-1.0)*cj6*r01*x4512))+(((-1.0)*cj3)));
evalcond[2]=((-0.0005)+(((-0.14999982)*x4514))+(((0.14999982)*r10*x4513))+((py*x4508))+(((-1.0)*px*x4512))+(((-1.0)*x4510*x4511))+((x4509*x4511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4515=((0.350613486964944)*cj6);
IkReal x4516=(r10*sj0);
IkReal x4517=((0.417839847914728)*cj0);
IkReal x4518=(r01*sj6);
IkReal x4519=(cj0*px);
IkReal x4520=(py*sj0);
IkReal x4521=(r11*sj0*sj6);
if( IKabs(((((2.33742605134422)*x4520))+(((-2.78560232882098)*pz))+(((-0.350613486964944)*cj0*x4518))+(((-0.350613486964944)*x4521))+((cj0*r00*x4515))+(((2.33742605134422)*x4519))+(((-0.933179872173613)*r22))+((x4515*x4516)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x4517*x4518))+(((0.417839847914728)*x4521))+(((-2.78560232882098)*x4519))+(((-0.417839847914728)*cj6*x4516))+(((-2.33742605134422)*pz))+(((-0.783040321743232)*r22))+(((-2.78560232882098)*x4520))+(((-1.0)*cj6*r00*x4517)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.33742605134422)*x4520))+(((-2.78560232882098)*pz))+(((-0.350613486964944)*cj0*x4518))+(((-0.350613486964944)*x4521))+((cj0*r00*x4515))+(((2.33742605134422)*x4519))+(((-0.933179872173613)*r22))+((x4515*x4516))))+IKsqr((((x4517*x4518))+(((0.417839847914728)*x4521))+(((-2.78560232882098)*x4519))+(((-0.417839847914728)*cj6*x4516))+(((-2.33742605134422)*pz))+(((-0.783040321743232)*r22))+(((-2.78560232882098)*x4520))+(((-1.0)*cj6*r00*x4517))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.33742605134422)*x4520))+(((-2.78560232882098)*pz))+(((-0.350613486964944)*cj0*x4518))+(((-0.350613486964944)*x4521))+((cj0*r00*x4515))+(((2.33742605134422)*x4519))+(((-0.933179872173613)*r22))+((x4515*x4516))), (((x4517*x4518))+(((0.417839847914728)*x4521))+(((-2.78560232882098)*x4519))+(((-0.417839847914728)*cj6*x4516))+(((-2.33742605134422)*pz))+(((-0.783040321743232)*r22))+(((-2.78560232882098)*x4520))+(((-1.0)*cj6*r00*x4517))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x4522=IKsin(j1);
IkReal x4523=IKcos(j1);
IkReal x4524=((0.335)*cj6);
IkReal x4525=((0.14999982)*sj3);
IkReal x4526=(cj0*r00);
IkReal x4527=((1.0)*pz);
IkReal x4528=((0.335)*sj6);
IkReal x4529=(r10*sj0);
IkReal x4530=(cj0*r01);
IkReal x4531=((1.11e-6)*r22);
IkReal x4532=((0.14999982)*cj3);
IkReal x4533=((0.17676784)*x4523);
IkReal x4534=(sj3*x4522);
IkReal x4535=(r11*sj0*sj6);
IkReal x4536=((1.0)*cj0*px);
IkReal x4537=((0.17676784)*x4522);
IkReal x4538=((0.21066117)*x4523);
IkReal x4539=((1.0)*py*sj0);
IkReal x4540=((0.21066117)*x4522);
IkReal x4541=((0.14999982)*cj6*x4529);
evalcond[0]=((((-0.33500111)*r22))+(((-1.0)*x4527))+(((-1.0)*x4533))+(((-1.0)*x4540)));
evalcond[1]=((((-1.0)*x4536))+(((-1.0)*x4539))+(((-1.0)*x4538))+x4537+(((0.14999982)*sj6*x4530))+(((-0.14999982)*cj6*x4526))+(((0.14999982)*x4535))+(((-1.0)*x4541)));
evalcond[2]=(((x4526*x4528))+(((-1.0)*sj3*x4531))+(((-1.0)*sj3*x4533))+((x4528*x4529))+(((-1.0)*sj3*x4527))+((x4524*x4530))+((r11*sj0*x4524))+(((-0.21066117)*x4534)));
evalcond[3]=((((-1.0)*cj3*x4531))+(((-1.0)*cj3*x4533))+((x4528*x4530))+(((-1.0)*cj3*x4527))+(((-1.0)*cj3*x4540))+(((-1.0)*x4524*x4529))+(((-1.0)*x4524*x4526))+((r11*sj0*x4528)));
evalcond[4]=((((-1.0)*cj3*x4538))+(((-1.0)*cj3*x4539))+(((-1.0)*cj3*x4536))+(((-1.0)*cj6*x4526*x4532))+(((-1.0)*cj6*x4529*x4532))+((cj3*x4537))+((sj6*x4530*x4532))+((x4532*x4535)));
evalcond[5]=(((x4525*x4535))+((sj6*x4525*x4530))+(((-1.0)*sj3*x4539))+(((-1.0)*sj3*x4538))+(((-1.0)*sj3*x4536))+(((-1.0)*cj6*x4525*x4529))+(((-1.0)*cj6*x4525*x4526))+(((0.17676784)*x4534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs((cj1*r22)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*r22*sj1)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj1*r22))+IKsqr(((-1.0)*r22*sj1))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((cj1*r22), ((-1.0)*r22*sj1));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4542=IKcos(j2);
IkReal x4543=IKsin(j2);
IkReal x4544=((0.14999982)*sj0);
IkReal x4545=(cj6*r10);
IkReal x4546=((1.0)*cj6);
IkReal x4547=(cj0*r01);
IkReal x4548=(r11*sj6);
IkReal x4549=((1.0)*sj1);
IkReal x4550=(cj0*r00);
IkReal x4551=((1.0)*sj0);
IkReal x4552=((1.0)*sj6);
IkReal x4553=(cj3*x4543);
IkReal x4554=(cj1*x4543);
IkReal x4555=(sj1*x4542);
IkReal x4556=((1.0)*cj1*x4542);
evalcond[0]=((((-1.0)*x4556))+(((-1.0)*x4543*x4549)));
evalcond[1]=((((-1.0)*sj3*x4543*x4549))+(((-1.0)*sj3*x4556)));
evalcond[2]=(x4554+(((-1.0)*x4542*x4549))+(((-1.0)*r22)));
evalcond[3]=((((-1.0)*cj3*x4556))+(((-1.0)*x4549*x4553)));
evalcond[4]=((((-0.21066117)*sj1))+(((-1.0)*pz))+(((-1.11e-6)*r22))+(((-0.17676784)*cj1))+(((-0.335)*x4554))+(((0.335)*x4555)));
evalcond[5]=((((-1.0)*cj1*x4553))+(((-1.0)*x4547*x4552))+(((-1.0)*x4548*x4551))+((cj3*x4555))+((sj0*x4545))+((cj6*x4550)));
evalcond[6]=((((-1.0)*x4546*x4547))+(((-1.0)*r11*sj0*x4546))+((sj3*x4555))+(((-1.0)*r10*sj6*x4551))+(((-1.0)*x4550*x4552))+(((-1.0)*sj3*x4554)));
evalcond[7]=((((-0.21066117)*cj1))+(((0.17676784)*sj1))+(((0.14999982)*sj6*x4547))+((x4544*x4548))+(((-1.0)*x4544*x4545))+(((0.335)*cj1*x4542))+(((0.335)*sj1*x4543))+(((-0.14999982)*cj6*x4550))+(((-1.0)*cj0*px))+(((-1.0)*py*x4551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4557=(cj6*sj3);
IkReal x4558=(sj3*sj6);
IkReal x4559=(cj3*sj6);
IkReal x4560=((1.0)*cj3*cj6);
CheckValue<IkReal> x4561=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x4561.valid){
continue;
}
CheckValue<IkReal> x4562 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x4560))+((r10*x4558))+((r11*x4559))+((r11*x4557)))),IkReal((((r01*x4557))+((r01*x4559))+((r00*x4558))+(((-1.0)*r00*x4560)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4562.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x4561.value)))+(x4562.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x4563=IKsin(j0);
IkReal x4564=IKcos(j0);
IkReal x4565=(r01*sj6);
IkReal x4566=(cj6*r00);
IkReal x4567=((0.14999982)*x4563);
IkReal x4568=((1.0)*x4563);
IkReal x4569=(cj6*x4564);
IkReal x4570=(r11*sj6*x4564);
evalcond[0]=((((-1.0)*r10*x4569))+sj3+x4570+((x4563*x4566))+(((-1.0)*x4565*x4568)));
evalcond[1]=(((r10*sj6*x4564))+((r11*x4569))+(((-1.0)*cj6*r01*x4568))+(((-1.0)*r00*sj6*x4568))+(((-1.0)*cj3)));
evalcond[2]=((-0.0005)+(((-1.0)*x4566*x4567))+((x4565*x4567))+(((0.14999982)*r10*x4569))+(((-0.14999982)*x4570))+(((-1.0)*px*x4568))+((py*x4564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4571=((0.350613486964944)*cj6);
IkReal x4572=(r10*sj0);
IkReal x4573=((0.417839847914728)*cj0);
IkReal x4574=(r01*sj6);
IkReal x4575=(cj0*px);
IkReal x4576=(py*sj0);
IkReal x4577=(r11*sj0*sj6);
if( IKabs((((cj0*r00*x4571))+(((-2.78560232882098)*pz))+((x4571*x4572))+(((2.33742605134422)*x4576))+(((2.33742605134422)*x4575))+(((-0.350613486964944)*cj0*x4574))+(((-0.350613486964944)*x4577))+(((-0.933179872173613)*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.33742605134422)*pz))+(((-0.783040321743232)*r22))+(((-1.0)*cj6*r00*x4573))+(((0.417839847914728)*x4577))+((x4573*x4574))+(((-2.78560232882098)*x4576))+(((-2.78560232882098)*x4575))+(((-0.417839847914728)*cj6*x4572)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj0*r00*x4571))+(((-2.78560232882098)*pz))+((x4571*x4572))+(((2.33742605134422)*x4576))+(((2.33742605134422)*x4575))+(((-0.350613486964944)*cj0*x4574))+(((-0.350613486964944)*x4577))+(((-0.933179872173613)*r22))))+IKsqr(((((-2.33742605134422)*pz))+(((-0.783040321743232)*r22))+(((-1.0)*cj6*r00*x4573))+(((0.417839847914728)*x4577))+((x4573*x4574))+(((-2.78560232882098)*x4576))+(((-2.78560232882098)*x4575))+(((-0.417839847914728)*cj6*x4572))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((cj0*r00*x4571))+(((-2.78560232882098)*pz))+((x4571*x4572))+(((2.33742605134422)*x4576))+(((2.33742605134422)*x4575))+(((-0.350613486964944)*cj0*x4574))+(((-0.350613486964944)*x4577))+(((-0.933179872173613)*r22))), ((((-2.33742605134422)*pz))+(((-0.783040321743232)*r22))+(((-1.0)*cj6*r00*x4573))+(((0.417839847914728)*x4577))+((x4573*x4574))+(((-2.78560232882098)*x4576))+(((-2.78560232882098)*x4575))+(((-0.417839847914728)*cj6*x4572))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x4578=IKsin(j1);
IkReal x4579=IKcos(j1);
IkReal x4580=((0.335)*cj6);
IkReal x4581=((0.14999982)*sj3);
IkReal x4582=(cj0*r00);
IkReal x4583=((1.0)*pz);
IkReal x4584=((0.335)*sj6);
IkReal x4585=(r10*sj0);
IkReal x4586=(cj0*r01);
IkReal x4587=((1.11e-6)*r22);
IkReal x4588=((0.14999982)*cj3);
IkReal x4589=((0.17676784)*x4579);
IkReal x4590=(sj3*x4578);
IkReal x4591=(r11*sj0*sj6);
IkReal x4592=((1.0)*cj0*px);
IkReal x4593=((0.17676784)*x4578);
IkReal x4594=((0.21066117)*x4579);
IkReal x4595=((1.0)*py*sj0);
IkReal x4596=((0.21066117)*x4578);
IkReal x4597=((0.14999982)*cj6*x4585);
evalcond[0]=((((-1.0)*x4589))+(((-1.0)*x4583))+(((-1.0)*x4596))+(((-0.33500111)*r22)));
evalcond[1]=((((-1.0)*x4594))+(((-1.0)*x4597))+(((-1.0)*x4592))+(((-1.0)*x4595))+x4593+(((-0.14999982)*cj6*x4582))+(((0.14999982)*sj6*x4586))+(((0.14999982)*x4591)));
evalcond[2]=(((r11*sj0*x4580))+((x4582*x4584))+((x4584*x4585))+(((-1.0)*sj3*x4583))+(((-1.0)*sj3*x4587))+(((-1.0)*sj3*x4589))+(((-0.21066117)*x4590))+((x4580*x4586)));
evalcond[3]=(((r11*sj0*x4584))+(((-1.0)*x4580*x4582))+(((-1.0)*x4580*x4585))+((x4584*x4586))+(((-1.0)*cj3*x4596))+(((-1.0)*cj3*x4589))+(((-1.0)*cj3*x4583))+(((-1.0)*cj3*x4587)));
evalcond[4]=((((-1.0)*cj6*x4585*x4588))+((sj6*x4586*x4588))+(((-1.0)*cj6*x4582*x4588))+(((-1.0)*cj3*x4595))+(((-1.0)*cj3*x4592))+(((-1.0)*cj3*x4594))+((cj3*x4593))+((x4588*x4591)));
evalcond[5]=(((x4581*x4591))+(((-1.0)*cj6*x4581*x4585))+(((-1.0)*cj6*x4581*x4582))+(((-1.0)*sj3*x4592))+(((-1.0)*sj3*x4594))+(((-1.0)*sj3*x4595))+((sj6*x4581*x4586))+(((0.17676784)*x4590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs((cj1*r22)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*r22*sj1)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj1*r22))+IKsqr(((-1.0)*r22*sj1))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((cj1*r22), ((-1.0)*r22*sj1));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4598=IKcos(j2);
IkReal x4599=IKsin(j2);
IkReal x4600=((0.14999982)*sj0);
IkReal x4601=(cj6*r10);
IkReal x4602=((1.0)*cj6);
IkReal x4603=(cj0*r01);
IkReal x4604=(r11*sj6);
IkReal x4605=((1.0)*sj1);
IkReal x4606=(cj0*r00);
IkReal x4607=((1.0)*sj0);
IkReal x4608=((1.0)*sj6);
IkReal x4609=(cj3*x4599);
IkReal x4610=(cj1*x4599);
IkReal x4611=(sj1*x4598);
IkReal x4612=((1.0)*cj1*x4598);
evalcond[0]=((((-1.0)*x4599*x4605))+(((-1.0)*x4612)));
evalcond[1]=((((-1.0)*sj3*x4612))+(((-1.0)*sj3*x4599*x4605)));
evalcond[2]=(x4610+(((-1.0)*r22))+(((-1.0)*x4598*x4605)));
evalcond[3]=((((-1.0)*cj3*x4612))+(((-1.0)*x4605*x4609)));
evalcond[4]=((((-0.21066117)*sj1))+(((-0.335)*x4610))+(((-1.0)*pz))+(((-1.11e-6)*r22))+(((-0.17676784)*cj1))+(((0.335)*x4611)));
evalcond[5]=((((-1.0)*x4603*x4608))+(((-1.0)*cj1*x4609))+((cj3*x4611))+((sj0*x4601))+((cj6*x4606))+(((-1.0)*x4604*x4607)));
evalcond[6]=(((sj3*x4611))+(((-1.0)*r10*sj6*x4607))+(((-1.0)*x4606*x4608))+(((-1.0)*sj3*x4610))+(((-1.0)*x4602*x4603))+(((-1.0)*r11*sj0*x4602)));
evalcond[7]=((((-0.21066117)*cj1))+(((0.335)*cj1*x4598))+(((-1.0)*x4600*x4601))+(((0.17676784)*sj1))+(((0.335)*sj1*x4599))+((x4600*x4604))+(((-0.14999982)*cj6*x4606))+(((0.14999982)*sj6*x4603))+(((-1.0)*py*x4607))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j4, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x4613=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x4613);
rxp1_0=(pz*r11);
rxp1_1=(r01*x4613);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4=3.14159265358979;
sj4=0;
cj4=-1.0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
IkReal x4614=cj6*cj6;
IkReal x4615=sj3*sj3;
IkReal x4616=cj3*cj3;
IkReal x4617=sj6*sj6;
j0eval[0]=r22;
j0eval[1]=(((x4615*x4617))+((x4614*x4615))+((x4614*x4616))+((x4616*x4617)));
j0eval[2]=IKsign(r22);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x4618=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x4618);
rxp1_0=(pz*r11);
rxp1_1=(r01*x4618);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4=3.14159265358979;
sj4=0;
cj4=-1.0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
IkReal x4619=(rxp1_2*sj6);
IkReal x4620=(cj6*r00);
IkReal x4621=(cj6*rxp0_2);
IkReal x4622=(cj6*r10);
IkReal x4623=((300.00036)*sj3);
IkReal x4624=((2000.0)*sj3);
IkReal x4625=((1.0)*sj6);
IkReal x4626=(sj6*x4623);
j0eval[0]=((((-1.0)*x4619))+x4621);
j0eval[1]=IKsign(((((-2000.0)*x4619))+(((2000.0)*x4621))));
j0eval[2]=((IKabs((((py*x4624))+((r11*x4626))+x4622+(((-1.0)*r11*x4625))+(((-1.0)*x4622*x4623)))))+(IKabs((((px*x4624))+(((-1.0)*r01*x4625))+x4620+(((-1.0)*x4620*x4623))+((r01*x4626))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x4627=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x4627);
rxp1_0=(pz*r11);
rxp1_1=(r01*x4627);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4=3.14159265358979;
sj4=0;
cj4=-1.0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
IkReal x4628=((300.00036)*cj3);
IkReal x4629=(cj6*rxp1_2);
IkReal x4630=((2000.0)*cj3);
IkReal x4631=(rxp0_2*sj6);
j0eval[0]=((((6.66665866667627)*x4631))+r22+(((6.66665866667627)*x4629)));
j0eval[1]=((IKabs((((r00*sj6))+((cj6*r00*x4628))+(((-1.0)*r01*sj6*x4628))+(((-1.0)*px*x4630))+((cj6*r01)))))+(IKabs(((((-1.0)*r11*sj6*x4628))+((r10*sj6))+((cj6*r11))+((cj6*r10*x4628))+(((-1.0)*py*x4630))))));
j0eval[2]=IKsign(((((300.00036)*r22))+(((2000.0)*x4631))+(((2000.0)*x4629))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4632=((300.00036)*cj3);
IkReal x4633=((2000.0)*cj3);
CheckValue<IkReal> x4634 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6*x4632))+((r10*sj6))+((cj6*r10*x4632))+((cj6*r11))+(((-1.0)*py*x4633)))),IkReal((((r00*sj6))+((cj6*r00*x4632))+(((-1.0)*px*x4633))+((cj6*r01))+(((-1.0)*r01*sj6*x4632)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4634.valid){
continue;
}
CheckValue<IkReal> x4635=IKPowWithIntegerCheck(IKsign(((((300.00036)*r22))+(((2000.0)*rxp0_2*sj6))+(((2000.0)*cj6*rxp1_2)))),-1);
if(!x4635.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4634.value)+(((1.5707963267949)*(x4635.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x4636=IKcos(j0);
IkReal x4637=IKsin(j0);
IkReal x4638=((0.15000018)*sj6);
IkReal x4639=((1.0)*sj6);
IkReal x4640=(r11*x4636);
IkReal x4641=(r01*x4637);
IkReal x4642=(r00*x4637);
IkReal x4643=((1.0)*cj6*x4637);
IkReal x4644=(cj6*r10*x4636);
evalcond[0]=(sj3+(((-1.0)*cj6*x4642))+x4644+((sj6*x4641))+(((-1.0)*x4639*x4640)));
evalcond[1]=(((r10*sj6*x4636))+(((-1.0)*cj6*x4641))+((cj6*x4640))+(((-1.0)*cj3))+(((-1.0)*x4639*x4642)));
evalcond[2]=((-0.0005)+(((-0.15000018)*x4644))+(((0.15000018)*cj6*x4642))+((py*x4636))+((x4638*x4640))+(((-1.0)*px*x4637))+(((-1.0)*x4638*x4641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4645=(cj0*px);
IkReal x4646=(py*sj0);
IkReal x4647=(cj0*cj6*r00);
IkReal x4648=(r11*sj0*sj6);
IkReal x4649=(cj6*r10*sj0);
IkReal x4650=(cj0*r01*sj6);
if( IKabs(((((-0.350614328438323)*x4649))+(((-0.350614328438323)*x4647))+(((-2.78560232882098)*pz))+(((0.350614328438323)*x4650))+(((2.33742605134422)*x4646))+(((2.33742605134422)*x4645))+(((0.933179872173613)*r22))+(((0.350614328438323)*x4648)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.78560232882098)*x4646))+(((-2.78560232882098)*x4645))+(((0.783040321743232)*r22))+(((-2.33742605134422)*pz))+(((0.417840850731566)*x4649))+(((0.417840850731566)*x4647))+(((-0.417840850731566)*x4648))+(((-0.417840850731566)*x4650)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.350614328438323)*x4649))+(((-0.350614328438323)*x4647))+(((-2.78560232882098)*pz))+(((0.350614328438323)*x4650))+(((2.33742605134422)*x4646))+(((2.33742605134422)*x4645))+(((0.933179872173613)*r22))+(((0.350614328438323)*x4648))))+IKsqr(((((-2.78560232882098)*x4646))+(((-2.78560232882098)*x4645))+(((0.783040321743232)*r22))+(((-2.33742605134422)*pz))+(((0.417840850731566)*x4649))+(((0.417840850731566)*x4647))+(((-0.417840850731566)*x4648))+(((-0.417840850731566)*x4650))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-0.350614328438323)*x4649))+(((-0.350614328438323)*x4647))+(((-2.78560232882098)*pz))+(((0.350614328438323)*x4650))+(((2.33742605134422)*x4646))+(((2.33742605134422)*x4645))+(((0.933179872173613)*r22))+(((0.350614328438323)*x4648))), ((((-2.78560232882098)*x4646))+(((-2.78560232882098)*x4645))+(((0.783040321743232)*r22))+(((-2.33742605134422)*pz))+(((0.417840850731566)*x4649))+(((0.417840850731566)*x4647))+(((-0.417840850731566)*x4648))+(((-0.417840850731566)*x4650))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x4651=IKsin(j1);
IkReal x4652=IKcos(j1);
IkReal x4653=((1.11e-6)*r22);
IkReal x4654=((0.15000018)*cj6);
IkReal x4655=(cj0*r00);
IkReal x4656=(r10*sj0);
IkReal x4657=((0.335)*cj6);
IkReal x4658=((1.0)*pz);
IkReal x4659=((0.335)*sj6);
IkReal x4660=((0.15000018)*sj3);
IkReal x4661=((0.15000018)*cj3);
IkReal x4662=((0.17676784)*x4652);
IkReal x4663=(sj3*x4651);
IkReal x4664=((1.0)*cj0*px);
IkReal x4665=((0.335)*r11*sj0);
IkReal x4666=((0.17676784)*x4651);
IkReal x4667=(cj0*r01*sj6);
IkReal x4668=((0.21066117)*x4652);
IkReal x4669=((1.0)*py*sj0);
IkReal x4670=(r11*sj0*sj6);
IkReal x4671=((0.21066117)*x4651);
evalcond[0]=((((-1.0)*x4658))+(((0.33500111)*r22))+(((-1.0)*x4671))+(((-1.0)*x4662)));
evalcond[1]=((((-0.15000018)*x4670))+x4666+((x4654*x4655))+((x4654*x4656))+(((-1.0)*x4669))+(((-1.0)*x4668))+(((-1.0)*x4664))+(((-0.15000018)*x4667)));
evalcond[2]=((((-1.0)*sj3*x4662))+((sj3*x4653))+(((-1.0)*sj3*x4658))+((r11*sj0*x4657))+((x4656*x4659))+((cj0*r01*x4657))+((x4655*x4659))+(((-0.21066117)*x4663)));
evalcond[3]=(((cj3*x4653))+(((-1.0)*cj0*r01*x4659))+(((-1.0)*r11*sj0*x4659))+(((-1.0)*cj3*x4658))+(((-1.0)*cj3*x4671))+((x4656*x4657))+(((-1.0)*cj3*x4662))+((x4655*x4657)));
evalcond[4]=((((-1.0)*x4661*x4667))+(((-1.0)*x4661*x4670))+((cj3*x4654*x4655))+((cj3*x4654*x4656))+((cj3*x4666))+(((-1.0)*cj3*x4664))+(((-1.0)*cj3*x4668))+(((-1.0)*cj3*x4669)));
evalcond[5]=((((-1.0)*sj3*x4664))+(((-1.0)*sj3*x4669))+(((-1.0)*sj3*x4668))+(((-1.0)*x4660*x4670))+(((-1.0)*x4660*x4667))+((sj3*x4654*x4655))+((sj3*x4654*x4656))+(((0.17676784)*x4663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((-1.0)*cj1*r22)) < IKFAST_ATAN2_MAGTHRESH && IKabs((r22*sj1)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj1*r22))+IKsqr((r22*sj1))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*cj1*r22), (r22*sj1));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4672=IKsin(j2);
IkReal x4673=IKcos(j2);
IkReal x4674=((1.0)*cj6);
IkReal x4675=(cj0*r01);
IkReal x4676=(r11*sj0);
IkReal x4677=((1.0)*sj1);
IkReal x4678=((0.15000018)*cj6);
IkReal x4679=(cj0*r00);
IkReal x4680=(r10*sj0);
IkReal x4681=((0.15000018)*sj6);
IkReal x4682=((1.0)*sj6);
IkReal x4683=(cj3*x4672);
IkReal x4684=(cj1*x4672);
IkReal x4685=(sj1*x4673);
IkReal x4686=((1.0)*cj1*x4673);
evalcond[0]=(x4684+r22+(((-1.0)*x4673*x4677)));
evalcond[1]=((((-1.0)*x4672*x4677))+(((-1.0)*x4686)));
evalcond[2]=((((-1.0)*sj3*x4672*x4677))+(((-1.0)*sj3*x4686)));
evalcond[3]=((((-1.0)*cj3*x4686))+(((-1.0)*x4677*x4683)));
evalcond[4]=((((-0.21066117)*sj1))+(((-0.335)*x4684))+(((-1.0)*pz))+(((0.335)*x4685))+(((-0.17676784)*cj1))+(((1.11e-6)*r22)));
evalcond[5]=((((-1.0)*cj1*x4683))+(((-1.0)*x4674*x4679))+((cj3*x4685))+((sj6*x4676))+((sj6*x4675))+(((-1.0)*x4674*x4680)));
evalcond[6]=((((-1.0)*x4679*x4682))+((sj3*x4685))+(((-1.0)*x4674*x4675))+(((-1.0)*x4674*x4676))+(((-1.0)*x4680*x4682))+(((-1.0)*sj3*x4684)));
evalcond[7]=((((-0.21066117)*cj1))+(((0.335)*sj1*x4672))+(((0.17676784)*sj1))+((x4678*x4680))+(((-1.0)*x4676*x4681))+(((0.335)*cj1*x4673))+(((-1.0)*x4675*x4681))+((x4678*x4679))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4687=(cj6*r00);
IkReal x4688=(cj6*r10);
IkReal x4689=((300.00036)*sj3);
IkReal x4690=((2000.0)*sj3);
IkReal x4691=((1.0)*sj6);
IkReal x4692=(sj6*x4689);
CheckValue<IkReal> x4693 = IKatan2WithCheck(IkReal((x4688+(((-1.0)*x4688*x4689))+((py*x4690))+((r11*x4692))+(((-1.0)*r11*x4691)))),IkReal(((((-1.0)*x4687*x4689))+(((-1.0)*r01*x4691))+x4687+((r01*x4692))+((px*x4690)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4693.valid){
continue;
}
CheckValue<IkReal> x4694=IKPowWithIntegerCheck(IKsign(((((-2000.0)*rxp1_2*sj6))+(((2000.0)*cj6*rxp0_2)))),-1);
if(!x4694.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4693.value)+(((1.5707963267949)*(x4694.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x4695=IKcos(j0);
IkReal x4696=IKsin(j0);
IkReal x4697=((0.15000018)*sj6);
IkReal x4698=((1.0)*sj6);
IkReal x4699=(r11*x4695);
IkReal x4700=(r01*x4696);
IkReal x4701=(r00*x4696);
IkReal x4702=((1.0)*cj6*x4696);
IkReal x4703=(cj6*r10*x4695);
evalcond[0]=(((sj6*x4700))+(((-1.0)*x4698*x4699))+sj3+x4703+(((-1.0)*cj6*x4701)));
evalcond[1]=(((cj6*x4699))+((r10*sj6*x4695))+(((-1.0)*cj6*x4700))+(((-1.0)*x4698*x4701))+(((-1.0)*cj3)));
evalcond[2]=((-0.0005)+((x4697*x4699))+(((-1.0)*px*x4696))+(((-1.0)*x4697*x4700))+((py*x4695))+(((-0.15000018)*x4703))+(((0.15000018)*cj6*x4701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4704=(cj0*px);
IkReal x4705=(py*sj0);
IkReal x4706=(cj0*cj6*r00);
IkReal x4707=(r11*sj0*sj6);
IkReal x4708=(cj6*r10*sj0);
IkReal x4709=(cj0*r01*sj6);
if( IKabs(((((0.350614328438323)*x4709))+(((0.350614328438323)*x4707))+(((-0.350614328438323)*x4706))+(((-0.350614328438323)*x4708))+(((-2.78560232882098)*pz))+(((2.33742605134422)*x4705))+(((2.33742605134422)*x4704))+(((0.933179872173613)*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.783040321743232)*r22))+(((-2.33742605134422)*pz))+(((-2.78560232882098)*x4705))+(((-2.78560232882098)*x4704))+(((0.417840850731566)*x4708))+(((0.417840850731566)*x4706))+(((-0.417840850731566)*x4709))+(((-0.417840850731566)*x4707)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.350614328438323)*x4709))+(((0.350614328438323)*x4707))+(((-0.350614328438323)*x4706))+(((-0.350614328438323)*x4708))+(((-2.78560232882098)*pz))+(((2.33742605134422)*x4705))+(((2.33742605134422)*x4704))+(((0.933179872173613)*r22))))+IKsqr(((((0.783040321743232)*r22))+(((-2.33742605134422)*pz))+(((-2.78560232882098)*x4705))+(((-2.78560232882098)*x4704))+(((0.417840850731566)*x4708))+(((0.417840850731566)*x4706))+(((-0.417840850731566)*x4709))+(((-0.417840850731566)*x4707))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((0.350614328438323)*x4709))+(((0.350614328438323)*x4707))+(((-0.350614328438323)*x4706))+(((-0.350614328438323)*x4708))+(((-2.78560232882098)*pz))+(((2.33742605134422)*x4705))+(((2.33742605134422)*x4704))+(((0.933179872173613)*r22))), ((((0.783040321743232)*r22))+(((-2.33742605134422)*pz))+(((-2.78560232882098)*x4705))+(((-2.78560232882098)*x4704))+(((0.417840850731566)*x4708))+(((0.417840850731566)*x4706))+(((-0.417840850731566)*x4709))+(((-0.417840850731566)*x4707))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x4710=IKsin(j1);
IkReal x4711=IKcos(j1);
IkReal x4712=((1.11e-6)*r22);
IkReal x4713=((0.15000018)*cj6);
IkReal x4714=(cj0*r00);
IkReal x4715=(r10*sj0);
IkReal x4716=((0.335)*cj6);
IkReal x4717=((1.0)*pz);
IkReal x4718=((0.335)*sj6);
IkReal x4719=((0.15000018)*sj3);
IkReal x4720=((0.15000018)*cj3);
IkReal x4721=((0.17676784)*x4711);
IkReal x4722=(sj3*x4710);
IkReal x4723=((1.0)*cj0*px);
IkReal x4724=((0.335)*r11*sj0);
IkReal x4725=((0.17676784)*x4710);
IkReal x4726=(cj0*r01*sj6);
IkReal x4727=((0.21066117)*x4711);
IkReal x4728=((1.0)*py*sj0);
IkReal x4729=(r11*sj0*sj6);
IkReal x4730=((0.21066117)*x4710);
evalcond[0]=((((0.33500111)*r22))+(((-1.0)*x4721))+(((-1.0)*x4730))+(((-1.0)*x4717)));
evalcond[1]=((((-1.0)*x4728))+(((-1.0)*x4723))+(((-1.0)*x4727))+x4725+((x4713*x4714))+((x4713*x4715))+(((-0.15000018)*x4726))+(((-0.15000018)*x4729)));
evalcond[2]=((((-1.0)*sj3*x4721))+((x4714*x4718))+((cj0*r01*x4716))+((x4715*x4718))+(((-0.21066117)*x4722))+((r11*sj0*x4716))+(((-1.0)*sj3*x4717))+((sj3*x4712)));
evalcond[3]=((((-1.0)*cj3*x4730))+(((-1.0)*r11*sj0*x4718))+(((-1.0)*cj3*x4721))+((cj3*x4712))+((x4714*x4716))+((x4715*x4716))+(((-1.0)*cj0*r01*x4718))+(((-1.0)*cj3*x4717)));
evalcond[4]=((((-1.0)*cj3*x4727))+(((-1.0)*cj3*x4723))+(((-1.0)*cj3*x4728))+((cj3*x4713*x4715))+((cj3*x4713*x4714))+((cj3*x4725))+(((-1.0)*x4720*x4729))+(((-1.0)*x4720*x4726)));
evalcond[5]=((((-1.0)*sj3*x4727))+(((-1.0)*sj3*x4723))+(((-1.0)*sj3*x4728))+(((-1.0)*x4719*x4729))+(((-1.0)*x4719*x4726))+(((0.17676784)*x4722))+((sj3*x4713*x4714))+((sj3*x4713*x4715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((-1.0)*cj1*r22)) < IKFAST_ATAN2_MAGTHRESH && IKabs((r22*sj1)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj1*r22))+IKsqr((r22*sj1))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*cj1*r22), (r22*sj1));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4731=IKsin(j2);
IkReal x4732=IKcos(j2);
IkReal x4733=((1.0)*cj6);
IkReal x4734=(cj0*r01);
IkReal x4735=(r11*sj0);
IkReal x4736=((1.0)*sj1);
IkReal x4737=((0.15000018)*cj6);
IkReal x4738=(cj0*r00);
IkReal x4739=(r10*sj0);
IkReal x4740=((0.15000018)*sj6);
IkReal x4741=((1.0)*sj6);
IkReal x4742=(cj3*x4731);
IkReal x4743=(cj1*x4731);
IkReal x4744=(sj1*x4732);
IkReal x4745=((1.0)*cj1*x4732);
evalcond[0]=(x4743+(((-1.0)*x4732*x4736))+r22);
evalcond[1]=((((-1.0)*x4731*x4736))+(((-1.0)*x4745)));
evalcond[2]=((((-1.0)*sj3*x4745))+(((-1.0)*sj3*x4731*x4736)));
evalcond[3]=((((-1.0)*cj3*x4745))+(((-1.0)*x4736*x4742)));
evalcond[4]=((((-0.21066117)*sj1))+(((-0.335)*x4743))+(((-1.0)*pz))+(((-0.17676784)*cj1))+(((1.11e-6)*r22))+(((0.335)*x4744)));
evalcond[5]=(((cj3*x4744))+(((-1.0)*x4733*x4738))+(((-1.0)*x4733*x4739))+(((-1.0)*cj1*x4742))+((sj6*x4734))+((sj6*x4735)));
evalcond[6]=(((sj3*x4744))+(((-1.0)*x4733*x4734))+(((-1.0)*x4733*x4735))+(((-1.0)*x4738*x4741))+(((-1.0)*x4739*x4741))+(((-1.0)*sj3*x4743)));
evalcond[7]=((((-0.21066117)*cj1))+(((0.17676784)*sj1))+((x4737*x4739))+((x4737*x4738))+(((0.335)*cj1*x4732))+(((0.335)*sj1*x4731))+(((-1.0)*py*sj0))+(((-1.0)*x4735*x4740))+(((-1.0)*x4734*x4740))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4746=(cj3*cj6);
IkReal x4747=(cj6*sj3);
IkReal x4748=(sj3*sj6);
IkReal x4749=((1.0)*cj3*sj6);
CheckValue<IkReal> x4750 = IKatan2WithCheck(IkReal((((r11*x4747))+(((-1.0)*r11*x4749))+((r10*x4746))+((r10*x4748)))),IkReal((((r00*x4746))+((r00*x4748))+((r01*x4747))+(((-1.0)*r01*x4749)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4750.valid){
continue;
}
CheckValue<IkReal> x4751=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x4751.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4750.value)+(((1.5707963267949)*(x4751.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x4752=IKcos(j0);
IkReal x4753=IKsin(j0);
IkReal x4754=((0.15000018)*sj6);
IkReal x4755=((1.0)*sj6);
IkReal x4756=(r11*x4752);
IkReal x4757=(r01*x4753);
IkReal x4758=(r00*x4753);
IkReal x4759=((1.0)*cj6*x4753);
IkReal x4760=(cj6*r10*x4752);
evalcond[0]=((((-1.0)*x4755*x4756))+sj3+((sj6*x4757))+x4760+(((-1.0)*cj6*x4758)));
evalcond[1]=((((-1.0)*x4755*x4758))+((r10*sj6*x4752))+((cj6*x4756))+(((-1.0)*cj3))+(((-1.0)*cj6*x4757)));
evalcond[2]=((-0.0005)+(((-1.0)*x4754*x4757))+((py*x4752))+((x4754*x4756))+(((-0.15000018)*x4760))+(((0.15000018)*cj6*x4758))+(((-1.0)*px*x4753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4761=(cj0*px);
IkReal x4762=(py*sj0);
IkReal x4763=(cj0*cj6*r00);
IkReal x4764=(r11*sj0*sj6);
IkReal x4765=(cj6*r10*sj0);
IkReal x4766=(cj0*r01*sj6);
if( IKabs(((((-2.78560232882098)*pz))+(((2.33742605134422)*x4761))+(((2.33742605134422)*x4762))+(((0.350614328438323)*x4764))+(((0.350614328438323)*x4766))+(((0.933179872173613)*r22))+(((-0.350614328438323)*x4765))+(((-0.350614328438323)*x4763)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.417840850731566)*x4764))+(((-0.417840850731566)*x4766))+(((0.783040321743232)*r22))+(((-2.78560232882098)*x4761))+(((-2.78560232882098)*x4762))+(((-2.33742605134422)*pz))+(((0.417840850731566)*x4763))+(((0.417840850731566)*x4765)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.78560232882098)*pz))+(((2.33742605134422)*x4761))+(((2.33742605134422)*x4762))+(((0.350614328438323)*x4764))+(((0.350614328438323)*x4766))+(((0.933179872173613)*r22))+(((-0.350614328438323)*x4765))+(((-0.350614328438323)*x4763))))+IKsqr(((((-0.417840850731566)*x4764))+(((-0.417840850731566)*x4766))+(((0.783040321743232)*r22))+(((-2.78560232882098)*x4761))+(((-2.78560232882098)*x4762))+(((-2.33742605134422)*pz))+(((0.417840850731566)*x4763))+(((0.417840850731566)*x4765))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.78560232882098)*pz))+(((2.33742605134422)*x4761))+(((2.33742605134422)*x4762))+(((0.350614328438323)*x4764))+(((0.350614328438323)*x4766))+(((0.933179872173613)*r22))+(((-0.350614328438323)*x4765))+(((-0.350614328438323)*x4763))), ((((-0.417840850731566)*x4764))+(((-0.417840850731566)*x4766))+(((0.783040321743232)*r22))+(((-2.78560232882098)*x4761))+(((-2.78560232882098)*x4762))+(((-2.33742605134422)*pz))+(((0.417840850731566)*x4763))+(((0.417840850731566)*x4765))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x4767=IKsin(j1);
IkReal x4768=IKcos(j1);
IkReal x4769=((1.11e-6)*r22);
IkReal x4770=((0.15000018)*cj6);
IkReal x4771=(cj0*r00);
IkReal x4772=(r10*sj0);
IkReal x4773=((0.335)*cj6);
IkReal x4774=((1.0)*pz);
IkReal x4775=((0.335)*sj6);
IkReal x4776=((0.15000018)*sj3);
IkReal x4777=((0.15000018)*cj3);
IkReal x4778=((0.17676784)*x4768);
IkReal x4779=(sj3*x4767);
IkReal x4780=((1.0)*cj0*px);
IkReal x4781=((0.335)*r11*sj0);
IkReal x4782=((0.17676784)*x4767);
IkReal x4783=(cj0*r01*sj6);
IkReal x4784=((0.21066117)*x4768);
IkReal x4785=((1.0)*py*sj0);
IkReal x4786=(r11*sj0*sj6);
IkReal x4787=((0.21066117)*x4767);
evalcond[0]=((((0.33500111)*r22))+(((-1.0)*x4774))+(((-1.0)*x4778))+(((-1.0)*x4787)));
evalcond[1]=((((-0.15000018)*x4783))+(((-0.15000018)*x4786))+x4782+((x4770*x4772))+((x4770*x4771))+(((-1.0)*x4784))+(((-1.0)*x4785))+(((-1.0)*x4780)));
evalcond[2]=(((x4772*x4775))+(((-1.0)*sj3*x4778))+(((-1.0)*sj3*x4774))+((r11*sj0*x4773))+((sj3*x4769))+(((-0.21066117)*x4779))+((cj0*r01*x4773))+((x4771*x4775)));
evalcond[3]=((((-1.0)*cj3*x4778))+(((-1.0)*cj3*x4774))+((cj3*x4769))+((x4772*x4773))+(((-1.0)*r11*sj0*x4775))+(((-1.0)*cj3*x4787))+(((-1.0)*cj0*r01*x4775))+((x4771*x4773)));
evalcond[4]=((((-1.0)*x4777*x4786))+(((-1.0)*x4777*x4783))+((cj3*x4770*x4771))+((cj3*x4770*x4772))+(((-1.0)*cj3*x4780))+(((-1.0)*cj3*x4785))+(((-1.0)*cj3*x4784))+((cj3*x4782)));
evalcond[5]=(((sj3*x4770*x4771))+((sj3*x4770*x4772))+(((-1.0)*x4776*x4786))+(((-1.0)*x4776*x4783))+(((-1.0)*sj3*x4780))+(((-1.0)*sj3*x4784))+(((-1.0)*sj3*x4785))+(((0.17676784)*x4779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((-1.0)*cj1*r22)) < IKFAST_ATAN2_MAGTHRESH && IKabs((r22*sj1)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj1*r22))+IKsqr((r22*sj1))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*cj1*r22), (r22*sj1));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4788=IKsin(j2);
IkReal x4789=IKcos(j2);
IkReal x4790=((1.0)*cj6);
IkReal x4791=(cj0*r01);
IkReal x4792=(r11*sj0);
IkReal x4793=((1.0)*sj1);
IkReal x4794=((0.15000018)*cj6);
IkReal x4795=(cj0*r00);
IkReal x4796=(r10*sj0);
IkReal x4797=((0.15000018)*sj6);
IkReal x4798=((1.0)*sj6);
IkReal x4799=(cj3*x4788);
IkReal x4800=(cj1*x4788);
IkReal x4801=(sj1*x4789);
IkReal x4802=((1.0)*cj1*x4789);
evalcond[0]=((((-1.0)*x4789*x4793))+r22+x4800);
evalcond[1]=((((-1.0)*x4788*x4793))+(((-1.0)*x4802)));
evalcond[2]=((((-1.0)*sj3*x4802))+(((-1.0)*sj3*x4788*x4793)));
evalcond[3]=((((-1.0)*cj3*x4802))+(((-1.0)*x4793*x4799)));
evalcond[4]=((((0.335)*x4801))+(((-0.21066117)*sj1))+(((-1.0)*pz))+(((-0.17676784)*cj1))+(((1.11e-6)*r22))+(((-0.335)*x4800)));
evalcond[5]=(((cj3*x4801))+(((-1.0)*x4790*x4795))+(((-1.0)*x4790*x4796))+(((-1.0)*cj1*x4799))+((sj6*x4791))+((sj6*x4792)));
evalcond[6]=((((-1.0)*x4790*x4791))+(((-1.0)*x4790*x4792))+(((-1.0)*sj3*x4800))+(((-1.0)*x4796*x4798))+(((-1.0)*x4795*x4798))+((sj3*x4801)));
evalcond[7]=((((0.335)*cj1*x4789))+(((-0.21066117)*cj1))+(((0.17676784)*sj1))+(((0.335)*sj1*x4788))+(((-1.0)*py*sj0))+((x4794*x4795))+((x4794*x4796))+(((-1.0)*cj0*px))+(((-1.0)*x4791*x4797))+(((-1.0)*x4792*x4797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j5), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x4803=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x4803);
rxp1_0=(pz*r11);
rxp1_1=(r01*x4803);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4=-1.5707963267949;
sj4=-1.0;
cj4=0;
j5=0;
sj5=0;
cj5=1.0;
IkReal x4804=cj6*cj6;
IkReal x4805=sj3*sj3;
IkReal x4806=cj3*cj3;
IkReal x4807=sj6*sj6;
j0eval[0]=r22;
j0eval[1]=(((x4805*x4807))+((x4804*x4805))+((x4804*x4806))+((x4806*x4807)));
j0eval[2]=IKsign(r22);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x4808=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x4808);
rxp1_0=(pz*r11);
rxp1_1=(r01*x4808);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4=-1.5707963267949;
sj4=-1.0;
cj4=0;
j5=0;
sj5=0;
cj5=1.0;
IkReal x4809=(r11*sj6);
IkReal x4810=(r01*sj6);
IkReal x4811=(cj6*r00);
IkReal x4812=((0.00186)*sj3);
IkReal x4813=((2000.0)*sj3);
IkReal x4814=(rxp1_2*sj6);
IkReal x4815=(cj6*r10);
IkReal x4816=(cj6*rxp0_2);
j0eval[0]=((((-1.0)*x4816))+x4814);
j0eval[1]=((IKabs((((x4811*x4812))+(((-1.0)*x4811))+((px*x4813))+(((-1.0)*x4810*x4812))+x4810)))+(IKabs((((x4812*x4815))+((py*x4813))+(((-1.0)*x4809*x4812))+(((-1.0)*x4815))+x4809))));
j0eval[2]=IKsign(((((-2000.0)*x4816))+(((2000.0)*x4814))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x4817=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x4817);
rxp1_0=(pz*r11);
rxp1_1=(r01*x4817);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4=-1.5707963267949;
sj4=-1.0;
cj4=0;
j5=0;
sj5=0;
cj5=1.0;
IkReal x4818=(cj6*rxp1_2);
IkReal x4819=((0.00186)*cj3);
IkReal x4820=(rxp0_2*sj6);
IkReal x4821=((2000.0)*cj3);
j0eval[0]=((((1075268.8172043)*x4820))+(((1075268.8172043)*x4818))+(((-1.0)*r22)));
j0eval[1]=IKsign(((((-0.00186)*r22))+(((2000.0)*x4818))+(((2000.0)*x4820))));
j0eval[2]=((IKabs((((r00*sj6))+(((-1.0)*px*x4821))+((r01*sj6*x4819))+((cj6*r01))+(((-1.0)*cj6*r00*x4819)))))+(IKabs((((r11*sj6*x4819))+((r10*sj6))+(((-1.0)*cj6*r10*x4819))+((cj6*r11))+(((-1.0)*py*x4821))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4822=((0.00186)*cj3);
IkReal x4823=((2000.0)*cj3);
CheckValue<IkReal> x4824=IKPowWithIntegerCheck(IKsign(((((-0.00186)*r22))+(((2000.0)*rxp0_2*sj6))+(((2000.0)*cj6*rxp1_2)))),-1);
if(!x4824.valid){
continue;
}
CheckValue<IkReal> x4825 = IKatan2WithCheck(IkReal((((r11*sj6*x4822))+((r10*sj6))+(((-1.0)*cj6*r10*x4822))+((cj6*r11))+(((-1.0)*py*x4823)))),IkReal((((r00*sj6))+(((-1.0)*px*x4823))+((r01*sj6*x4822))+(((-1.0)*cj6*r00*x4822))+((cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4825.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4824.value)))+(x4825.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x4826=IKsin(j0);
IkReal x4827=IKcos(j0);
IkReal x4828=((1.0)*r01);
IkReal x4829=(cj6*x4827);
IkReal x4830=(cj6*x4826);
IkReal x4831=((1.0)*x4826);
IkReal x4832=(sj6*x4826);
IkReal x4833=(r11*sj6*x4827);
evalcond[0]=(sj3+(((-1.0)*x4828*x4832))+((r00*x4830))+x4833+(((-1.0)*r10*x4829)));
evalcond[1]=((((-1.0)*r00*sj6*x4831))+((r11*x4829))+(((-1.0)*x4828*x4830))+((r10*sj6*x4827))+(((-1.0)*cj3)));
evalcond[2]=((-0.0005)+(((-1.0)*px*x4831))+(((-9.3e-7)*x4833))+((py*x4827))+(((9.3e-7)*r01*x4832))+(((-9.3e-7)*r00*x4830))+(((9.3e-7)*r10*x4829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4834=((2.17380622775013e-6)*sj0);
IkReal x4835=(cj6*r10);
IkReal x4836=(r11*sj6);
IkReal x4837=(cj0*px);
IkReal x4838=((2.59061016580351e-6)*sj0);
IkReal x4839=(py*sj0);
IkReal x4840=(cj0*cj6*r00);
IkReal x4841=(cj0*r01*sj6);
if( IKabs(((((-2.78560232882098)*pz))+(((2.33742605134422)*x4839))+(((2.33742605134422)*x4837))+(((-2.17380622775013e-6)*x4841))+(((-1.0)*x4834*x4836))+(((2.17380622775013e-6)*x4840))+(((-0.515336430831881)*r22))+((x4834*x4835)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.432423819498682)*r22))+(((-1.0)*x4835*x4838))+((x4836*x4838))+(((-2.33742605134422)*pz))+(((-2.78560232882098)*x4839))+(((-2.78560232882098)*x4837))+(((2.59061016580351e-6)*x4841))+(((-2.59061016580351e-6)*x4840)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.78560232882098)*pz))+(((2.33742605134422)*x4839))+(((2.33742605134422)*x4837))+(((-2.17380622775013e-6)*x4841))+(((-1.0)*x4834*x4836))+(((2.17380622775013e-6)*x4840))+(((-0.515336430831881)*r22))+((x4834*x4835))))+IKsqr(((((-0.432423819498682)*r22))+(((-1.0)*x4835*x4838))+((x4836*x4838))+(((-2.33742605134422)*pz))+(((-2.78560232882098)*x4839))+(((-2.78560232882098)*x4837))+(((2.59061016580351e-6)*x4841))+(((-2.59061016580351e-6)*x4840))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.78560232882098)*pz))+(((2.33742605134422)*x4839))+(((2.33742605134422)*x4837))+(((-2.17380622775013e-6)*x4841))+(((-1.0)*x4834*x4836))+(((2.17380622775013e-6)*x4840))+(((-0.515336430831881)*r22))+((x4834*x4835))), ((((-0.432423819498682)*r22))+(((-1.0)*x4835*x4838))+((x4836*x4838))+(((-2.33742605134422)*pz))+(((-2.78560232882098)*x4839))+(((-2.78560232882098)*x4837))+(((2.59061016580351e-6)*x4841))+(((-2.59061016580351e-6)*x4840))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x4842=IKsin(j1);
IkReal x4843=IKcos(j1);
IkReal x4844=((0.15)*r22);
IkReal x4845=((9.3e-7)*sj6);
IkReal x4846=(r11*sj0);
IkReal x4847=((0.335)*cj0);
IkReal x4848=(cj6*r00);
IkReal x4849=((1.0)*pz);
IkReal x4850=(cj0*r01);
IkReal x4851=(r10*sj0);
IkReal x4852=((9.3e-7)*cj6);
IkReal x4853=((9.3e-7)*cj0);
IkReal x4854=(cj3*x4843);
IkReal x4855=(sj3*x4842);
IkReal x4856=((1.0)*cj0*px);
IkReal x4857=((0.335)*x4846);
IkReal x4858=((0.17676784)*x4843);
IkReal x4859=((0.17676784)*x4842);
IkReal x4860=((0.21066117)*x4843);
IkReal x4861=((1.0)*py*sj0);
IkReal x4862=((0.21066117)*x4842);
evalcond[0]=((((-1.0)*x4849))+(((-1.0)*x4862))+(((-1.0)*x4858))+(((-0.185)*r22)));
evalcond[1]=((((-1.0)*x4861))+(((-1.0)*x4860))+(((-1.0)*x4856))+((x4845*x4846))+(((-1.0)*x4851*x4852))+((x4845*x4850))+(((-1.0)*x4848*x4853))+x4859);
evalcond[2]=((((0.335)*sj6*x4851))+(((-1.0)*sj3*x4849))+((cj6*x4857))+((r00*sj6*x4847))+((cj6*r01*x4847))+(((-1.0)*sj3*x4858))+(((-0.21066117)*x4855))+((sj3*x4844)));
evalcond[3]=((((-1.0)*x4847*x4848))+((r01*sj6*x4847))+(((-1.0)*cj3*x4862))+((sj6*x4857))+(((-0.17676784)*x4854))+((cj3*x4844))+(((-0.335)*cj6*x4851))+(((-1.0)*cj3*x4849)));
evalcond[4]=(((cj3*x4859))+(((-1.0)*cj3*x4848*x4853))+(((-1.0)*cj3*x4856))+(((-1.0)*cj3*x4861))+((cj3*x4845*x4846))+(((-1.0)*cj3*x4851*x4852))+(((-0.21066117)*x4854))+((cj3*x4845*x4850)));
evalcond[5]=(((sj3*x4845*x4846))+(((-1.0)*sj3*x4851*x4852))+(((0.17676784)*x4855))+(((-1.0)*sj3*x4856))+((sj3*x4845*x4850))+(((-1.0)*sj3*x4861))+(((-1.0)*sj3*x4860))+(((-1.0)*sj3*x4848*x4853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs((cj1*r22)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*r22*sj1)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj1*r22))+IKsqr(((-1.0)*r22*sj1))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((cj1*r22), ((-1.0)*r22*sj1));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4863=IKcos(j2);
IkReal x4864=IKsin(j2);
IkReal x4865=((1.0)*cj6);
IkReal x4866=(cj0*r01);
IkReal x4867=(r11*sj0);
IkReal x4868=((1.0)*sj1);
IkReal x4869=((9.3e-7)*sj6);
IkReal x4870=((1.0)*sj6);
IkReal x4871=(cj3*x4864);
IkReal x4872=(cj1*x4864);
IkReal x4873=(sj1*x4863);
IkReal x4874=(cj0*cj6*r00);
IkReal x4875=(cj6*r10*sj0);
IkReal x4876=((1.0)*cj1*x4863);
evalcond[0]=((((-1.0)*x4864*x4868))+(((-1.0)*x4876)));
evalcond[1]=((((-1.0)*sj3*x4876))+(((-1.0)*sj3*x4864*x4868)));
evalcond[2]=((((-1.0)*x4863*x4868))+(((-1.0)*r22))+x4872);
evalcond[3]=((((-1.0)*x4868*x4871))+(((-1.0)*cj3*x4876)));
evalcond[4]=((((-0.21066117)*sj1))+(((0.15)*r22))+(((-1.0)*pz))+(((-0.17676784)*cj1))+(((-0.335)*x4872))+(((0.335)*x4873)));
evalcond[5]=(((cj3*x4873))+(((-1.0)*x4866*x4870))+(((-1.0)*cj1*x4871))+(((-1.0)*x4867*x4870))+x4875+x4874);
evalcond[6]=((((-1.0)*sj3*x4872))+((sj3*x4873))+(((-1.0)*cj0*r00*x4870))+(((-1.0)*r10*sj0*x4870))+(((-1.0)*x4865*x4867))+(((-1.0)*x4865*x4866)));
evalcond[7]=((((-0.21066117)*cj1))+((x4867*x4869))+(((0.17676784)*sj1))+(((0.335)*sj1*x4864))+((x4866*x4869))+(((-1.0)*py*sj0))+(((-9.3e-7)*x4874))+(((-9.3e-7)*x4875))+(((-1.0)*cj0*px))+(((0.335)*cj1*x4863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4877=(cj6*r00);
IkReal x4878=((0.00186)*sj3);
IkReal x4879=(r11*sj6);
IkReal x4880=(r01*sj6);
IkReal x4881=((2000.0)*sj3);
IkReal x4882=(cj6*r10);
CheckValue<IkReal> x4883 = IKatan2WithCheck(IkReal(((((-1.0)*x4882))+((x4878*x4882))+(((-1.0)*x4878*x4879))+((py*x4881))+x4879)),IkReal((((x4877*x4878))+(((-1.0)*x4877))+(((-1.0)*x4878*x4880))+x4880+((px*x4881)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4883.valid){
continue;
}
CheckValue<IkReal> x4884=IKPowWithIntegerCheck(IKsign(((((-2000.0)*cj6*rxp0_2))+(((2000.0)*rxp1_2*sj6)))),-1);
if(!x4884.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4883.value)+(((1.5707963267949)*(x4884.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x4885=IKsin(j0);
IkReal x4886=IKcos(j0);
IkReal x4887=((1.0)*r01);
IkReal x4888=(cj6*x4886);
IkReal x4889=(cj6*x4885);
IkReal x4890=((1.0)*x4885);
IkReal x4891=(sj6*x4885);
IkReal x4892=(r11*sj6*x4886);
evalcond[0]=(sj3+(((-1.0)*r10*x4888))+(((-1.0)*x4887*x4891))+((r00*x4889))+x4892);
evalcond[1]=((((-1.0)*r00*sj6*x4890))+((r11*x4888))+((r10*sj6*x4886))+(((-1.0)*x4887*x4889))+(((-1.0)*cj3)));
evalcond[2]=((-0.0005)+(((9.3e-7)*r10*x4888))+(((-9.3e-7)*r00*x4889))+(((-9.3e-7)*x4892))+(((9.3e-7)*r01*x4891))+(((-1.0)*px*x4890))+((py*x4886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4893=((2.17380622775013e-6)*sj0);
IkReal x4894=(cj6*r10);
IkReal x4895=(r11*sj6);
IkReal x4896=(cj0*px);
IkReal x4897=((2.59061016580351e-6)*sj0);
IkReal x4898=(py*sj0);
IkReal x4899=(cj0*cj6*r00);
IkReal x4900=(cj0*r01*sj6);
if( IKabs(((((-2.78560232882098)*pz))+(((-1.0)*x4893*x4895))+(((-2.17380622775013e-6)*x4900))+(((-0.515336430831881)*r22))+(((2.33742605134422)*x4898))+(((2.33742605134422)*x4896))+((x4893*x4894))+(((2.17380622775013e-6)*x4899)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.59061016580351e-6)*x4900))+(((-0.432423819498682)*r22))+(((-2.78560232882098)*x4898))+(((-2.78560232882098)*x4896))+(((-2.33742605134422)*pz))+((x4895*x4897))+(((-1.0)*x4894*x4897))+(((-2.59061016580351e-6)*x4899)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.78560232882098)*pz))+(((-1.0)*x4893*x4895))+(((-2.17380622775013e-6)*x4900))+(((-0.515336430831881)*r22))+(((2.33742605134422)*x4898))+(((2.33742605134422)*x4896))+((x4893*x4894))+(((2.17380622775013e-6)*x4899))))+IKsqr(((((2.59061016580351e-6)*x4900))+(((-0.432423819498682)*r22))+(((-2.78560232882098)*x4898))+(((-2.78560232882098)*x4896))+(((-2.33742605134422)*pz))+((x4895*x4897))+(((-1.0)*x4894*x4897))+(((-2.59061016580351e-6)*x4899))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.78560232882098)*pz))+(((-1.0)*x4893*x4895))+(((-2.17380622775013e-6)*x4900))+(((-0.515336430831881)*r22))+(((2.33742605134422)*x4898))+(((2.33742605134422)*x4896))+((x4893*x4894))+(((2.17380622775013e-6)*x4899))), ((((2.59061016580351e-6)*x4900))+(((-0.432423819498682)*r22))+(((-2.78560232882098)*x4898))+(((-2.78560232882098)*x4896))+(((-2.33742605134422)*pz))+((x4895*x4897))+(((-1.0)*x4894*x4897))+(((-2.59061016580351e-6)*x4899))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x4901=IKsin(j1);
IkReal x4902=IKcos(j1);
IkReal x4903=((0.15)*r22);
IkReal x4904=((9.3e-7)*sj6);
IkReal x4905=(r11*sj0);
IkReal x4906=((0.335)*cj0);
IkReal x4907=(cj6*r00);
IkReal x4908=((1.0)*pz);
IkReal x4909=(cj0*r01);
IkReal x4910=(r10*sj0);
IkReal x4911=((9.3e-7)*cj6);
IkReal x4912=((9.3e-7)*cj0);
IkReal x4913=(cj3*x4902);
IkReal x4914=(sj3*x4901);
IkReal x4915=((1.0)*cj0*px);
IkReal x4916=((0.335)*x4905);
IkReal x4917=((0.17676784)*x4902);
IkReal x4918=((0.17676784)*x4901);
IkReal x4919=((0.21066117)*x4902);
IkReal x4920=((1.0)*py*sj0);
IkReal x4921=((0.21066117)*x4901);
evalcond[0]=((((-1.0)*x4908))+(((-1.0)*x4917))+(((-0.185)*r22))+(((-1.0)*x4921)));
evalcond[1]=(x4918+(((-1.0)*x4919))+(((-1.0)*x4915))+((x4904*x4905))+((x4904*x4909))+(((-1.0)*x4910*x4911))+(((-1.0)*x4907*x4912))+(((-1.0)*x4920)));
evalcond[2]=((((-1.0)*sj3*x4908))+(((0.335)*sj6*x4910))+((cj6*r01*x4906))+(((-0.21066117)*x4914))+(((-1.0)*sj3*x4917))+((r00*sj6*x4906))+((cj6*x4916))+((sj3*x4903)));
evalcond[3]=((((-1.0)*cj3*x4921))+((r01*sj6*x4906))+(((-1.0)*x4906*x4907))+((cj3*x4903))+(((-0.17676784)*x4913))+((sj6*x4916))+(((-0.335)*cj6*x4910))+(((-1.0)*cj3*x4908)));
evalcond[4]=((((-1.0)*cj3*x4915))+(((-0.21066117)*x4913))+(((-1.0)*cj3*x4920))+(((-1.0)*cj3*x4910*x4911))+(((-1.0)*cj3*x4907*x4912))+((cj3*x4918))+((cj3*x4904*x4905))+((cj3*x4904*x4909)));
evalcond[5]=((((-1.0)*sj3*x4915))+(((-1.0)*sj3*x4919))+(((-1.0)*sj3*x4910*x4911))+(((0.17676784)*x4914))+((sj3*x4904*x4905))+((sj3*x4904*x4909))+(((-1.0)*sj3*x4907*x4912))+(((-1.0)*sj3*x4920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs((cj1*r22)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*r22*sj1)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj1*r22))+IKsqr(((-1.0)*r22*sj1))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((cj1*r22), ((-1.0)*r22*sj1));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4922=IKcos(j2);
IkReal x4923=IKsin(j2);
IkReal x4924=((1.0)*cj6);
IkReal x4925=(cj0*r01);
IkReal x4926=(r11*sj0);
IkReal x4927=((1.0)*sj1);
IkReal x4928=((9.3e-7)*sj6);
IkReal x4929=((1.0)*sj6);
IkReal x4930=(cj3*x4923);
IkReal x4931=(cj1*x4923);
IkReal x4932=(sj1*x4922);
IkReal x4933=(cj0*cj6*r00);
IkReal x4934=(cj6*r10*sj0);
IkReal x4935=((1.0)*cj1*x4922);
evalcond[0]=((((-1.0)*x4923*x4927))+(((-1.0)*x4935)));
evalcond[1]=((((-1.0)*sj3*x4923*x4927))+(((-1.0)*sj3*x4935)));
evalcond[2]=(x4931+(((-1.0)*r22))+(((-1.0)*x4922*x4927)));
evalcond[3]=((((-1.0)*cj3*x4935))+(((-1.0)*x4927*x4930)));
evalcond[4]=((((-0.21066117)*sj1))+(((0.15)*r22))+(((0.335)*x4932))+(((-1.0)*pz))+(((-0.17676784)*cj1))+(((-0.335)*x4931)));
evalcond[5]=(x4933+x4934+(((-1.0)*cj1*x4930))+(((-1.0)*x4926*x4929))+((cj3*x4932))+(((-1.0)*x4925*x4929)));
evalcond[6]=(((sj3*x4932))+(((-1.0)*x4924*x4925))+(((-1.0)*x4924*x4926))+(((-1.0)*r10*sj0*x4929))+(((-1.0)*sj3*x4931))+(((-1.0)*cj0*r00*x4929)));
evalcond[7]=((((-0.21066117)*cj1))+((x4926*x4928))+(((0.17676784)*sj1))+(((-9.3e-7)*x4934))+(((-9.3e-7)*x4933))+(((0.335)*sj1*x4923))+((x4925*x4928))+(((-1.0)*py*sj0))+(((0.335)*cj1*x4922))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4936=(cj6*sj3);
IkReal x4937=(sj3*sj6);
IkReal x4938=(cj3*sj6);
IkReal x4939=((1.0)*cj3*cj6);
CheckValue<IkReal> x4940 = IKatan2WithCheck(IkReal((((r10*x4937))+(((-1.0)*r10*x4939))+((r11*x4938))+((r11*x4936)))),IkReal(((((-1.0)*r00*x4939))+((r00*x4937))+((r01*x4938))+((r01*x4936)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4940.valid){
continue;
}
CheckValue<IkReal> x4941=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x4941.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4940.value)+(((-1.5707963267949)*(x4941.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x4942=IKsin(j0);
IkReal x4943=IKcos(j0);
IkReal x4944=((1.0)*r01);
IkReal x4945=(cj6*x4943);
IkReal x4946=(cj6*x4942);
IkReal x4947=((1.0)*x4942);
IkReal x4948=(sj6*x4942);
IkReal x4949=(r11*sj6*x4943);
evalcond[0]=(x4949+((r00*x4946))+sj3+(((-1.0)*x4944*x4948))+(((-1.0)*r10*x4945)));
evalcond[1]=(((r10*sj6*x4943))+((r11*x4945))+(((-1.0)*x4944*x4946))+(((-1.0)*r00*sj6*x4947))+(((-1.0)*cj3)));
evalcond[2]=((-0.0005)+(((-1.0)*px*x4947))+(((-9.3e-7)*r00*x4946))+(((9.3e-7)*r10*x4945))+((py*x4943))+(((9.3e-7)*r01*x4948))+(((-9.3e-7)*x4949)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4950=((2.17380622775013e-6)*sj0);
IkReal x4951=(cj6*r10);
IkReal x4952=(r11*sj6);
IkReal x4953=(cj0*px);
IkReal x4954=((2.59061016580351e-6)*sj0);
IkReal x4955=(py*sj0);
IkReal x4956=(cj0*cj6*r00);
IkReal x4957=(cj0*r01*sj6);
if( IKabs(((((-2.17380622775013e-6)*x4957))+(((-2.78560232882098)*pz))+(((2.33742605134422)*x4955))+(((2.33742605134422)*x4953))+(((2.17380622775013e-6)*x4956))+(((-0.515336430831881)*r22))+((x4950*x4951))+(((-1.0)*x4950*x4952)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.59061016580351e-6)*x4957))+(((-0.432423819498682)*r22))+(((-2.33742605134422)*pz))+(((-2.78560232882098)*x4955))+(((-2.78560232882098)*x4953))+((x4952*x4954))+(((-2.59061016580351e-6)*x4956))+(((-1.0)*x4951*x4954)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.17380622775013e-6)*x4957))+(((-2.78560232882098)*pz))+(((2.33742605134422)*x4955))+(((2.33742605134422)*x4953))+(((2.17380622775013e-6)*x4956))+(((-0.515336430831881)*r22))+((x4950*x4951))+(((-1.0)*x4950*x4952))))+IKsqr(((((2.59061016580351e-6)*x4957))+(((-0.432423819498682)*r22))+(((-2.33742605134422)*pz))+(((-2.78560232882098)*x4955))+(((-2.78560232882098)*x4953))+((x4952*x4954))+(((-2.59061016580351e-6)*x4956))+(((-1.0)*x4951*x4954))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.17380622775013e-6)*x4957))+(((-2.78560232882098)*pz))+(((2.33742605134422)*x4955))+(((2.33742605134422)*x4953))+(((2.17380622775013e-6)*x4956))+(((-0.515336430831881)*r22))+((x4950*x4951))+(((-1.0)*x4950*x4952))), ((((2.59061016580351e-6)*x4957))+(((-0.432423819498682)*r22))+(((-2.33742605134422)*pz))+(((-2.78560232882098)*x4955))+(((-2.78560232882098)*x4953))+((x4952*x4954))+(((-2.59061016580351e-6)*x4956))+(((-1.0)*x4951*x4954))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x4958=IKsin(j1);
IkReal x4959=IKcos(j1);
IkReal x4960=((0.15)*r22);
IkReal x4961=((9.3e-7)*sj6);
IkReal x4962=(r11*sj0);
IkReal x4963=((0.335)*cj0);
IkReal x4964=(cj6*r00);
IkReal x4965=((1.0)*pz);
IkReal x4966=(cj0*r01);
IkReal x4967=(r10*sj0);
IkReal x4968=((9.3e-7)*cj6);
IkReal x4969=((9.3e-7)*cj0);
IkReal x4970=(cj3*x4959);
IkReal x4971=(sj3*x4958);
IkReal x4972=((1.0)*cj0*px);
IkReal x4973=((0.335)*x4962);
IkReal x4974=((0.17676784)*x4959);
IkReal x4975=((0.17676784)*x4958);
IkReal x4976=((0.21066117)*x4959);
IkReal x4977=((1.0)*py*sj0);
IkReal x4978=((0.21066117)*x4958);
evalcond[0]=((((-1.0)*x4965))+(((-0.185)*r22))+(((-1.0)*x4978))+(((-1.0)*x4974)));
evalcond[1]=(x4975+((x4961*x4962))+((x4961*x4966))+(((-1.0)*x4972))+(((-1.0)*x4977))+(((-1.0)*x4976))+(((-1.0)*x4964*x4969))+(((-1.0)*x4967*x4968)));
evalcond[2]=(((cj6*x4973))+((sj3*x4960))+(((-1.0)*sj3*x4974))+((r00*sj6*x4963))+(((-1.0)*sj3*x4965))+(((-0.21066117)*x4971))+((cj6*r01*x4963))+(((0.335)*sj6*x4967)));
evalcond[3]=((((-1.0)*cj3*x4965))+(((-0.335)*cj6*x4967))+(((-0.17676784)*x4970))+((cj3*x4960))+(((-1.0)*x4963*x4964))+((sj6*x4973))+((r01*sj6*x4963))+(((-1.0)*cj3*x4978)));
evalcond[4]=(((cj3*x4975))+(((-1.0)*cj3*x4967*x4968))+(((-0.21066117)*x4970))+(((-1.0)*cj3*x4964*x4969))+((cj3*x4961*x4966))+((cj3*x4961*x4962))+(((-1.0)*cj3*x4977))+(((-1.0)*cj3*x4972)));
evalcond[5]=((((-1.0)*sj3*x4964*x4969))+(((0.17676784)*x4971))+((sj3*x4961*x4966))+((sj3*x4961*x4962))+(((-1.0)*sj3*x4967*x4968))+(((-1.0)*sj3*x4972))+(((-1.0)*sj3*x4977))+(((-1.0)*sj3*x4976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs((cj1*r22)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*r22*sj1)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj1*r22))+IKsqr(((-1.0)*r22*sj1))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((cj1*r22), ((-1.0)*r22*sj1));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4979=IKcos(j2);
IkReal x4980=IKsin(j2);
IkReal x4981=((1.0)*cj6);
IkReal x4982=(cj0*r01);
IkReal x4983=(r11*sj0);
IkReal x4984=((1.0)*sj1);
IkReal x4985=((9.3e-7)*sj6);
IkReal x4986=((1.0)*sj6);
IkReal x4987=(cj3*x4980);
IkReal x4988=(cj1*x4980);
IkReal x4989=(sj1*x4979);
IkReal x4990=(cj0*cj6*r00);
IkReal x4991=(cj6*r10*sj0);
IkReal x4992=((1.0)*cj1*x4979);
evalcond[0]=((((-1.0)*x4992))+(((-1.0)*x4980*x4984)));
evalcond[1]=((((-1.0)*sj3*x4992))+(((-1.0)*sj3*x4980*x4984)));
evalcond[2]=(x4988+(((-1.0)*r22))+(((-1.0)*x4979*x4984)));
evalcond[3]=((((-1.0)*cj3*x4992))+(((-1.0)*x4984*x4987)));
evalcond[4]=((((0.335)*x4989))+(((-0.335)*x4988))+(((-0.21066117)*sj1))+(((0.15)*r22))+(((-1.0)*pz))+(((-0.17676784)*cj1)));
evalcond[5]=(x4990+x4991+(((-1.0)*cj1*x4987))+(((-1.0)*x4982*x4986))+(((-1.0)*x4983*x4986))+((cj3*x4989)));
evalcond[6]=((((-1.0)*cj0*r00*x4986))+((sj3*x4989))+(((-1.0)*x4981*x4982))+(((-1.0)*x4981*x4983))+(((-1.0)*sj3*x4988))+(((-1.0)*r10*sj0*x4986)));
evalcond[7]=((((-0.21066117)*cj1))+(((0.17676784)*sj1))+(((0.335)*cj1*x4979))+((x4982*x4985))+(((0.335)*sj1*x4980))+(((-1.0)*py*sj0))+(((-9.3e-7)*x4991))+(((-9.3e-7)*x4990))+(((-1.0)*cj0*px))+((x4983*x4985)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j5, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x4993=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x4993);
rxp1_0=(pz*r11);
rxp1_1=(r01*x4993);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4=-1.5707963267949;
sj4=-1.0;
cj4=0;
j5=3.14159265358979;
sj5=0;
cj5=-1.0;
IkReal x4994=cj6*cj6;
IkReal x4995=sj3*sj3;
IkReal x4996=cj3*cj3;
IkReal x4997=sj6*sj6;
j0eval[0]=r22;
j0eval[1]=(((x4995*x4997))+((x4994*x4996))+((x4994*x4995))+((x4996*x4997)));
j0eval[2]=IKsign(r22);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x4998=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x4998);
rxp1_0=(pz*r11);
rxp1_1=(r01*x4998);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4=-1.5707963267949;
sj4=-1.0;
cj4=0;
j5=3.14159265358979;
sj5=0;
cj5=-1.0;
IkReal x4999=(rxp1_2*sj6);
IkReal x5000=(cj6*r00);
IkReal x5001=(cj6*rxp0_2);
IkReal x5002=((0.00258)*sj3);
IkReal x5003=(cj6*r10);
IkReal x5004=((2000.0)*sj3);
IkReal x5005=(r11*sj6);
IkReal x5006=(r01*sj6);
j0eval[0]=(x5001+(((-1.0)*x4999)));
j0eval[1]=IKsign(((((-2000.0)*x4999))+(((2000.0)*x5001))));
j0eval[2]=((IKabs((((x5002*x5006))+(((-1.0)*x5006))+((px*x5004))+x5000+(((-1.0)*x5000*x5002)))))+(IKabs(((((-1.0)*x5002*x5003))+((x5002*x5005))+(((-1.0)*x5005))+((py*x5004))+x5003))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x5007=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x5007);
rxp1_0=(pz*r11);
rxp1_1=(r01*x5007);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4=-1.5707963267949;
sj4=-1.0;
cj4=0;
j5=3.14159265358979;
sj5=0;
cj5=-1.0;
IkReal x5008=(cj6*rxp1_2);
IkReal x5009=(rxp0_2*sj6);
IkReal x5010=((2000.0)*cj3);
IkReal x5011=((0.00258)*cj3*sj6);
IkReal x5012=((0.00258)*cj3*cj6);
j0eval[0]=((((775193.798449612)*x5008))+(((775193.798449612)*x5009))+r22);
j0eval[1]=((IKabs((((r00*sj6))+((cj6*r01))+(((-1.0)*px*x5010))+(((-1.0)*r01*x5011))+((r00*x5012)))))+(IKabs((((r10*sj6))+(((-1.0)*py*x5010))+(((-1.0)*r11*x5011))+((cj6*r11))+((r10*x5012))))));
j0eval[2]=IKsign(((((0.00258)*r22))+(((2000.0)*x5008))+(((2000.0)*x5009))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5013=((2000.0)*cj3);
IkReal x5014=((0.00258)*cj3*sj6);
IkReal x5015=((0.00258)*cj3*cj6);
CheckValue<IkReal> x5016=IKPowWithIntegerCheck(IKsign(((((2000.0)*rxp0_2*sj6))+(((0.00258)*r22))+(((2000.0)*cj6*rxp1_2)))),-1);
if(!x5016.valid){
continue;
}
CheckValue<IkReal> x5017 = IKatan2WithCheck(IkReal((((r10*sj6))+(((-1.0)*py*x5013))+(((-1.0)*r11*x5014))+((cj6*r11))+((r10*x5015)))),IkReal((((r00*sj6))+((cj6*r01))+(((-1.0)*px*x5013))+(((-1.0)*r01*x5014))+((r00*x5015)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5017.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5016.value)))+(x5017.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x5018=IKcos(j0);
IkReal x5019=IKsin(j0);
IkReal x5020=((1.29e-6)*sj6);
IkReal x5021=((1.0)*sj6);
IkReal x5022=(r11*x5018);
IkReal x5023=(r01*x5019);
IkReal x5024=(cj6*r00*x5019);
IkReal x5025=(cj6*r10*x5018);
evalcond[0]=(sj3+(((-1.0)*x5024))+x5025+(((-1.0)*x5021*x5022))+((sj6*x5023)));
evalcond[1]=((((-1.0)*cj6*x5023))+((r10*sj6*x5018))+(((-1.0)*r00*x5019*x5021))+((cj6*x5022))+(((-1.0)*cj3)));
evalcond[2]=((-0.0005)+(((-1.29e-6)*x5025))+((x5020*x5022))+(((1.29e-6)*x5024))+((py*x5018))+(((-1.0)*x5020*x5023))+(((-1.0)*px*x5019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5026=((3.59342700417906e-6)*sj0);
IkReal x5027=(cj6*r10);
IkReal x5028=(r11*sj6);
IkReal x5029=(cj0*px);
IkReal x5030=(py*sj0);
IkReal x5031=((3.01527960623405e-6)*sj0);
IkReal x5032=(cj0*cj6*r00);
IkReal x5033=(cj0*r01*sj6);
if( IKabs(((((-1.0)*x5027*x5031))+(((2.33742605134422)*x5029))+(((-3.01527960623405e-6)*x5032))+(((-2.78560232882098)*pz))+((x5028*x5031))+(((0.515336430831881)*r22))+(((3.01527960623405e-6)*x5033))+(((2.33742605134422)*x5030)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.432423819498682)*r22))+(((-2.78560232882098)*x5030))+((x5026*x5027))+(((-2.33742605134422)*pz))+(((-2.78560232882098)*x5029))+(((-1.0)*x5026*x5028))+(((-3.59342700417906e-6)*x5033))+(((3.59342700417906e-6)*x5032)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5027*x5031))+(((2.33742605134422)*x5029))+(((-3.01527960623405e-6)*x5032))+(((-2.78560232882098)*pz))+((x5028*x5031))+(((0.515336430831881)*r22))+(((3.01527960623405e-6)*x5033))+(((2.33742605134422)*x5030))))+IKsqr(((((0.432423819498682)*r22))+(((-2.78560232882098)*x5030))+((x5026*x5027))+(((-2.33742605134422)*pz))+(((-2.78560232882098)*x5029))+(((-1.0)*x5026*x5028))+(((-3.59342700417906e-6)*x5033))+(((3.59342700417906e-6)*x5032))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*x5027*x5031))+(((2.33742605134422)*x5029))+(((-3.01527960623405e-6)*x5032))+(((-2.78560232882098)*pz))+((x5028*x5031))+(((0.515336430831881)*r22))+(((3.01527960623405e-6)*x5033))+(((2.33742605134422)*x5030))), ((((0.432423819498682)*r22))+(((-2.78560232882098)*x5030))+((x5026*x5027))+(((-2.33742605134422)*pz))+(((-2.78560232882098)*x5029))+(((-1.0)*x5026*x5028))+(((-3.59342700417906e-6)*x5033))+(((3.59342700417906e-6)*x5032))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x5034=IKsin(j1);
IkReal x5035=IKcos(j1);
IkReal x5036=((1.29e-6)*cj3);
IkReal x5037=(cj6*sj0);
IkReal x5038=((0.335)*cj0);
IkReal x5039=((1.29e-6)*r10);
IkReal x5040=((1.0)*pz);
IkReal x5041=((0.335)*r10);
IkReal x5042=(r01*sj6);
IkReal x5043=((0.15)*r22);
IkReal x5044=((0.17676784)*x5035);
IkReal x5045=(sj3*x5034);
IkReal x5046=((1.0)*cj0*px);
IkReal x5047=(r11*sj0*sj6);
IkReal x5048=((0.17676784)*x5034);
IkReal x5049=((0.21066117)*x5035);
IkReal x5050=((1.0)*py*sj0);
IkReal x5051=((0.21066117)*x5034);
IkReal x5052=((1.29e-6)*cj0*cj6*r00);
IkReal x5053=((1.29e-6)*cj0*x5042);
evalcond[0]=((((-1.0)*x5044))+(((-1.0)*x5040))+(((-1.0)*x5051))+(((0.185)*r22)));
evalcond[1]=((((-1.29e-6)*x5047))+(((-1.0)*x5046))+(((-1.0)*x5049))+x5048+x5052+((x5037*x5039))+(((-1.0)*x5050))+(((-1.0)*x5053)));
evalcond[2]=(((r00*sj6*x5038))+((sj0*sj6*x5041))+((cj6*r01*x5038))+(((-0.21066117)*x5045))+(((-1.0)*sj3*x5040))+(((-1.0)*sj3*x5044))+(((-1.0)*sj3*x5043))+(((0.335)*r11*x5037)));
evalcond[3]=(((x5037*x5041))+(((-1.0)*cj3*x5051))+(((-0.335)*x5047))+((cj6*r00*x5038))+(((-1.0)*cj3*x5040))+(((-1.0)*cj3*x5044))+(((-1.0)*cj3*x5043))+(((-1.0)*x5038*x5042)));
evalcond[4]=((((-1.0)*cj3*x5050))+(((-1.0)*cj0*x5036*x5042))+((cj3*x5048))+((r10*x5036*x5037))+(((-1.0)*cj3*x5049))+(((-1.0)*cj3*x5046))+(((-1.0)*x5036*x5047))+((cj0*cj6*r00*x5036)));
evalcond[5]=((((-1.0)*sj3*x5053))+(((-1.0)*sj3*x5050))+(((-1.29e-6)*sj3*x5047))+(((0.17676784)*x5045))+((sj3*x5037*x5039))+((sj3*x5052))+(((-1.0)*sj3*x5046))+(((-1.0)*sj3*x5049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((-1.0)*cj1*r22)) < IKFAST_ATAN2_MAGTHRESH && IKabs((r22*sj1)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj1*r22))+IKsqr((r22*sj1))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*cj1*r22), (r22*sj1));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5054=IKsin(j2);
IkReal x5055=IKcos(j2);
IkReal x5056=(cj0*cj6);
IkReal x5057=(r11*sj0);
IkReal x5058=((1.0)*cj6);
IkReal x5059=((1.0)*sj1);
IkReal x5060=((1.29e-6)*sj6);
IkReal x5061=(cj0*r01);
IkReal x5062=(r10*sj0);
IkReal x5063=((1.0)*cj0);
IkReal x5064=(cj3*x5054);
IkReal x5065=(cj1*x5054);
IkReal x5066=(sj1*x5055);
IkReal x5067=((1.0)*cj1*x5055);
evalcond[0]=((((-1.0)*x5055*x5059))+x5065+r22);
evalcond[1]=((((-1.0)*x5067))+(((-1.0)*x5054*x5059)));
evalcond[2]=((((-1.0)*sj3*x5054*x5059))+(((-1.0)*sj3*x5067)));
evalcond[3]=((((-1.0)*x5059*x5064))+(((-1.0)*cj3*x5067)));
evalcond[4]=((((-0.21066117)*sj1))+(((-0.335)*x5065))+(((-0.15)*r22))+(((-1.0)*pz))+(((-0.17676784)*cj1))+(((0.335)*x5066)));
evalcond[5]=((((-1.0)*x5058*x5062))+((sj6*x5057))+(((-1.0)*r00*x5056))+((cj3*x5066))+((sj6*x5061))+(((-1.0)*cj1*x5064)));
evalcond[6]=(((sj3*x5066))+(((-1.0)*sj6*x5062))+(((-1.0)*r01*x5056))+(((-1.0)*sj3*x5065))+(((-1.0)*x5057*x5058))+(((-1.0)*r00*sj6*x5063)));
evalcond[7]=((((0.335)*sj1*x5054))+(((-0.21066117)*cj1))+(((0.17676784)*sj1))+(((-1.0)*x5057*x5060))+(((-1.0)*py*sj0))+(((-1.0)*px*x5063))+(((-1.0)*x5060*x5061))+(((1.29e-6)*r00*x5056))+(((1.29e-6)*cj6*x5062))+(((0.335)*cj1*x5055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5068=((2000.0)*sj3);
IkReal x5069=(r11*sj6);
IkReal x5070=((0.00258)*sj3);
IkReal x5071=(r01*sj6);
IkReal x5072=(cj6*x5070);
CheckValue<IkReal> x5073 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x5072))+((py*x5068))+((cj6*r10))+(((-1.0)*x5069))+((x5069*x5070)))),IkReal((((px*x5068))+((x5070*x5071))+(((-1.0)*x5071))+((cj6*r00))+(((-1.0)*r00*x5072)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5073.valid){
continue;
}
CheckValue<IkReal> x5074=IKPowWithIntegerCheck(IKsign(((((-2000.0)*rxp1_2*sj6))+(((2000.0)*cj6*rxp0_2)))),-1);
if(!x5074.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x5073.value)+(((1.5707963267949)*(x5074.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x5075=IKcos(j0);
IkReal x5076=IKsin(j0);
IkReal x5077=((1.29e-6)*sj6);
IkReal x5078=((1.0)*sj6);
IkReal x5079=(r11*x5075);
IkReal x5080=(r01*x5076);
IkReal x5081=(cj6*r00*x5076);
IkReal x5082=(cj6*r10*x5075);
evalcond[0]=(((sj6*x5080))+sj3+(((-1.0)*x5081))+(((-1.0)*x5078*x5079))+x5082);
evalcond[1]=((((-1.0)*r00*x5076*x5078))+((cj6*x5079))+((r10*sj6*x5075))+(((-1.0)*cj6*x5080))+(((-1.0)*cj3)));
evalcond[2]=((-0.0005)+(((1.29e-6)*x5081))+(((-1.0)*x5077*x5080))+((x5077*x5079))+((py*x5075))+(((-1.29e-6)*x5082))+(((-1.0)*px*x5076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5083=((3.59342700417906e-6)*sj0);
IkReal x5084=(cj6*r10);
IkReal x5085=(r11*sj6);
IkReal x5086=(cj0*px);
IkReal x5087=(py*sj0);
IkReal x5088=((3.01527960623405e-6)*sj0);
IkReal x5089=(cj0*cj6*r00);
IkReal x5090=(cj0*r01*sj6);
if( IKabs(((((-2.78560232882098)*pz))+(((3.01527960623405e-6)*x5090))+((x5085*x5088))+(((-3.01527960623405e-6)*x5089))+(((2.33742605134422)*x5086))+(((2.33742605134422)*x5087))+(((0.515336430831881)*r22))+(((-1.0)*x5084*x5088)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.432423819498682)*r22))+(((-2.33742605134422)*pz))+(((-1.0)*x5083*x5085))+(((3.59342700417906e-6)*x5089))+((x5083*x5084))+(((-2.78560232882098)*x5087))+(((-2.78560232882098)*x5086))+(((-3.59342700417906e-6)*x5090)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.78560232882098)*pz))+(((3.01527960623405e-6)*x5090))+((x5085*x5088))+(((-3.01527960623405e-6)*x5089))+(((2.33742605134422)*x5086))+(((2.33742605134422)*x5087))+(((0.515336430831881)*r22))+(((-1.0)*x5084*x5088))))+IKsqr(((((0.432423819498682)*r22))+(((-2.33742605134422)*pz))+(((-1.0)*x5083*x5085))+(((3.59342700417906e-6)*x5089))+((x5083*x5084))+(((-2.78560232882098)*x5087))+(((-2.78560232882098)*x5086))+(((-3.59342700417906e-6)*x5090))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.78560232882098)*pz))+(((3.01527960623405e-6)*x5090))+((x5085*x5088))+(((-3.01527960623405e-6)*x5089))+(((2.33742605134422)*x5086))+(((2.33742605134422)*x5087))+(((0.515336430831881)*r22))+(((-1.0)*x5084*x5088))), ((((0.432423819498682)*r22))+(((-2.33742605134422)*pz))+(((-1.0)*x5083*x5085))+(((3.59342700417906e-6)*x5089))+((x5083*x5084))+(((-2.78560232882098)*x5087))+(((-2.78560232882098)*x5086))+(((-3.59342700417906e-6)*x5090))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x5091=IKsin(j1);
IkReal x5092=IKcos(j1);
IkReal x5093=((1.29e-6)*cj3);
IkReal x5094=(cj6*sj0);
IkReal x5095=((0.335)*cj0);
IkReal x5096=((1.29e-6)*r10);
IkReal x5097=((1.0)*pz);
IkReal x5098=((0.335)*r10);
IkReal x5099=(r01*sj6);
IkReal x5100=((0.15)*r22);
IkReal x5101=((0.17676784)*x5092);
IkReal x5102=(sj3*x5091);
IkReal x5103=((1.0)*cj0*px);
IkReal x5104=(r11*sj0*sj6);
IkReal x5105=((0.17676784)*x5091);
IkReal x5106=((0.21066117)*x5092);
IkReal x5107=((1.0)*py*sj0);
IkReal x5108=((0.21066117)*x5091);
IkReal x5109=((1.29e-6)*cj0*cj6*r00);
IkReal x5110=((1.29e-6)*cj0*x5099);
evalcond[0]=((((-1.0)*x5108))+(((-1.0)*x5101))+(((-1.0)*x5097))+(((0.185)*r22)));
evalcond[1]=((((-1.0)*x5107))+(((-1.0)*x5106))+(((-1.0)*x5103))+((x5094*x5096))+x5109+x5105+(((-1.29e-6)*x5104))+(((-1.0)*x5110)));
evalcond[2]=((((-1.0)*sj3*x5101))+(((-1.0)*sj3*x5100))+(((-0.21066117)*x5102))+(((-1.0)*sj3*x5097))+((r00*sj6*x5095))+((sj0*sj6*x5098))+(((0.335)*r11*x5094))+((cj6*r01*x5095)));
evalcond[3]=((((-0.335)*x5104))+(((-1.0)*cj3*x5100))+(((-1.0)*cj3*x5101))+(((-1.0)*cj3*x5108))+((x5094*x5098))+(((-1.0)*cj3*x5097))+((cj6*r00*x5095))+(((-1.0)*x5095*x5099)));
evalcond[4]=(((r10*x5093*x5094))+(((-1.0)*cj3*x5103))+(((-1.0)*cj3*x5106))+(((-1.0)*cj3*x5107))+((cj3*x5105))+((cj0*cj6*r00*x5093))+(((-1.0)*cj0*x5093*x5099))+(((-1.0)*x5093*x5104)));
evalcond[5]=((((-1.0)*sj3*x5107))+(((-1.0)*sj3*x5106))+(((-1.0)*sj3*x5103))+(((-1.0)*sj3*x5110))+(((-1.29e-6)*sj3*x5104))+((sj3*x5094*x5096))+(((0.17676784)*x5102))+((sj3*x5109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((-1.0)*cj1*r22)) < IKFAST_ATAN2_MAGTHRESH && IKabs((r22*sj1)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj1*r22))+IKsqr((r22*sj1))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*cj1*r22), (r22*sj1));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5111=IKsin(j2);
IkReal x5112=IKcos(j2);
IkReal x5113=(cj0*cj6);
IkReal x5114=(r11*sj0);
IkReal x5115=((1.0)*cj6);
IkReal x5116=((1.0)*sj1);
IkReal x5117=((1.29e-6)*sj6);
IkReal x5118=(cj0*r01);
IkReal x5119=(r10*sj0);
IkReal x5120=((1.0)*cj0);
IkReal x5121=(cj3*x5111);
IkReal x5122=(cj1*x5111);
IkReal x5123=(sj1*x5112);
IkReal x5124=((1.0)*cj1*x5112);
evalcond[0]=((((-1.0)*x5112*x5116))+x5122+r22);
evalcond[1]=((((-1.0)*x5111*x5116))+(((-1.0)*x5124)));
evalcond[2]=((((-1.0)*sj3*x5124))+(((-1.0)*sj3*x5111*x5116)));
evalcond[3]=((((-1.0)*x5116*x5121))+(((-1.0)*cj3*x5124)));
evalcond[4]=((((-0.21066117)*sj1))+(((-0.335)*x5122))+(((-0.15)*r22))+(((-1.0)*pz))+(((-0.17676784)*cj1))+(((0.335)*x5123)));
evalcond[5]=((((-1.0)*r00*x5113))+(((-1.0)*cj1*x5121))+((sj6*x5114))+((sj6*x5118))+(((-1.0)*x5115*x5119))+((cj3*x5123)));
evalcond[6]=((((-1.0)*r01*x5113))+(((-1.0)*sj3*x5122))+(((-1.0)*r00*sj6*x5120))+(((-1.0)*x5114*x5115))+((sj3*x5123))+(((-1.0)*sj6*x5119)));
evalcond[7]=((((-0.21066117)*cj1))+(((-1.0)*px*x5120))+(((-1.0)*x5114*x5117))+(((-1.0)*x5117*x5118))+(((0.17676784)*sj1))+(((0.335)*sj1*x5111))+(((-1.0)*py*sj0))+(((0.335)*cj1*x5112))+(((1.29e-6)*cj6*x5119))+(((1.29e-6)*r00*x5113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5125=(cj3*cj6);
IkReal x5126=(cj6*sj3);
IkReal x5127=(sj3*sj6);
IkReal x5128=((1.0)*cj3*sj6);
CheckValue<IkReal> x5129 = IKatan2WithCheck(IkReal((((r10*x5127))+((r10*x5125))+((r11*x5126))+(((-1.0)*r11*x5128)))),IkReal((((r00*x5127))+((r00*x5125))+(((-1.0)*r01*x5128))+((r01*x5126)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5129.valid){
continue;
}
CheckValue<IkReal> x5130=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x5130.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x5129.value)+(((1.5707963267949)*(x5130.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x5131=IKcos(j0);
IkReal x5132=IKsin(j0);
IkReal x5133=((1.29e-6)*sj6);
IkReal x5134=((1.0)*sj6);
IkReal x5135=(r11*x5131);
IkReal x5136=(r01*x5132);
IkReal x5137=(cj6*r00*x5132);
IkReal x5138=(cj6*r10*x5131);
evalcond[0]=(sj3+x5138+(((-1.0)*x5137))+(((-1.0)*x5134*x5135))+((sj6*x5136)));
evalcond[1]=((((-1.0)*r00*x5132*x5134))+(((-1.0)*cj6*x5136))+((cj6*x5135))+(((-1.0)*cj3))+((r10*sj6*x5131)));
evalcond[2]=((-0.0005)+(((1.29e-6)*x5137))+(((-1.0)*px*x5132))+(((-1.29e-6)*x5138))+((py*x5131))+((x5133*x5135))+(((-1.0)*x5133*x5136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5139=((3.59342700417906e-6)*sj0);
IkReal x5140=(cj6*r10);
IkReal x5141=(r11*sj6);
IkReal x5142=(cj0*px);
IkReal x5143=(py*sj0);
IkReal x5144=((3.01527960623405e-6)*sj0);
IkReal x5145=(cj0*cj6*r00);
IkReal x5146=(cj0*r01*sj6);
if( IKabs(((((-2.78560232882098)*pz))+(((-1.0)*x5140*x5144))+(((3.01527960623405e-6)*x5146))+((x5141*x5144))+(((-3.01527960623405e-6)*x5145))+(((0.515336430831881)*r22))+(((2.33742605134422)*x5143))+(((2.33742605134422)*x5142)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.78560232882098)*x5142))+(((-2.78560232882098)*x5143))+(((0.432423819498682)*r22))+(((-2.33742605134422)*pz))+(((-3.59342700417906e-6)*x5146))+(((3.59342700417906e-6)*x5145))+(((-1.0)*x5139*x5141))+((x5139*x5140)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.78560232882098)*pz))+(((-1.0)*x5140*x5144))+(((3.01527960623405e-6)*x5146))+((x5141*x5144))+(((-3.01527960623405e-6)*x5145))+(((0.515336430831881)*r22))+(((2.33742605134422)*x5143))+(((2.33742605134422)*x5142))))+IKsqr(((((-2.78560232882098)*x5142))+(((-2.78560232882098)*x5143))+(((0.432423819498682)*r22))+(((-2.33742605134422)*pz))+(((-3.59342700417906e-6)*x5146))+(((3.59342700417906e-6)*x5145))+(((-1.0)*x5139*x5141))+((x5139*x5140))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.78560232882098)*pz))+(((-1.0)*x5140*x5144))+(((3.01527960623405e-6)*x5146))+((x5141*x5144))+(((-3.01527960623405e-6)*x5145))+(((0.515336430831881)*r22))+(((2.33742605134422)*x5143))+(((2.33742605134422)*x5142))), ((((-2.78560232882098)*x5142))+(((-2.78560232882098)*x5143))+(((0.432423819498682)*r22))+(((-2.33742605134422)*pz))+(((-3.59342700417906e-6)*x5146))+(((3.59342700417906e-6)*x5145))+(((-1.0)*x5139*x5141))+((x5139*x5140))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x5147=IKsin(j1);
IkReal x5148=IKcos(j1);
IkReal x5149=((1.29e-6)*cj3);
IkReal x5150=(cj6*sj0);
IkReal x5151=((0.335)*cj0);
IkReal x5152=((1.29e-6)*r10);
IkReal x5153=((1.0)*pz);
IkReal x5154=((0.335)*r10);
IkReal x5155=(r01*sj6);
IkReal x5156=((0.15)*r22);
IkReal x5157=((0.17676784)*x5148);
IkReal x5158=(sj3*x5147);
IkReal x5159=((1.0)*cj0*px);
IkReal x5160=(r11*sj0*sj6);
IkReal x5161=((0.17676784)*x5147);
IkReal x5162=((0.21066117)*x5148);
IkReal x5163=((1.0)*py*sj0);
IkReal x5164=((0.21066117)*x5147);
IkReal x5165=((1.29e-6)*cj0*cj6*r00);
IkReal x5166=((1.29e-6)*cj0*x5155);
evalcond[0]=((((-1.0)*x5164))+(((-1.0)*x5157))+(((-1.0)*x5153))+(((0.185)*r22)));
evalcond[1]=((((-1.29e-6)*x5160))+x5161+x5165+(((-1.0)*x5166))+(((-1.0)*x5163))+(((-1.0)*x5162))+(((-1.0)*x5159))+((x5150*x5152)));
evalcond[2]=((((-1.0)*sj3*x5153))+(((-1.0)*sj3*x5156))+(((-1.0)*sj3*x5157))+(((-0.21066117)*x5158))+(((0.335)*r11*x5150))+((r00*sj6*x5151))+((cj6*r01*x5151))+((sj0*sj6*x5154)));
evalcond[3]=((((-1.0)*cj3*x5153))+(((-1.0)*cj3*x5157))+(((-1.0)*cj3*x5156))+(((-0.335)*x5160))+(((-1.0)*x5151*x5155))+((cj6*r00*x5151))+(((-1.0)*cj3*x5164))+((x5150*x5154)));
evalcond[4]=((((-1.0)*cj3*x5159))+((cj3*x5161))+(((-1.0)*cj0*x5149*x5155))+(((-1.0)*x5149*x5160))+((r10*x5149*x5150))+((cj0*cj6*r00*x5149))+(((-1.0)*cj3*x5162))+(((-1.0)*cj3*x5163)));
evalcond[5]=((((-1.0)*sj3*x5159))+((sj3*x5165))+(((-1.29e-6)*sj3*x5160))+(((-1.0)*sj3*x5163))+(((-1.0)*sj3*x5162))+(((-1.0)*sj3*x5166))+((sj3*x5150*x5152))+(((0.17676784)*x5158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((-1.0)*cj1*r22)) < IKFAST_ATAN2_MAGTHRESH && IKabs((r22*sj1)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj1*r22))+IKsqr((r22*sj1))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*cj1*r22), (r22*sj1));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5167=IKsin(j2);
IkReal x5168=IKcos(j2);
IkReal x5169=(cj0*cj6);
IkReal x5170=(r11*sj0);
IkReal x5171=((1.0)*cj6);
IkReal x5172=((1.0)*sj1);
IkReal x5173=((1.29e-6)*sj6);
IkReal x5174=(cj0*r01);
IkReal x5175=(r10*sj0);
IkReal x5176=((1.0)*cj0);
IkReal x5177=(cj3*x5167);
IkReal x5178=(cj1*x5167);
IkReal x5179=(sj1*x5168);
IkReal x5180=((1.0)*cj1*x5168);
evalcond[0]=((((-1.0)*x5168*x5172))+x5178+r22);
evalcond[1]=((((-1.0)*x5167*x5172))+(((-1.0)*x5180)));
evalcond[2]=((((-1.0)*sj3*x5167*x5172))+(((-1.0)*sj3*x5180)));
evalcond[3]=((((-1.0)*x5172*x5177))+(((-1.0)*cj3*x5180)));
evalcond[4]=((((-0.335)*x5178))+(((-0.21066117)*sj1))+(((-0.15)*r22))+(((-1.0)*pz))+(((-0.17676784)*cj1))+(((0.335)*x5179)));
evalcond[5]=(((sj6*x5170))+((sj6*x5174))+((cj3*x5179))+(((-1.0)*r00*x5169))+(((-1.0)*cj1*x5177))+(((-1.0)*x5171*x5175)));
evalcond[6]=((((-1.0)*sj3*x5178))+(((-1.0)*sj6*x5175))+(((-1.0)*x5170*x5171))+((sj3*x5179))+(((-1.0)*r01*x5169))+(((-1.0)*r00*sj6*x5176)));
evalcond[7]=((((0.335)*sj1*x5167))+(((-1.0)*x5173*x5174))+(((-0.21066117)*cj1))+(((-1.0)*x5170*x5173))+(((0.17676784)*sj1))+(((1.29e-6)*cj6*x5175))+(((-1.0)*px*x5176))+(((0.335)*cj1*x5168))+(((-1.0)*py*sj0))+(((1.29e-6)*r00*x5169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5181=(cj6*sj3);
IkReal x5182=(cj4*sj5);
IkReal x5183=((1.0)*sj6);
IkReal x5184=(sj3*sj6);
IkReal x5185=(cj3*cj5*sj4);
IkReal x5186=(cj3*cj6*x5182);
CheckValue<IkReal> x5187=IKPowWithIntegerCheck(IKsign((r22*((((cj5*sj4))+x5182)))),-1);
if(!x5187.valid){
continue;
}
CheckValue<IkReal> x5188 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x5183*x5185))+((r10*x5184))+((r10*x5186))+(((-1.0)*cj3*r11*x5182*x5183))+((r11*x5181))+((cj6*r10*x5185)))),IkReal((((r00*x5184))+((r00*x5186))+((r01*x5181))+(((-1.0)*cj3*r01*x5182*x5183))+(((-1.0)*r01*x5183*x5185))+((cj6*r00*x5185)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5188.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5187.value)))+(x5188.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5189=IKcos(j0);
IkReal x5190=IKsin(j0);
IkReal x5191=(r01*sj6);
IkReal x5192=((0.15)*sj5);
IkReal x5193=(cj5*sj4);
IkReal x5194=((1.0)*cj4);
IkReal x5195=(cj6*r00);
IkReal x5196=(sj4*sj5);
IkReal x5197=((1.11e-6)*cj5);
IkReal x5198=(sj5*x5190);
IkReal x5199=(cj5*x5190);
IkReal x5200=((1.0)*x5190);
IkReal x5201=((1.8e-7)*x5190);
IkReal x5202=((1.0)*sj4*x5195);
IkReal x5203=(cj6*r10*x5189);
IkReal x5204=(r11*sj6*x5189);
evalcond[0]=(((cj6*r11*x5189))+(((-1.0)*r00*sj6*x5200))+(((-1.0)*cj3))+(((-1.0)*cj6*r01*x5200))+((r10*sj6*x5189)));
evalcond[1]=(((x5190*x5191*x5196))+(((-1.0)*cj5*x5194*x5203))+((cj4*cj5*x5204))+((cj4*x5195*x5199))+(((-1.0)*x5191*x5194*x5199))+((x5196*x5203))+(((-1.0)*x5196*x5204))+(((-1.0)*x5195*x5196*x5200)));
evalcond[2]=(((cj4*x5191*x5198))+((x5190*x5191*x5193))+sj3+(((-1.0)*x5193*x5204))+(((-1.0)*x5194*x5195*x5198))+((cj4*sj5*x5203))+((x5193*x5203))+(((-1.0)*x5193*x5195*x5200))+(((-1.0)*sj5*x5194*x5204)));
evalcond[3]=((-0.0005)+(((1.8e-7)*x5204))+((x5190*x5191*x5197))+((x5190*x5191*x5192))+((x5192*x5203))+(((-1.8e-7)*x5203))+(((-1.0)*x5192*x5204))+((x5197*x5203))+(((-1.0)*x5197*x5204))+((x5195*x5201))+(((-1.0)*px*x5200))+(((-1.0)*x5190*x5195*x5197))+(((-1.0)*x5190*x5192*x5195))+(((-1.0)*x5191*x5201))+((py*x5189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5205=((0.933176780155028)*cj6);
IkReal x5206=(cj0*r00);
IkReal x5207=(cj5*cj6);
IkReal x5208=(r11*sj6);
IkReal x5209=(sj4*sj5);
IkReal x5210=(cj0*px);
IkReal x5211=(cj6*r10);
IkReal x5212=((0.783037727200315)*cj4);
IkReal x5213=(cj5*sj0);
IkReal x5214=(r10*sj0);
IkReal x5215=(cj5*r22);
IkReal x5216=(cj6*sj5);
IkReal x5217=((0.933176780155028)*cj4);
IkReal x5218=(r22*sj5);
IkReal x5219=((0.350613907701634)*sj5);
IkReal x5220=((5.01408419187776e-7)*sj0);
IkReal x5221=((0.417840349323147)*sj5);
IkReal x5222=(py*sj0);
IkReal x5223=((4.2073668924196e-7)*sj0);
IkReal x5224=(sj0*x5209);
IkReal x5225=(cj0*r01*sj6);
IkReal x5226=(cj5*x5225);
if( IKabs(((((-4.2073668924196e-7)*cj6*x5206))+(((2.33742605134422)*x5210))+((x5217*x5218))+(((0.417840349323147)*x5215))+(((-2.78560232882098)*pz))+(((-0.783037727200315)*x5208*x5224))+((x5212*x5226))+(((-2.59454291699209e-6)*x5226))+(((0.783037727200315)*x5211*x5224))+(((0.350613907701634)*x5206*x5216))+(((-1.0)*sj0*x5208*x5219))+(((2.59454291699209e-6)*x5206*x5207))+(((-1.0)*x5219*x5225))+((sj0*x5211*x5219))+(((-1.0)*x5207*x5212*x5214))+(((0.933176780155028)*sj4*x5215))+(((-2.59454291699209e-6)*x5208*x5213))+(((-0.783037727200315)*x5209*x5225))+(((-1.0)*x5206*x5207*x5212))+(((-3.09201858499129e-6)*x5218))+(((2.33742605134422)*x5222))+((x5208*x5212*x5213))+(((0.783037727200315)*cj6*x5206*x5209))+(((4.2073668924196e-7)*x5225))+(((-1.0)*x5211*x5223))+(((2.59454291699209e-6)*x5207*x5214))+((x5208*x5223)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.783037727200315)*sj4*x5215))+(((-1.0)*x5208*x5213*x5217))+(((-3.09201858499129e-6)*x5206*x5207))+(((-1.0)*x5208*x5220))+(((5.01408419187776e-7)*cj6*x5206))+(((-2.78560232882098)*x5222))+(((-1.0)*x5217*x5226))+(((3.09201858499129e-6)*x5208*x5213))+((cj4*r10*x5205*x5213))+((sj0*x5208*x5221))+(((-2.33742605134422)*pz))+(((-2.59454291699209e-6)*x5218))+(((0.933176780155028)*x5208*x5224))+(((-0.417840349323147)*x5206*x5216))+(((0.350613907701634)*x5215))+((x5221*x5225))+(((-1.0)*sj0*x5211*x5221))+((x5212*x5218))+(((-3.09201858499129e-6)*x5207*x5214))+(((-1.0)*x5205*x5206*x5209))+((cj4*cj5*x5205*x5206))+(((0.933176780155028)*x5209*x5225))+(((-5.01408419187776e-7)*x5225))+(((-2.78560232882098)*x5210))+(((3.09201858499129e-6)*x5226))+(((-1.0)*x5205*x5209*x5214))+((x5211*x5220)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-4.2073668924196e-7)*cj6*x5206))+(((2.33742605134422)*x5210))+((x5217*x5218))+(((0.417840349323147)*x5215))+(((-2.78560232882098)*pz))+(((-0.783037727200315)*x5208*x5224))+((x5212*x5226))+(((-2.59454291699209e-6)*x5226))+(((0.783037727200315)*x5211*x5224))+(((0.350613907701634)*x5206*x5216))+(((-1.0)*sj0*x5208*x5219))+(((2.59454291699209e-6)*x5206*x5207))+(((-1.0)*x5219*x5225))+((sj0*x5211*x5219))+(((-1.0)*x5207*x5212*x5214))+(((0.933176780155028)*sj4*x5215))+(((-2.59454291699209e-6)*x5208*x5213))+(((-0.783037727200315)*x5209*x5225))+(((-1.0)*x5206*x5207*x5212))+(((-3.09201858499129e-6)*x5218))+(((2.33742605134422)*x5222))+((x5208*x5212*x5213))+(((0.783037727200315)*cj6*x5206*x5209))+(((4.2073668924196e-7)*x5225))+(((-1.0)*x5211*x5223))+(((2.59454291699209e-6)*x5207*x5214))+((x5208*x5223))))+IKsqr(((((0.783037727200315)*sj4*x5215))+(((-1.0)*x5208*x5213*x5217))+(((-3.09201858499129e-6)*x5206*x5207))+(((-1.0)*x5208*x5220))+(((5.01408419187776e-7)*cj6*x5206))+(((-2.78560232882098)*x5222))+(((-1.0)*x5217*x5226))+(((3.09201858499129e-6)*x5208*x5213))+((cj4*r10*x5205*x5213))+((sj0*x5208*x5221))+(((-2.33742605134422)*pz))+(((-2.59454291699209e-6)*x5218))+(((0.933176780155028)*x5208*x5224))+(((-0.417840349323147)*x5206*x5216))+(((0.350613907701634)*x5215))+((x5221*x5225))+(((-1.0)*sj0*x5211*x5221))+((x5212*x5218))+(((-3.09201858499129e-6)*x5207*x5214))+(((-1.0)*x5205*x5206*x5209))+((cj4*cj5*x5205*x5206))+(((0.933176780155028)*x5209*x5225))+(((-5.01408419187776e-7)*x5225))+(((-2.78560232882098)*x5210))+(((3.09201858499129e-6)*x5226))+(((-1.0)*x5205*x5209*x5214))+((x5211*x5220))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-4.2073668924196e-7)*cj6*x5206))+(((2.33742605134422)*x5210))+((x5217*x5218))+(((0.417840349323147)*x5215))+(((-2.78560232882098)*pz))+(((-0.783037727200315)*x5208*x5224))+((x5212*x5226))+(((-2.59454291699209e-6)*x5226))+(((0.783037727200315)*x5211*x5224))+(((0.350613907701634)*x5206*x5216))+(((-1.0)*sj0*x5208*x5219))+(((2.59454291699209e-6)*x5206*x5207))+(((-1.0)*x5219*x5225))+((sj0*x5211*x5219))+(((-1.0)*x5207*x5212*x5214))+(((0.933176780155028)*sj4*x5215))+(((-2.59454291699209e-6)*x5208*x5213))+(((-0.783037727200315)*x5209*x5225))+(((-1.0)*x5206*x5207*x5212))+(((-3.09201858499129e-6)*x5218))+(((2.33742605134422)*x5222))+((x5208*x5212*x5213))+(((0.783037727200315)*cj6*x5206*x5209))+(((4.2073668924196e-7)*x5225))+(((-1.0)*x5211*x5223))+(((2.59454291699209e-6)*x5207*x5214))+((x5208*x5223))), ((((0.783037727200315)*sj4*x5215))+(((-1.0)*x5208*x5213*x5217))+(((-3.09201858499129e-6)*x5206*x5207))+(((-1.0)*x5208*x5220))+(((5.01408419187776e-7)*cj6*x5206))+(((-2.78560232882098)*x5222))+(((-1.0)*x5217*x5226))+(((3.09201858499129e-6)*x5208*x5213))+((cj4*r10*x5205*x5213))+((sj0*x5208*x5221))+(((-2.33742605134422)*pz))+(((-2.59454291699209e-6)*x5218))+(((0.933176780155028)*x5208*x5224))+(((-0.417840349323147)*x5206*x5216))+(((0.350613907701634)*x5215))+((x5221*x5225))+(((-1.0)*sj0*x5211*x5221))+((x5212*x5218))+(((-3.09201858499129e-6)*x5207*x5214))+(((-1.0)*x5205*x5206*x5209))+((cj4*cj5*x5205*x5206))+(((0.933176780155028)*x5209*x5225))+(((-5.01408419187776e-7)*x5225))+(((-2.78560232882098)*x5210))+(((3.09201858499129e-6)*x5226))+(((-1.0)*x5205*x5209*x5214))+((x5211*x5220))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x5227=IKsin(j1);
IkReal x5228=IKcos(j1);
IkReal x5229=(cj5*sj4);
IkReal x5230=((0.15)*sj5);
IkReal x5231=(cj3*cj6);
IkReal x5232=((1.8e-7)*sj0);
IkReal x5233=((1.11e-6)*cj5);
IkReal x5234=(cj0*r00);
IkReal x5235=((1.0)*pz);
IkReal x5236=(r11*sj6);
IkReal x5237=((0.335)*sj6);
IkReal x5238=((0.335)*cj6);
IkReal x5239=(cj6*sj3);
IkReal x5240=(r10*sj0);
IkReal x5241=(cj4*r10);
IkReal x5242=(sj0*x5238);
IkReal x5243=((0.21066117)*x5227);
IkReal x5244=((0.17676784)*x5228);
IkReal x5245=((0.17676784)*x5227);
IkReal x5246=(cj0*r01*sj6);
IkReal x5247=((0.335)*cj4*sj5);
IkReal x5248=((1.0)*py*sj0);
IkReal x5249=(sj0*x5236);
IkReal x5250=((0.335)*sj4*sj5);
IkReal x5251=((0.15)*cj5*r22);
IkReal x5252=((0.335)*cj4*cj5);
IkReal x5253=((0.21066117)*x5228);
IkReal x5254=((1.0)*cj0*px);
IkReal x5255=((1.11e-6)*r22*sj5);
IkReal x5256=(sj3*x5249);
evalcond[0]=((((-1.0)*x5235))+(((-1.0)*x5244))+(((-1.0)*x5243))+(((-1.0)*x5255))+(((0.335)*r22*x5229))+x5251+((r22*x5247)));
evalcond[1]=((((-1.0)*cj6*x5233*x5234))+((cj4*cj5*x5238*x5240))+(((-1.0)*sj4*sj5*x5238*x5240))+(((-1.0)*cj6*x5230*x5240))+(((-1.0)*cj6*x5233*x5240))+((cj6*r10*x5232))+(((-1.0)*cj6*x5230*x5234))+(((-1.0)*x5248))+(((-1.0)*x5249*x5252))+(((-1.0)*x5253))+(((-1.0)*x5254))+(((-1.0)*x5232*x5236))+x5245+((x5233*x5249))+((x5233*x5246))+(((-1.0)*cj0*cj4*cj5*r01*x5237))+(((-1.8e-7)*x5246))+((x5249*x5250))+((x5230*x5246))+((x5230*x5249))+(((-1.0)*sj4*sj5*x5234*x5238))+((cj4*cj5*x5234*x5238))+((cj0*r01*sj4*sj5*x5237))+(((1.8e-7)*cj6*x5234)));
evalcond[2]=(((x5237*x5240))+(((-1.0)*sj3*x5243))+(((-1.0)*sj3*x5244))+((r11*x5242))+(((-1.0)*sj3*x5235))+((sj3*x5251))+(((-1.0)*sj3*x5255))+((cj0*r01*x5238))+((x5234*x5237)));
evalcond[3]=((((-1.0)*cj0*cj4*r01*sj5*x5237))+(((-1.0)*x5247*x5249))+((x5229*x5234*x5238))+(((-1.0)*cj0*r01*x5229*x5237))+((x5229*x5238*x5240))+((cj3*x5251))+(((-0.335)*x5229*x5249))+(((-1.0)*cj3*x5243))+(((-1.0)*cj3*x5244))+((cj4*sj5*x5238*x5240))+(((-1.0)*cj3*x5235))+(((-1.0)*cj3*x5255))+((cj4*sj5*x5234*x5238)));
evalcond[4]=(((sj3*x5245))+((sj3*x5233*x5246))+(((-1.0)*sj3*x5248))+((sj3*x5230*x5246))+(((-1.0)*sj3*x5232*x5236))+(((-1.0)*sj3*x5254))+(((-1.0)*sj3*x5253))+(((-1.0)*x5230*x5239*x5240))+((x5233*x5256))+(((-1.0)*x5233*x5239*x5240))+(((-1.8e-7)*sj3*x5246))+(((1.8e-7)*x5234*x5239))+((x5230*x5256))+(((-1.0)*x5233*x5234*x5239))+(((-1.0)*x5230*x5234*x5239))+((r10*x5232*x5239)));
evalcond[5]=(((r22*x5252))+((cj3*x5230*x5246))+((cj3*x5230*x5249))+(((-1.0)*x5231*x5233*x5234))+((cj3*x5245))+(((-1.0)*r22*x5250))+(((-1.0)*cj3*x5248))+((cj3*x5233*x5249))+((cj3*x5233*x5246))+(((1.8e-7)*x5231*x5234))+(((-1.0)*x5230*x5231*x5234))+(((-1.8e-7)*cj3*x5246))+(((-1.0)*x5230*x5231*x5240))+(((-1.0)*cj3*x5232*x5236))+(((-1.0)*cj3*x5254))+(((-1.0)*cj3*x5253))+((r10*x5231*x5232))+(((-1.0)*x5231*x5233*x5240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5257=((1.0)*cj1);
IkReal x5258=(cj4*r22*sj5);
IkReal x5259=(cj5*r22*sj4);
if( IKabs(((((-1.0)*x5257*x5259))+(((-1.0)*x5257*x5258)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x5259))+((sj1*x5258)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5257*x5259))+(((-1.0)*x5257*x5258))))+IKsqr((((sj1*x5259))+((sj1*x5258))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x5257*x5259))+(((-1.0)*x5257*x5258))), (((sj1*x5259))+((sj1*x5258))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5260=IKsin(j2);
IkReal x5261=IKcos(j2);
IkReal x5262=(sj0*sj5);
IkReal x5263=(r11*sj6);
IkReal x5264=((1.0)*cj6);
IkReal x5265=(cj0*r01);
IkReal x5266=(cj4*r10);
IkReal x5267=((1.0)*sj1);
IkReal x5268=(cj0*r00);
IkReal x5269=((1.8e-7)*cj6);
IkReal x5270=(cj5*sj4);
IkReal x5271=(cj6*r10);
IkReal x5272=(sj4*sj5);
IkReal x5273=(r10*sj0);
IkReal x5274=(cj5*cj6);
IkReal x5275=((0.15)*sj5);
IkReal x5276=((1.0)*sj0);
IkReal x5277=((1.0)*sj6);
IkReal x5278=(cj4*cj5);
IkReal x5279=(cj4*sj5);
IkReal x5280=(cj1*x5260);
IkReal x5281=((1.11e-6)*cj5*sj0);
IkReal x5282=(sj1*x5261);
IkReal x5283=((1.0)*cj1*x5261);
evalcond[0]=((((-1.0)*sj3*x5260*x5267))+(((-1.0)*sj3*x5283)));
evalcond[1]=(((r22*x5270))+((r22*x5279))+x5280+(((-1.0)*x5261*x5267)));
evalcond[2]=(((r22*x5278))+(((-1.0)*cj3*x5260*x5267))+(((-1.0)*cj3*x5283))+(((-1.0)*r22*x5272)));
evalcond[3]=((((0.15)*cj5*r22))+(((-1.11e-6)*r22*sj5))+(((-0.21066117)*sj1))+(((0.335)*x5282))+(((-1.0)*pz))+(((-0.335)*x5280))+(((-0.17676784)*cj1)));
evalcond[4]=((((-1.0)*x5264*x5265))+((sj3*x5282))+(((-1.0)*sj3*x5280))+(((-1.0)*x5268*x5277))+(((-1.0)*r11*sj0*x5264))+(((-1.0)*x5273*x5277)));
evalcond[5]=(((cj4*x5268*x5274))+(((-1.0)*r10*sj4*x5262*x5264))+((sj0*x5266*x5274))+(((-1.0)*x5283))+(((-1.0)*x5265*x5277*x5278))+((sj6*x5265*x5272))+(((-1.0)*x5264*x5268*x5272))+((sj4*x5262*x5263))+(((-1.0)*x5260*x5267))+(((-1.0)*x5263*x5276*x5278)));
evalcond[6]=((((-1.0)*cj3*x5280))+((sj0*x5263*x5270))+(((-1.0)*x5262*x5264*x5266))+((sj6*x5265*x5279))+((sj6*x5265*x5270))+(((-1.0)*x5264*x5270*x5273))+((cj4*x5262*x5263))+(((-1.0)*x5264*x5268*x5279))+(((-1.0)*x5264*x5268*x5270))+((cj3*x5282)));
evalcond[7]=((((-1.0)*cj6*x5268*x5275))+(((-0.21066117)*cj1))+(((1.11e-6)*cj5*sj6*x5265))+(((0.335)*sj1*x5260))+(((0.17676784)*sj1))+(((-1.0)*x5271*x5281))+((sj6*x5265*x5275))+((x5269*x5273))+(((0.15)*x5262*x5263))+((x5268*x5269))+((x5263*x5281))+(((-1.11e-6)*x5268*x5274))+(((-1.0)*py*x5276))+(((-1.8e-7)*sj0*x5263))+(((-1.0)*cj0*px))+(((0.335)*cj1*x5261))+(((-0.15)*x5262*x5271))+(((-1.8e-7)*sj6*x5265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5284=(cj4*cj5);
IkReal x5285=(cj6*r10);
IkReal x5286=(r11*sj6);
IkReal x5287=(r01*sj6);
IkReal x5288=(sj4*sj5);
IkReal x5289=((2000.0)*sj6);
IkReal x5290=((2000.0)*cj6);
IkReal x5291=(cj6*r00);
CheckValue<IkReal> x5292 = IKatan2WithCheck(IkReal(((((-1.0)*x5284*x5285))+(((-1.0)*x5286*x5288))+((x5284*x5286))+((x5285*x5288)))),IkReal((((x5288*x5291))+((x5284*x5287))+(((-1.0)*x5287*x5288))+(((-1.0)*x5284*x5291)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5292.valid){
continue;
}
CheckValue<IkReal> x5293=IKPowWithIntegerCheck(IKsign((((rxp0_2*(((((-1.0)*x5284*x5290))+((x5288*x5290))))))+((rxp1_2*(((((-1.0)*x5288*x5289))+((x5284*x5289)))))))),-1);
if(!x5293.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x5292.value)+(((1.5707963267949)*(x5293.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5294=IKcos(j0);
IkReal x5295=IKsin(j0);
IkReal x5296=(r01*sj6);
IkReal x5297=((0.15)*sj5);
IkReal x5298=(cj5*sj4);
IkReal x5299=((1.0)*cj4);
IkReal x5300=(cj6*r00);
IkReal x5301=(sj4*sj5);
IkReal x5302=((1.11e-6)*cj5);
IkReal x5303=(sj5*x5295);
IkReal x5304=(cj5*x5295);
IkReal x5305=((1.0)*x5295);
IkReal x5306=((1.8e-7)*x5295);
IkReal x5307=((1.0)*sj4*x5300);
IkReal x5308=(cj6*r10*x5294);
IkReal x5309=(r11*sj6*x5294);
evalcond[0]=((((-1.0)*cj6*r01*x5305))+(((-1.0)*r00*sj6*x5305))+((r10*sj6*x5294))+((cj6*r11*x5294))+(((-1.0)*cj3)));
evalcond[1]=(((x5301*x5308))+((cj4*cj5*x5309))+((cj4*x5300*x5304))+((x5295*x5296*x5301))+(((-1.0)*x5296*x5299*x5304))+(((-1.0)*x5300*x5301*x5305))+(((-1.0)*x5301*x5309))+(((-1.0)*cj5*x5299*x5308)));
evalcond[2]=((((-1.0)*x5298*x5309))+sj3+(((-1.0)*sj5*x5299*x5309))+(((-1.0)*x5299*x5300*x5303))+((cj4*x5296*x5303))+((x5295*x5296*x5298))+((x5298*x5308))+((cj4*sj5*x5308))+(((-1.0)*x5298*x5300*x5305)));
evalcond[3]=((-0.0005)+(((-1.0)*x5297*x5309))+((x5302*x5308))+((x5297*x5308))+((x5300*x5306))+(((-1.0)*x5296*x5306))+(((-1.0)*px*x5305))+((x5295*x5296*x5302))+(((-1.0)*x5302*x5309))+(((-1.8e-7)*x5308))+(((1.8e-7)*x5309))+((x5295*x5296*x5297))+(((-1.0)*x5295*x5297*x5300))+(((-1.0)*x5295*x5300*x5302))+((py*x5294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5310=((0.933176780155028)*cj6);
IkReal x5311=(cj0*r00);
IkReal x5312=(cj5*cj6);
IkReal x5313=(r11*sj6);
IkReal x5314=(sj4*sj5);
IkReal x5315=(cj0*px);
IkReal x5316=(cj6*r10);
IkReal x5317=((0.783037727200315)*cj4);
IkReal x5318=(cj5*sj0);
IkReal x5319=(r10*sj0);
IkReal x5320=(cj5*r22);
IkReal x5321=(cj6*sj5);
IkReal x5322=((0.933176780155028)*cj4);
IkReal x5323=(r22*sj5);
IkReal x5324=((0.350613907701634)*sj5);
IkReal x5325=((5.01408419187776e-7)*sj0);
IkReal x5326=((0.417840349323147)*sj5);
IkReal x5327=(py*sj0);
IkReal x5328=((4.2073668924196e-7)*sj0);
IkReal x5329=(sj0*x5314);
IkReal x5330=(cj0*r01*sj6);
IkReal x5331=(cj5*x5330);
if( IKabs((((x5322*x5323))+(((-3.09201858499129e-6)*x5323))+(((-2.78560232882098)*pz))+(((0.350613907701634)*x5311*x5321))+(((0.783037727200315)*cj6*x5311*x5314))+(((-2.59454291699209e-6)*x5313*x5318))+(((-1.0)*x5316*x5328))+(((-0.783037727200315)*x5314*x5330))+(((-2.59454291699209e-6)*x5331))+(((2.33742605134422)*x5327))+(((-4.2073668924196e-7)*cj6*x5311))+(((0.933176780155028)*sj4*x5320))+(((-1.0)*sj0*x5313*x5324))+(((4.2073668924196e-7)*x5330))+((sj0*x5316*x5324))+(((-1.0)*x5312*x5317*x5319))+(((-1.0)*x5311*x5312*x5317))+(((2.59454291699209e-6)*x5312*x5319))+(((-0.783037727200315)*x5313*x5329))+((x5313*x5328))+(((-1.0)*x5324*x5330))+(((0.417840349323147)*x5320))+(((2.33742605134422)*x5315))+(((0.783037727200315)*x5316*x5329))+((x5317*x5331))+(((2.59454291699209e-6)*x5311*x5312))+((x5313*x5317*x5318)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*r10*x5310*x5318))+((cj4*cj5*x5310*x5311))+((sj0*x5313*x5326))+(((-1.0)*sj0*x5316*x5326))+(((-5.01408419187776e-7)*x5330))+(((3.09201858499129e-6)*x5313*x5318))+(((-2.59454291699209e-6)*x5323))+(((0.933176780155028)*x5313*x5329))+(((3.09201858499129e-6)*x5331))+((x5326*x5330))+(((-2.33742605134422)*pz))+(((-1.0)*x5310*x5314*x5319))+(((-2.78560232882098)*x5315))+(((-1.0)*x5313*x5318*x5322))+(((0.783037727200315)*sj4*x5320))+(((5.01408419187776e-7)*cj6*x5311))+(((-0.417840349323147)*x5311*x5321))+(((-1.0)*x5322*x5331))+(((0.350613907701634)*x5320))+(((-3.09201858499129e-6)*x5311*x5312))+(((0.933176780155028)*x5314*x5330))+(((-1.0)*x5313*x5325))+(((-1.0)*x5310*x5311*x5314))+(((-3.09201858499129e-6)*x5312*x5319))+((x5317*x5323))+(((-2.78560232882098)*x5327))+((x5316*x5325)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x5322*x5323))+(((-3.09201858499129e-6)*x5323))+(((-2.78560232882098)*pz))+(((0.350613907701634)*x5311*x5321))+(((0.783037727200315)*cj6*x5311*x5314))+(((-2.59454291699209e-6)*x5313*x5318))+(((-1.0)*x5316*x5328))+(((-0.783037727200315)*x5314*x5330))+(((-2.59454291699209e-6)*x5331))+(((2.33742605134422)*x5327))+(((-4.2073668924196e-7)*cj6*x5311))+(((0.933176780155028)*sj4*x5320))+(((-1.0)*sj0*x5313*x5324))+(((4.2073668924196e-7)*x5330))+((sj0*x5316*x5324))+(((-1.0)*x5312*x5317*x5319))+(((-1.0)*x5311*x5312*x5317))+(((2.59454291699209e-6)*x5312*x5319))+(((-0.783037727200315)*x5313*x5329))+((x5313*x5328))+(((-1.0)*x5324*x5330))+(((0.417840349323147)*x5320))+(((2.33742605134422)*x5315))+(((0.783037727200315)*x5316*x5329))+((x5317*x5331))+(((2.59454291699209e-6)*x5311*x5312))+((x5313*x5317*x5318))))+IKsqr((((cj4*r10*x5310*x5318))+((cj4*cj5*x5310*x5311))+((sj0*x5313*x5326))+(((-1.0)*sj0*x5316*x5326))+(((-5.01408419187776e-7)*x5330))+(((3.09201858499129e-6)*x5313*x5318))+(((-2.59454291699209e-6)*x5323))+(((0.933176780155028)*x5313*x5329))+(((3.09201858499129e-6)*x5331))+((x5326*x5330))+(((-2.33742605134422)*pz))+(((-1.0)*x5310*x5314*x5319))+(((-2.78560232882098)*x5315))+(((-1.0)*x5313*x5318*x5322))+(((0.783037727200315)*sj4*x5320))+(((5.01408419187776e-7)*cj6*x5311))+(((-0.417840349323147)*x5311*x5321))+(((-1.0)*x5322*x5331))+(((0.350613907701634)*x5320))+(((-3.09201858499129e-6)*x5311*x5312))+(((0.933176780155028)*x5314*x5330))+(((-1.0)*x5313*x5325))+(((-1.0)*x5310*x5311*x5314))+(((-3.09201858499129e-6)*x5312*x5319))+((x5317*x5323))+(((-2.78560232882098)*x5327))+((x5316*x5325))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((x5322*x5323))+(((-3.09201858499129e-6)*x5323))+(((-2.78560232882098)*pz))+(((0.350613907701634)*x5311*x5321))+(((0.783037727200315)*cj6*x5311*x5314))+(((-2.59454291699209e-6)*x5313*x5318))+(((-1.0)*x5316*x5328))+(((-0.783037727200315)*x5314*x5330))+(((-2.59454291699209e-6)*x5331))+(((2.33742605134422)*x5327))+(((-4.2073668924196e-7)*cj6*x5311))+(((0.933176780155028)*sj4*x5320))+(((-1.0)*sj0*x5313*x5324))+(((4.2073668924196e-7)*x5330))+((sj0*x5316*x5324))+(((-1.0)*x5312*x5317*x5319))+(((-1.0)*x5311*x5312*x5317))+(((2.59454291699209e-6)*x5312*x5319))+(((-0.783037727200315)*x5313*x5329))+((x5313*x5328))+(((-1.0)*x5324*x5330))+(((0.417840349323147)*x5320))+(((2.33742605134422)*x5315))+(((0.783037727200315)*x5316*x5329))+((x5317*x5331))+(((2.59454291699209e-6)*x5311*x5312))+((x5313*x5317*x5318))), (((cj4*r10*x5310*x5318))+((cj4*cj5*x5310*x5311))+((sj0*x5313*x5326))+(((-1.0)*sj0*x5316*x5326))+(((-5.01408419187776e-7)*x5330))+(((3.09201858499129e-6)*x5313*x5318))+(((-2.59454291699209e-6)*x5323))+(((0.933176780155028)*x5313*x5329))+(((3.09201858499129e-6)*x5331))+((x5326*x5330))+(((-2.33742605134422)*pz))+(((-1.0)*x5310*x5314*x5319))+(((-2.78560232882098)*x5315))+(((-1.0)*x5313*x5318*x5322))+(((0.783037727200315)*sj4*x5320))+(((5.01408419187776e-7)*cj6*x5311))+(((-0.417840349323147)*x5311*x5321))+(((-1.0)*x5322*x5331))+(((0.350613907701634)*x5320))+(((-3.09201858499129e-6)*x5311*x5312))+(((0.933176780155028)*x5314*x5330))+(((-1.0)*x5313*x5325))+(((-1.0)*x5310*x5311*x5314))+(((-3.09201858499129e-6)*x5312*x5319))+((x5317*x5323))+(((-2.78560232882098)*x5327))+((x5316*x5325))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x5332=IKsin(j1);
IkReal x5333=IKcos(j1);
IkReal x5334=(cj5*sj4);
IkReal x5335=((0.15)*sj5);
IkReal x5336=(cj3*cj6);
IkReal x5337=((1.8e-7)*sj0);
IkReal x5338=((1.11e-6)*cj5);
IkReal x5339=(cj0*r00);
IkReal x5340=((1.0)*pz);
IkReal x5341=(r11*sj6);
IkReal x5342=((0.335)*sj6);
IkReal x5343=((0.335)*cj6);
IkReal x5344=(cj6*sj3);
IkReal x5345=(r10*sj0);
IkReal x5346=(cj4*r10);
IkReal x5347=(sj0*x5343);
IkReal x5348=((0.21066117)*x5332);
IkReal x5349=((0.17676784)*x5333);
IkReal x5350=((0.17676784)*x5332);
IkReal x5351=(cj0*r01*sj6);
IkReal x5352=((0.335)*cj4*sj5);
IkReal x5353=((1.0)*py*sj0);
IkReal x5354=(sj0*x5341);
IkReal x5355=((0.335)*sj4*sj5);
IkReal x5356=((0.15)*cj5*r22);
IkReal x5357=((0.335)*cj4*cj5);
IkReal x5358=((0.21066117)*x5333);
IkReal x5359=((1.0)*cj0*px);
IkReal x5360=((1.11e-6)*r22*sj5);
IkReal x5361=(sj3*x5354);
evalcond[0]=(x5356+((r22*x5352))+(((-1.0)*x5340))+(((-1.0)*x5349))+(((-1.0)*x5348))+(((0.335)*r22*x5334))+(((-1.0)*x5360)));
evalcond[1]=((((-1.0)*cj0*cj4*cj5*r01*x5342))+(((-1.0)*cj6*x5338*x5339))+x5350+(((-1.0)*x5353))+(((-1.0)*x5358))+(((-1.0)*x5359))+((cj4*cj5*x5339*x5343))+(((-1.0)*x5354*x5357))+((cj0*r01*sj4*sj5*x5342))+(((-1.0)*cj6*x5335*x5339))+((x5354*x5355))+(((-1.0)*sj4*sj5*x5339*x5343))+((cj4*cj5*x5343*x5345))+(((1.8e-7)*cj6*x5339))+((cj6*r10*x5337))+(((-1.8e-7)*x5351))+((x5335*x5354))+((x5335*x5351))+(((-1.0)*cj6*x5335*x5345))+((x5338*x5354))+((x5338*x5351))+(((-1.0)*x5337*x5341))+(((-1.0)*cj6*x5338*x5345))+(((-1.0)*sj4*sj5*x5343*x5345)));
evalcond[2]=((((-1.0)*sj3*x5349))+(((-1.0)*sj3*x5348))+(((-1.0)*sj3*x5340))+((x5342*x5345))+((sj3*x5356))+((r11*x5347))+(((-1.0)*sj3*x5360))+((x5339*x5342))+((cj0*r01*x5343)));
evalcond[3]=(((cj3*x5356))+((x5334*x5339*x5343))+(((-0.335)*x5334*x5354))+(((-1.0)*x5352*x5354))+(((-1.0)*cj3*x5348))+(((-1.0)*cj3*x5349))+(((-1.0)*cj3*x5340))+(((-1.0)*cj0*r01*x5334*x5342))+((cj4*sj5*x5343*x5345))+(((-1.0)*cj3*x5360))+((x5334*x5343*x5345))+(((-1.0)*cj0*cj4*r01*sj5*x5342))+((cj4*sj5*x5339*x5343)));
evalcond[4]=(((x5335*x5361))+(((-1.8e-7)*sj3*x5351))+(((-1.0)*x5335*x5339*x5344))+((x5338*x5361))+(((-1.0)*sj3*x5337*x5341))+((r10*x5337*x5344))+((sj3*x5335*x5351))+((sj3*x5350))+(((-1.0)*x5338*x5344*x5345))+((sj3*x5338*x5351))+(((-1.0)*x5338*x5339*x5344))+(((1.8e-7)*x5339*x5344))+(((-1.0)*x5335*x5344*x5345))+(((-1.0)*sj3*x5358))+(((-1.0)*sj3*x5359))+(((-1.0)*sj3*x5353)));
evalcond[5]=(((cj3*x5350))+(((-1.0)*cj3*x5337*x5341))+(((-1.0)*cj3*x5359))+(((-1.0)*cj3*x5358))+(((-1.0)*cj3*x5353))+(((-1.0)*x5335*x5336*x5339))+((r10*x5336*x5337))+((r22*x5357))+(((-1.0)*x5336*x5338*x5345))+((cj3*x5335*x5351))+((cj3*x5335*x5354))+(((-1.0)*r22*x5355))+((cj3*x5338*x5354))+((cj3*x5338*x5351))+(((-1.0)*x5336*x5338*x5339))+(((1.8e-7)*x5336*x5339))+(((-1.0)*x5335*x5336*x5345))+(((-1.8e-7)*cj3*x5351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5362=((1.0)*cj1);
IkReal x5363=(cj4*r22*sj5);
IkReal x5364=(cj5*r22*sj4);
if( IKabs(((((-1.0)*x5362*x5363))+(((-1.0)*x5362*x5364)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x5364))+((sj1*x5363)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5362*x5363))+(((-1.0)*x5362*x5364))))+IKsqr((((sj1*x5364))+((sj1*x5363))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x5362*x5363))+(((-1.0)*x5362*x5364))), (((sj1*x5364))+((sj1*x5363))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5365=IKsin(j2);
IkReal x5366=IKcos(j2);
IkReal x5367=(sj0*sj5);
IkReal x5368=(r11*sj6);
IkReal x5369=((1.0)*cj6);
IkReal x5370=(cj0*r01);
IkReal x5371=(cj4*r10);
IkReal x5372=((1.0)*sj1);
IkReal x5373=(cj0*r00);
IkReal x5374=((1.8e-7)*cj6);
IkReal x5375=(cj5*sj4);
IkReal x5376=(cj6*r10);
IkReal x5377=(sj4*sj5);
IkReal x5378=(r10*sj0);
IkReal x5379=(cj5*cj6);
IkReal x5380=((0.15)*sj5);
IkReal x5381=((1.0)*sj0);
IkReal x5382=((1.0)*sj6);
IkReal x5383=(cj4*cj5);
IkReal x5384=(cj4*sj5);
IkReal x5385=(cj1*x5365);
IkReal x5386=((1.11e-6)*cj5*sj0);
IkReal x5387=(sj1*x5366);
IkReal x5388=((1.0)*cj1*x5366);
evalcond[0]=((((-1.0)*sj3*x5365*x5372))+(((-1.0)*sj3*x5388)));
evalcond[1]=(x5385+((r22*x5375))+(((-1.0)*x5366*x5372))+((r22*x5384)));
evalcond[2]=((((-1.0)*cj3*x5365*x5372))+(((-1.0)*cj3*x5388))+(((-1.0)*r22*x5377))+((r22*x5383)));
evalcond[3]=((((0.15)*cj5*r22))+(((-1.11e-6)*r22*sj5))+(((-0.21066117)*sj1))+(((0.335)*x5387))+(((-1.0)*pz))+(((-0.17676784)*cj1))+(((-0.335)*x5385)));
evalcond[4]=((((-1.0)*sj3*x5385))+(((-1.0)*x5373*x5382))+((sj3*x5387))+(((-1.0)*r11*sj0*x5369))+(((-1.0)*x5369*x5370))+(((-1.0)*x5378*x5382)));
evalcond[5]=(((cj4*x5373*x5379))+(((-1.0)*r10*sj4*x5367*x5369))+(((-1.0)*x5370*x5382*x5383))+((sj6*x5370*x5377))+((sj0*x5371*x5379))+(((-1.0)*x5388))+(((-1.0)*x5365*x5372))+(((-1.0)*x5369*x5373*x5377))+(((-1.0)*x5368*x5381*x5383))+((sj4*x5367*x5368)));
evalcond[6]=(((sj0*x5368*x5375))+((sj6*x5370*x5384))+(((-1.0)*x5367*x5369*x5371))+((cj3*x5387))+((cj4*x5367*x5368))+((sj6*x5370*x5375))+(((-1.0)*x5369*x5373*x5384))+(((-1.0)*cj3*x5385))+(((-1.0)*x5369*x5375*x5378))+(((-1.0)*x5369*x5373*x5375)));
evalcond[7]=((((0.15)*x5367*x5368))+(((-0.21066117)*cj1))+(((-1.8e-7)*sj6*x5370))+((sj6*x5370*x5380))+(((0.335)*cj1*x5366))+(((0.17676784)*sj1))+(((-0.15)*x5367*x5376))+(((-1.8e-7)*sj0*x5368))+(((0.335)*sj1*x5365))+(((-1.0)*x5376*x5386))+(((1.11e-6)*cj5*sj6*x5370))+(((-1.0)*py*x5381))+(((-1.11e-6)*x5373*x5379))+(((-1.0)*cj6*x5373*x5380))+((x5373*x5374))+((x5368*x5386))+((x5374*x5378))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5389=((1.0)*sj6);
IkReal x5390=(cj6*r00);
IkReal x5391=(cj6*r10);
IkReal x5392=(cj3*sj4*sj5);
IkReal x5393=((1.0)*cj4*cj5);
IkReal x5394=(cj3*cj4*cj5*sj6);
CheckValue<IkReal> x5395=IKPowWithIntegerCheck(IKsign((r22*((((sj4*sj5))+(((-1.0)*x5393)))))),-1);
if(!x5395.valid){
continue;
}
CheckValue<IkReal> x5396 = IKatan2WithCheck(IkReal((((x5391*x5392))+(((-1.0)*r11*x5389*x5392))+((r11*x5394))+(((-1.0)*cj3*x5391*x5393)))),IkReal(((((-1.0)*r01*x5389*x5392))+(((-1.0)*cj3*x5390*x5393))+((r01*x5394))+((x5390*x5392)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5396.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5395.value)))+(x5396.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5397=IKcos(j0);
IkReal x5398=IKsin(j0);
IkReal x5399=(r01*sj6);
IkReal x5400=((0.15)*sj5);
IkReal x5401=(cj5*sj4);
IkReal x5402=((1.0)*cj4);
IkReal x5403=(cj6*r00);
IkReal x5404=(sj4*sj5);
IkReal x5405=((1.11e-6)*cj5);
IkReal x5406=(sj5*x5398);
IkReal x5407=(cj5*x5398);
IkReal x5408=((1.0)*x5398);
IkReal x5409=((1.8e-7)*x5398);
IkReal x5410=((1.0)*sj4*x5403);
IkReal x5411=(cj6*r10*x5397);
IkReal x5412=(r11*sj6*x5397);
evalcond[0]=((((-1.0)*cj6*r01*x5408))+((r10*sj6*x5397))+(((-1.0)*r00*sj6*x5408))+((cj6*r11*x5397))+(((-1.0)*cj3)));
evalcond[1]=((((-1.0)*cj5*x5402*x5411))+(((-1.0)*x5399*x5402*x5407))+((x5404*x5411))+((x5398*x5399*x5404))+((cj4*x5403*x5407))+(((-1.0)*x5404*x5412))+((cj4*cj5*x5412))+(((-1.0)*x5403*x5404*x5408)));
evalcond[2]=(sj3+((cj4*x5399*x5406))+(((-1.0)*x5401*x5403*x5408))+(((-1.0)*x5401*x5412))+((x5401*x5411))+((cj4*sj5*x5411))+((x5398*x5399*x5401))+(((-1.0)*x5402*x5403*x5406))+(((-1.0)*sj5*x5402*x5412)));
evalcond[3]=((-0.0005)+(((-1.8e-7)*x5411))+((py*x5397))+(((1.8e-7)*x5412))+((x5400*x5411))+(((-1.0)*x5399*x5409))+((x5405*x5411))+(((-1.0)*x5398*x5403*x5405))+((x5398*x5399*x5400))+((x5398*x5399*x5405))+(((-1.0)*px*x5408))+(((-1.0)*x5398*x5400*x5403))+(((-1.0)*x5400*x5412))+((x5403*x5409))+(((-1.0)*x5405*x5412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5413=((0.933176780155028)*cj6);
IkReal x5414=(cj0*r00);
IkReal x5415=(cj5*cj6);
IkReal x5416=(r11*sj6);
IkReal x5417=(sj4*sj5);
IkReal x5418=(cj0*px);
IkReal x5419=(cj6*r10);
IkReal x5420=((0.783037727200315)*cj4);
IkReal x5421=(cj5*sj0);
IkReal x5422=(r10*sj0);
IkReal x5423=(cj5*r22);
IkReal x5424=(cj6*sj5);
IkReal x5425=((0.933176780155028)*cj4);
IkReal x5426=(r22*sj5);
IkReal x5427=((0.350613907701634)*sj5);
IkReal x5428=((5.01408419187776e-7)*sj0);
IkReal x5429=((0.417840349323147)*sj5);
IkReal x5430=(py*sj0);
IkReal x5431=((4.2073668924196e-7)*sj0);
IkReal x5432=(sj0*x5417);
IkReal x5433=(cj0*r01*sj6);
IkReal x5434=(cj5*x5433);
if( IKabs(((((-4.2073668924196e-7)*cj6*x5414))+(((-1.0)*x5419*x5431))+(((0.350613907701634)*x5414*x5424))+(((-2.78560232882098)*pz))+(((-1.0)*x5427*x5433))+(((4.2073668924196e-7)*x5433))+(((2.33742605134422)*x5418))+(((0.417840349323147)*x5423))+(((-0.783037727200315)*x5416*x5432))+(((-2.59454291699209e-6)*x5434))+(((2.33742605134422)*x5430))+(((-1.0)*x5414*x5415*x5420))+(((-2.59454291699209e-6)*x5416*x5421))+(((2.59454291699209e-6)*x5414*x5415))+(((-1.0)*sj0*x5416*x5427))+(((0.933176780155028)*sj4*x5423))+((x5416*x5420*x5421))+(((-0.783037727200315)*x5417*x5433))+(((-1.0)*x5415*x5420*x5422))+(((2.59454291699209e-6)*x5415*x5422))+((sj0*x5419*x5427))+(((0.783037727200315)*x5419*x5432))+(((0.783037727200315)*cj6*x5414*x5417))+((x5416*x5431))+((x5425*x5426))+(((-3.09201858499129e-6)*x5426))+((x5420*x5434)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((5.01408419187776e-7)*cj6*x5414))+(((-1.0)*x5413*x5414*x5417))+(((-1.0)*sj0*x5419*x5429))+(((-1.0)*x5416*x5421*x5425))+(((-2.78560232882098)*x5418))+(((-1.0)*x5413*x5417*x5422))+(((-3.09201858499129e-6)*x5414*x5415))+(((3.09201858499129e-6)*x5416*x5421))+((sj0*x5416*x5429))+(((-2.78560232882098)*x5430))+(((-1.0)*x5425*x5434))+(((0.933176780155028)*x5416*x5432))+(((-2.33742605134422)*pz))+(((-5.01408419187776e-7)*x5433))+((x5419*x5428))+((cj4*cj5*x5413*x5414))+(((-2.59454291699209e-6)*x5426))+(((0.783037727200315)*sj4*x5423))+((x5420*x5426))+(((-0.417840349323147)*x5414*x5424))+(((-1.0)*x5416*x5428))+(((0.350613907701634)*x5423))+((cj4*r10*x5413*x5421))+(((-3.09201858499129e-6)*x5415*x5422))+((x5429*x5433))+(((3.09201858499129e-6)*x5434))+(((0.933176780155028)*x5417*x5433)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-4.2073668924196e-7)*cj6*x5414))+(((-1.0)*x5419*x5431))+(((0.350613907701634)*x5414*x5424))+(((-2.78560232882098)*pz))+(((-1.0)*x5427*x5433))+(((4.2073668924196e-7)*x5433))+(((2.33742605134422)*x5418))+(((0.417840349323147)*x5423))+(((-0.783037727200315)*x5416*x5432))+(((-2.59454291699209e-6)*x5434))+(((2.33742605134422)*x5430))+(((-1.0)*x5414*x5415*x5420))+(((-2.59454291699209e-6)*x5416*x5421))+(((2.59454291699209e-6)*x5414*x5415))+(((-1.0)*sj0*x5416*x5427))+(((0.933176780155028)*sj4*x5423))+((x5416*x5420*x5421))+(((-0.783037727200315)*x5417*x5433))+(((-1.0)*x5415*x5420*x5422))+(((2.59454291699209e-6)*x5415*x5422))+((sj0*x5419*x5427))+(((0.783037727200315)*x5419*x5432))+(((0.783037727200315)*cj6*x5414*x5417))+((x5416*x5431))+((x5425*x5426))+(((-3.09201858499129e-6)*x5426))+((x5420*x5434))))+IKsqr(((((5.01408419187776e-7)*cj6*x5414))+(((-1.0)*x5413*x5414*x5417))+(((-1.0)*sj0*x5419*x5429))+(((-1.0)*x5416*x5421*x5425))+(((-2.78560232882098)*x5418))+(((-1.0)*x5413*x5417*x5422))+(((-3.09201858499129e-6)*x5414*x5415))+(((3.09201858499129e-6)*x5416*x5421))+((sj0*x5416*x5429))+(((-2.78560232882098)*x5430))+(((-1.0)*x5425*x5434))+(((0.933176780155028)*x5416*x5432))+(((-2.33742605134422)*pz))+(((-5.01408419187776e-7)*x5433))+((x5419*x5428))+((cj4*cj5*x5413*x5414))+(((-2.59454291699209e-6)*x5426))+(((0.783037727200315)*sj4*x5423))+((x5420*x5426))+(((-0.417840349323147)*x5414*x5424))+(((-1.0)*x5416*x5428))+(((0.350613907701634)*x5423))+((cj4*r10*x5413*x5421))+(((-3.09201858499129e-6)*x5415*x5422))+((x5429*x5433))+(((3.09201858499129e-6)*x5434))+(((0.933176780155028)*x5417*x5433))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-4.2073668924196e-7)*cj6*x5414))+(((-1.0)*x5419*x5431))+(((0.350613907701634)*x5414*x5424))+(((-2.78560232882098)*pz))+(((-1.0)*x5427*x5433))+(((4.2073668924196e-7)*x5433))+(((2.33742605134422)*x5418))+(((0.417840349323147)*x5423))+(((-0.783037727200315)*x5416*x5432))+(((-2.59454291699209e-6)*x5434))+(((2.33742605134422)*x5430))+(((-1.0)*x5414*x5415*x5420))+(((-2.59454291699209e-6)*x5416*x5421))+(((2.59454291699209e-6)*x5414*x5415))+(((-1.0)*sj0*x5416*x5427))+(((0.933176780155028)*sj4*x5423))+((x5416*x5420*x5421))+(((-0.783037727200315)*x5417*x5433))+(((-1.0)*x5415*x5420*x5422))+(((2.59454291699209e-6)*x5415*x5422))+((sj0*x5419*x5427))+(((0.783037727200315)*x5419*x5432))+(((0.783037727200315)*cj6*x5414*x5417))+((x5416*x5431))+((x5425*x5426))+(((-3.09201858499129e-6)*x5426))+((x5420*x5434))), ((((5.01408419187776e-7)*cj6*x5414))+(((-1.0)*x5413*x5414*x5417))+(((-1.0)*sj0*x5419*x5429))+(((-1.0)*x5416*x5421*x5425))+(((-2.78560232882098)*x5418))+(((-1.0)*x5413*x5417*x5422))+(((-3.09201858499129e-6)*x5414*x5415))+(((3.09201858499129e-6)*x5416*x5421))+((sj0*x5416*x5429))+(((-2.78560232882098)*x5430))+(((-1.0)*x5425*x5434))+(((0.933176780155028)*x5416*x5432))+(((-2.33742605134422)*pz))+(((-5.01408419187776e-7)*x5433))+((x5419*x5428))+((cj4*cj5*x5413*x5414))+(((-2.59454291699209e-6)*x5426))+(((0.783037727200315)*sj4*x5423))+((x5420*x5426))+(((-0.417840349323147)*x5414*x5424))+(((-1.0)*x5416*x5428))+(((0.350613907701634)*x5423))+((cj4*r10*x5413*x5421))+(((-3.09201858499129e-6)*x5415*x5422))+((x5429*x5433))+(((3.09201858499129e-6)*x5434))+(((0.933176780155028)*x5417*x5433))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x5435=IKsin(j1);
IkReal x5436=IKcos(j1);
IkReal x5437=(cj5*sj4);
IkReal x5438=((0.15)*sj5);
IkReal x5439=(cj3*cj6);
IkReal x5440=((1.8e-7)*sj0);
IkReal x5441=((1.11e-6)*cj5);
IkReal x5442=(cj0*r00);
IkReal x5443=((1.0)*pz);
IkReal x5444=(r11*sj6);
IkReal x5445=((0.335)*sj6);
IkReal x5446=((0.335)*cj6);
IkReal x5447=(cj6*sj3);
IkReal x5448=(r10*sj0);
IkReal x5449=(cj4*r10);
IkReal x5450=(sj0*x5446);
IkReal x5451=((0.21066117)*x5435);
IkReal x5452=((0.17676784)*x5436);
IkReal x5453=((0.17676784)*x5435);
IkReal x5454=(cj0*r01*sj6);
IkReal x5455=((0.335)*cj4*sj5);
IkReal x5456=((1.0)*py*sj0);
IkReal x5457=(sj0*x5444);
IkReal x5458=((0.335)*sj4*sj5);
IkReal x5459=((0.15)*cj5*r22);
IkReal x5460=((0.335)*cj4*cj5);
IkReal x5461=((0.21066117)*x5436);
IkReal x5462=((1.0)*cj0*px);
IkReal x5463=((1.11e-6)*r22*sj5);
IkReal x5464=(sj3*x5457);
evalcond[0]=(x5459+(((0.335)*r22*x5437))+(((-1.0)*x5443))+((r22*x5455))+(((-1.0)*x5463))+(((-1.0)*x5452))+(((-1.0)*x5451)));
evalcond[1]=(((cj6*r10*x5440))+(((-1.0)*cj0*cj4*cj5*r01*x5445))+((x5438*x5454))+((x5438*x5457))+(((-1.0)*sj4*sj5*x5446*x5448))+((cj0*r01*sj4*sj5*x5445))+x5453+((x5441*x5454))+((x5441*x5457))+((cj4*cj5*x5446*x5448))+(((-1.8e-7)*x5454))+(((-1.0)*cj6*x5438*x5448))+(((-1.0)*cj6*x5438*x5442))+(((-1.0)*x5457*x5460))+(((-1.0)*cj6*x5441*x5442))+(((-1.0)*cj6*x5441*x5448))+(((-1.0)*x5440*x5444))+(((-1.0)*x5462))+(((-1.0)*x5461))+(((1.8e-7)*cj6*x5442))+((cj4*cj5*x5442*x5446))+(((-1.0)*sj4*sj5*x5442*x5446))+(((-1.0)*x5456))+((x5457*x5458)));
evalcond[2]=((((-1.0)*sj3*x5463))+(((-1.0)*sj3*x5452))+(((-1.0)*sj3*x5451))+((sj3*x5459))+((x5445*x5448))+(((-1.0)*sj3*x5443))+((cj0*r01*x5446))+((x5442*x5445))+((r11*x5450)));
evalcond[3]=((((-1.0)*cj0*cj4*r01*sj5*x5445))+(((-1.0)*x5455*x5457))+((cj4*sj5*x5442*x5446))+(((-1.0)*cj0*r01*x5437*x5445))+((cj4*sj5*x5446*x5448))+((x5437*x5442*x5446))+((cj3*x5459))+(((-1.0)*cj3*x5443))+(((-0.335)*x5437*x5457))+((x5437*x5446*x5448))+(((-1.0)*cj3*x5463))+(((-1.0)*cj3*x5451))+(((-1.0)*cj3*x5452)));
evalcond[4]=((((-1.0)*sj3*x5461))+(((-1.0)*sj3*x5462))+(((-1.0)*x5441*x5447*x5448))+(((-1.0)*x5438*x5447*x5448))+(((-1.0)*sj3*x5456))+(((-1.0)*x5441*x5442*x5447))+(((-1.8e-7)*sj3*x5454))+(((-1.0)*x5438*x5442*x5447))+((sj3*x5453))+(((-1.0)*sj3*x5440*x5444))+(((1.8e-7)*x5442*x5447))+((x5441*x5464))+((sj3*x5438*x5454))+((r10*x5440*x5447))+((sj3*x5441*x5454))+((x5438*x5464)));
evalcond[5]=((((1.8e-7)*x5439*x5442))+((r10*x5439*x5440))+((r22*x5460))+(((-1.0)*x5438*x5439*x5442))+(((-1.0)*x5438*x5439*x5448))+(((-1.8e-7)*cj3*x5454))+(((-1.0)*cj3*x5440*x5444))+((cj3*x5438*x5454))+((cj3*x5438*x5457))+((cj3*x5441*x5457))+((cj3*x5441*x5454))+((cj3*x5453))+(((-1.0)*x5439*x5441*x5442))+(((-1.0)*x5439*x5441*x5448))+(((-1.0)*r22*x5458))+(((-1.0)*cj3*x5461))+(((-1.0)*cj3*x5462))+(((-1.0)*cj3*x5456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5465=((1.0)*cj1);
IkReal x5466=(cj4*r22*sj5);
IkReal x5467=(cj5*r22*sj4);
if( IKabs(((((-1.0)*x5465*x5466))+(((-1.0)*x5465*x5467)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x5466))+((sj1*x5467)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5465*x5466))+(((-1.0)*x5465*x5467))))+IKsqr((((sj1*x5466))+((sj1*x5467))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x5465*x5466))+(((-1.0)*x5465*x5467))), (((sj1*x5466))+((sj1*x5467))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5468=IKsin(j2);
IkReal x5469=IKcos(j2);
IkReal x5470=(sj0*sj5);
IkReal x5471=(r11*sj6);
IkReal x5472=((1.0)*cj6);
IkReal x5473=(cj0*r01);
IkReal x5474=(cj4*r10);
IkReal x5475=((1.0)*sj1);
IkReal x5476=(cj0*r00);
IkReal x5477=((1.8e-7)*cj6);
IkReal x5478=(cj5*sj4);
IkReal x5479=(cj6*r10);
IkReal x5480=(sj4*sj5);
IkReal x5481=(r10*sj0);
IkReal x5482=(cj5*cj6);
IkReal x5483=((0.15)*sj5);
IkReal x5484=((1.0)*sj0);
IkReal x5485=((1.0)*sj6);
IkReal x5486=(cj4*cj5);
IkReal x5487=(cj4*sj5);
IkReal x5488=(cj1*x5468);
IkReal x5489=((1.11e-6)*cj5*sj0);
IkReal x5490=(sj1*x5469);
IkReal x5491=((1.0)*cj1*x5469);
evalcond[0]=((((-1.0)*sj3*x5468*x5475))+(((-1.0)*sj3*x5491)));
evalcond[1]=(x5488+((r22*x5487))+((r22*x5478))+(((-1.0)*x5469*x5475)));
evalcond[2]=((((-1.0)*cj3*x5468*x5475))+(((-1.0)*cj3*x5491))+(((-1.0)*r22*x5480))+((r22*x5486)));
evalcond[3]=((((0.15)*cj5*r22))+(((-1.11e-6)*r22*sj5))+(((-0.21066117)*sj1))+(((0.335)*x5490))+(((-1.0)*pz))+(((-0.335)*x5488))+(((-0.17676784)*cj1)));
evalcond[4]=((((-1.0)*x5481*x5485))+(((-1.0)*r11*sj0*x5472))+(((-1.0)*x5476*x5485))+(((-1.0)*x5472*x5473))+((sj3*x5490))+(((-1.0)*sj3*x5488)));
evalcond[5]=((((-1.0)*x5471*x5484*x5486))+(((-1.0)*x5472*x5476*x5480))+(((-1.0)*x5468*x5475))+(((-1.0)*x5491))+((sj6*x5473*x5480))+((sj4*x5470*x5471))+((cj4*x5476*x5482))+((sj0*x5474*x5482))+(((-1.0)*x5473*x5485*x5486))+(((-1.0)*r10*sj4*x5470*x5472)));
evalcond[6]=((((-1.0)*x5472*x5476*x5487))+(((-1.0)*cj3*x5488))+((cj4*x5470*x5471))+((sj6*x5473*x5487))+((cj3*x5490))+(((-1.0)*x5472*x5478*x5481))+((sj0*x5471*x5478))+(((-1.0)*x5470*x5472*x5474))+((sj6*x5473*x5478))+(((-1.0)*x5472*x5476*x5478)));
evalcond[7]=((((-1.0)*x5479*x5489))+(((0.335)*cj1*x5469))+((x5477*x5481))+(((-0.21066117)*cj1))+((x5471*x5489))+(((-1.8e-7)*sj0*x5471))+((sj6*x5473*x5483))+(((-1.11e-6)*x5476*x5482))+(((0.17676784)*sj1))+(((1.11e-6)*cj5*sj6*x5473))+(((-1.8e-7)*sj6*x5473))+(((0.335)*sj1*x5468))+(((-0.15)*x5470*x5479))+(((-1.0)*cj6*x5476*x5483))+(((-1.0)*py*x5484))+(((-1.0)*cj0*px))+((x5476*x5477))+(((0.15)*x5470*x5471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5492=(cj5*sj4);
IkReal x5493=(cj6*sj3);
IkReal x5494=(sj5*sj6);
IkReal x5495=(cj3*r02);
IkReal x5496=(cj3*cj6);
IkReal x5497=((1.0)*cj3);
IkReal x5498=(sj3*sj6);
IkReal x5499=(cj3*r12);
IkReal x5500=(sj4*sj5);
IkReal x5501=((1.0)*cj4*cj5);
IkReal x5502=(cj4*sj5*x5496);
CheckValue<IkReal> x5503 = IKatan2WithCheck(IkReal((((r10*x5502))+((r11*x5493))+(((-1.0)*cj4*r11*x5494*x5497))+((x5499*x5500))+((r10*x5498))+(((-1.0)*cj4*cj5*r12*x5497))+(((-1.0)*r11*sj6*x5492*x5497))+((r10*x5492*x5496)))),IkReal((((r01*x5493))+((x5495*x5500))+((r00*x5498))+(((-1.0)*r01*sj6*x5492*x5497))+(((-1.0)*cj4*r01*x5494*x5497))+((r00*x5502))+((r00*x5492*x5496))+(((-1.0)*x5495*x5501)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5503.valid){
continue;
}
CheckValue<IkReal> x5504=IKPowWithIntegerCheck(IKsign((((r22*((x5492+((cj4*sj5))))))+((r20*((((cj4*cj5*cj6))+(((-1.0)*cj6*x5500))))))+((r21*((((sj4*x5494))+(((-1.0)*sj6*x5501)))))))),-1);
if(!x5504.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x5503.value)+(((1.5707963267949)*(x5504.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5505=IKcos(j0);
IkReal x5506=IKsin(j0);
IkReal x5507=(r01*sj6);
IkReal x5508=((0.15)*sj5);
IkReal x5509=(cj5*sj4);
IkReal x5510=(cj4*r02);
IkReal x5511=(sj4*sj5);
IkReal x5512=((1.0)*cj4);
IkReal x5513=(r02*sj4);
IkReal x5514=(cj6*r00);
IkReal x5515=((1.11e-6)*cj5);
IkReal x5516=(sj5*x5506);
IkReal x5517=(cj5*x5506);
IkReal x5518=(r12*x5505);
IkReal x5519=((1.0)*x5506);
IkReal x5520=((1.8e-7)*x5506);
IkReal x5521=((1.0)*sj4*x5514);
IkReal x5522=(cj6*r10*x5505);
IkReal x5523=(r11*sj6*x5505);
evalcond[0]=((((-1.0)*cj6*r01*x5519))+(((-1.0)*r00*sj6*x5519))+((r10*sj6*x5505))+((cj6*r11*x5505))+(((-1.0)*cj3)));
evalcond[1]=(((x5506*x5507*x5511))+(((-1.0)*x5511*x5514*x5519))+((cj4*x5514*x5517))+((x5511*x5522))+(((-1.0)*x5509*x5518))+((cj4*cj5*x5523))+(((-1.0)*cj5*x5512*x5522))+(((-1.0)*sj5*x5512*x5518))+((r02*x5506*x5509))+(((-1.0)*x5511*x5523))+(((-1.0)*x5507*x5512*x5517))+((x5510*x5516)));
evalcond[2]=(((x5506*x5507*x5509))+(((-1.0)*r02*x5511*x5519))+sj3+((x5509*x5522))+(((-1.0)*cj5*x5512*x5518))+(((-1.0)*x5509*x5514*x5519))+((cj4*x5507*x5516))+((x5511*x5518))+(((-1.0)*x5509*x5523))+(((-1.0)*sj5*x5512*x5523))+((cj4*sj5*x5522))+(((-1.0)*x5512*x5514*x5516))+((x5510*x5517)));
evalcond[3]=((-0.0005)+(((-1.11e-6)*r02*x5516))+(((-1.0)*x5506*x5514*x5515))+(((0.15)*r02*x5517))+((x5506*x5507*x5515))+(((1.11e-6)*sj5*x5518))+((x5506*x5507*x5508))+(((-0.15)*cj5*x5518))+(((-1.0)*x5508*x5523))+(((-1.0)*px*x5519))+((x5508*x5522))+(((1.8e-7)*x5523))+(((-1.0)*x5515*x5523))+(((-1.8e-7)*x5522))+((x5515*x5522))+(((-1.0)*x5506*x5508*x5514))+(((-1.0)*x5507*x5520))+((py*x5505))+((x5514*x5520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((((-0.350613907701634)*cj0*r01*sj5*sj6))+(((2.33742605134422)*py*sj0))+(((-2.78560232882098)*pz))+(((-0.783037727200315)*cj5*r12*sj0*sj4))+(((0.350613907701634)*cj0*cj6*r00*sj5))+(((2.59454291699209e-6)*cj5*cj6*r10*sj0))+(((-0.783037727200315)*cj0*cj5*r02*sj4))+(((-2.59454291699209e-6)*cj0*cj5*r01*sj6))+(((-0.350613907701634)*cj5*r12*sj0))+(((0.417840349323147)*r21*sj5*sj6))+(((-2.59454291699209e-6)*cj5*r11*sj0*sj6))+(((2.59454291699209e-6)*cj0*r02*sj5))+(((4.2073668924196e-7)*r11*sj0*sj6))+(((4.2073668924196e-7)*cj0*r01*sj6))+(((-0.933176780155028)*cj4*cj5*r21*sj6))+(((2.33742605134422)*cj0*px))+(((-0.783037727200315)*r11*sj0*sj4*sj5*sj6))+(((-0.783037727200315)*cj0*cj4*r02*sj5))+(((0.783037727200315)*cj0*cj4*cj5*r01*sj6))+(((-4.2073668924196e-7)*cj6*r10*sj0))+(((-3.09201858499129e-6)*cj5*cj6*r20))+(((0.350613907701634)*cj6*r10*sj0*sj5))+(((-0.783037727200315)*cj0*r01*sj4*sj5*sj6))+(((3.09201858499129e-6)*cj5*r21*sj6))+(((-0.417840349323147)*cj6*r20*sj5))+(((0.783037727200315)*cj6*r10*sj0*sj4*sj5))+(((0.933176780155028)*cj4*r22*sj5))+(((0.783037727200315)*cj0*cj6*r00*sj4*sj5))+(((-0.783037727200315)*cj4*r12*sj0*sj5))+(((0.933176780155028)*cj5*r22*sj4))+(((-5.01408419187776e-7)*r21*sj6))+(((0.417840349323147)*cj5*r22))+(((-3.09201858499129e-6)*r22*sj5))+(((2.59454291699209e-6)*r12*sj0*sj5))+(((2.59454291699209e-6)*cj0*cj5*cj6*r00))+(((0.783037727200315)*cj4*cj5*r11*sj0*sj6))+(((-0.783037727200315)*cj4*cj5*cj6*r10*sj0))+(((-0.350613907701634)*r11*sj0*sj5*sj6))+(((-0.783037727200315)*cj0*cj4*cj5*cj6*r00))+(((-0.350613907701634)*cj0*cj5*r02))+(((0.933176780155028)*r21*sj4*sj5*sj6))+(((-4.2073668924196e-7)*cj0*cj6*r00))+(((-0.933176780155028)*cj6*r20*sj4*sj5))+(((5.01408419187776e-7)*cj6*r20))+(((0.933176780155028)*cj4*cj5*cj6*r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((4.2073668924196e-7)*cj6*r20))+(((0.933176780155028)*cj0*cj4*cj5*cj6*r00))+(((2.59454291699209e-6)*cj5*r21*sj6))+(((-0.783037727200315)*cj4*cj5*r21*sj6))+(((0.417840349323147)*cj0*r01*sj5*sj6))+(((3.09201858499129e-6)*cj0*cj5*r01*sj6))+(((-4.2073668924196e-7)*r21*sj6))+(((-0.417840349323147)*cj0*cj6*r00*sj5))+(((0.783037727200315)*cj4*r22*sj5))+(((-5.01408419187776e-7)*r11*sj0*sj6))+(((-0.783037727200315)*cj6*r20*sj4*sj5))+(((0.933176780155028)*r11*sj0*sj4*sj5*sj6))+(((0.417840349323147)*r11*sj0*sj5*sj6))+(((-2.33742605134422)*pz))+(((0.933176780155028)*cj5*r12*sj0*sj4))+(((-0.933176780155028)*cj6*r10*sj0*sj4*sj5))+(((-3.09201858499129e-6)*r12*sj0*sj5))+(((0.350613907701634)*cj5*r22))+(((0.933176780155028)*cj0*cj4*r02*sj5))+(((3.09201858499129e-6)*cj5*r11*sj0*sj6))+(((-3.09201858499129e-6)*cj5*cj6*r10*sj0))+(((-0.933176780155028)*cj0*cj6*r00*sj4*sj5))+(((5.01408419187776e-7)*cj0*cj6*r00))+(((-2.59454291699209e-6)*r22*sj5))+(((0.350613907701634)*r21*sj5*sj6))+(((-5.01408419187776e-7)*cj0*r01*sj6))+(((-0.350613907701634)*cj6*r20*sj5))+(((0.783037727200315)*cj4*cj5*cj6*r20))+(((0.933176780155028)*cj4*r12*sj0*sj5))+(((-3.09201858499129e-6)*cj0*r02*sj5))+(((-2.59454291699209e-6)*cj5*cj6*r20))+(((-2.78560232882098)*py*sj0))+(((0.783037727200315)*r21*sj4*sj5*sj6))+(((0.933176780155028)*cj0*cj5*r02*sj4))+(((0.417840349323147)*cj0*cj5*r02))+(((0.417840349323147)*cj5*r12*sj0))+(((-0.417840349323147)*cj6*r10*sj0*sj5))+(((0.933176780155028)*cj4*cj5*cj6*r10*sj0))+(((-2.78560232882098)*cj0*px))+(((-0.933176780155028)*cj4*cj5*r11*sj0*sj6))+(((-0.933176780155028)*cj0*cj4*cj5*r01*sj6))+(((-3.09201858499129e-6)*cj0*cj5*cj6*r00))+(((0.783037727200315)*cj5*r22*sj4))+(((5.01408419187776e-7)*cj6*r10*sj0))+(((0.933176780155028)*cj0*r01*sj4*sj5*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.350613907701634)*cj0*r01*sj5*sj6))+(((2.33742605134422)*py*sj0))+(((-2.78560232882098)*pz))+(((-0.783037727200315)*cj5*r12*sj0*sj4))+(((0.350613907701634)*cj0*cj6*r00*sj5))+(((2.59454291699209e-6)*cj5*cj6*r10*sj0))+(((-0.783037727200315)*cj0*cj5*r02*sj4))+(((-2.59454291699209e-6)*cj0*cj5*r01*sj6))+(((-0.350613907701634)*cj5*r12*sj0))+(((0.417840349323147)*r21*sj5*sj6))+(((-2.59454291699209e-6)*cj5*r11*sj0*sj6))+(((2.59454291699209e-6)*cj0*r02*sj5))+(((4.2073668924196e-7)*r11*sj0*sj6))+(((4.2073668924196e-7)*cj0*r01*sj6))+(((-0.933176780155028)*cj4*cj5*r21*sj6))+(((2.33742605134422)*cj0*px))+(((-0.783037727200315)*r11*sj0*sj4*sj5*sj6))+(((-0.783037727200315)*cj0*cj4*r02*sj5))+(((0.783037727200315)*cj0*cj4*cj5*r01*sj6))+(((-4.2073668924196e-7)*cj6*r10*sj0))+(((-3.09201858499129e-6)*cj5*cj6*r20))+(((0.350613907701634)*cj6*r10*sj0*sj5))+(((-0.783037727200315)*cj0*r01*sj4*sj5*sj6))+(((3.09201858499129e-6)*cj5*r21*sj6))+(((-0.417840349323147)*cj6*r20*sj5))+(((0.783037727200315)*cj6*r10*sj0*sj4*sj5))+(((0.933176780155028)*cj4*r22*sj5))+(((0.783037727200315)*cj0*cj6*r00*sj4*sj5))+(((-0.783037727200315)*cj4*r12*sj0*sj5))+(((0.933176780155028)*cj5*r22*sj4))+(((-5.01408419187776e-7)*r21*sj6))+(((0.417840349323147)*cj5*r22))+(((-3.09201858499129e-6)*r22*sj5))+(((2.59454291699209e-6)*r12*sj0*sj5))+(((2.59454291699209e-6)*cj0*cj5*cj6*r00))+(((0.783037727200315)*cj4*cj5*r11*sj0*sj6))+(((-0.783037727200315)*cj4*cj5*cj6*r10*sj0))+(((-0.350613907701634)*r11*sj0*sj5*sj6))+(((-0.783037727200315)*cj0*cj4*cj5*cj6*r00))+(((-0.350613907701634)*cj0*cj5*r02))+(((0.933176780155028)*r21*sj4*sj5*sj6))+(((-4.2073668924196e-7)*cj0*cj6*r00))+(((-0.933176780155028)*cj6*r20*sj4*sj5))+(((5.01408419187776e-7)*cj6*r20))+(((0.933176780155028)*cj4*cj5*cj6*r20))))+IKsqr(((((4.2073668924196e-7)*cj6*r20))+(((0.933176780155028)*cj0*cj4*cj5*cj6*r00))+(((2.59454291699209e-6)*cj5*r21*sj6))+(((-0.783037727200315)*cj4*cj5*r21*sj6))+(((0.417840349323147)*cj0*r01*sj5*sj6))+(((3.09201858499129e-6)*cj0*cj5*r01*sj6))+(((-4.2073668924196e-7)*r21*sj6))+(((-0.417840349323147)*cj0*cj6*r00*sj5))+(((0.783037727200315)*cj4*r22*sj5))+(((-5.01408419187776e-7)*r11*sj0*sj6))+(((-0.783037727200315)*cj6*r20*sj4*sj5))+(((0.933176780155028)*r11*sj0*sj4*sj5*sj6))+(((0.417840349323147)*r11*sj0*sj5*sj6))+(((-2.33742605134422)*pz))+(((0.933176780155028)*cj5*r12*sj0*sj4))+(((-0.933176780155028)*cj6*r10*sj0*sj4*sj5))+(((-3.09201858499129e-6)*r12*sj0*sj5))+(((0.350613907701634)*cj5*r22))+(((0.933176780155028)*cj0*cj4*r02*sj5))+(((3.09201858499129e-6)*cj5*r11*sj0*sj6))+(((-3.09201858499129e-6)*cj5*cj6*r10*sj0))+(((-0.933176780155028)*cj0*cj6*r00*sj4*sj5))+(((5.01408419187776e-7)*cj0*cj6*r00))+(((-2.59454291699209e-6)*r22*sj5))+(((0.350613907701634)*r21*sj5*sj6))+(((-5.01408419187776e-7)*cj0*r01*sj6))+(((-0.350613907701634)*cj6*r20*sj5))+(((0.783037727200315)*cj4*cj5*cj6*r20))+(((0.933176780155028)*cj4*r12*sj0*sj5))+(((-3.09201858499129e-6)*cj0*r02*sj5))+(((-2.59454291699209e-6)*cj5*cj6*r20))+(((-2.78560232882098)*py*sj0))+(((0.783037727200315)*r21*sj4*sj5*sj6))+(((0.933176780155028)*cj0*cj5*r02*sj4))+(((0.417840349323147)*cj0*cj5*r02))+(((0.417840349323147)*cj5*r12*sj0))+(((-0.417840349323147)*cj6*r10*sj0*sj5))+(((0.933176780155028)*cj4*cj5*cj6*r10*sj0))+(((-2.78560232882098)*cj0*px))+(((-0.933176780155028)*cj4*cj5*r11*sj0*sj6))+(((-0.933176780155028)*cj0*cj4*cj5*r01*sj6))+(((-3.09201858499129e-6)*cj0*cj5*cj6*r00))+(((0.783037727200315)*cj5*r22*sj4))+(((5.01408419187776e-7)*cj6*r10*sj0))+(((0.933176780155028)*cj0*r01*sj4*sj5*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-0.350613907701634)*cj0*r01*sj5*sj6))+(((2.33742605134422)*py*sj0))+(((-2.78560232882098)*pz))+(((-0.783037727200315)*cj5*r12*sj0*sj4))+(((0.350613907701634)*cj0*cj6*r00*sj5))+(((2.59454291699209e-6)*cj5*cj6*r10*sj0))+(((-0.783037727200315)*cj0*cj5*r02*sj4))+(((-2.59454291699209e-6)*cj0*cj5*r01*sj6))+(((-0.350613907701634)*cj5*r12*sj0))+(((0.417840349323147)*r21*sj5*sj6))+(((-2.59454291699209e-6)*cj5*r11*sj0*sj6))+(((2.59454291699209e-6)*cj0*r02*sj5))+(((4.2073668924196e-7)*r11*sj0*sj6))+(((4.2073668924196e-7)*cj0*r01*sj6))+(((-0.933176780155028)*cj4*cj5*r21*sj6))+(((2.33742605134422)*cj0*px))+(((-0.783037727200315)*r11*sj0*sj4*sj5*sj6))+(((-0.783037727200315)*cj0*cj4*r02*sj5))+(((0.783037727200315)*cj0*cj4*cj5*r01*sj6))+(((-4.2073668924196e-7)*cj6*r10*sj0))+(((-3.09201858499129e-6)*cj5*cj6*r20))+(((0.350613907701634)*cj6*r10*sj0*sj5))+(((-0.783037727200315)*cj0*r01*sj4*sj5*sj6))+(((3.09201858499129e-6)*cj5*r21*sj6))+(((-0.417840349323147)*cj6*r20*sj5))+(((0.783037727200315)*cj6*r10*sj0*sj4*sj5))+(((0.933176780155028)*cj4*r22*sj5))+(((0.783037727200315)*cj0*cj6*r00*sj4*sj5))+(((-0.783037727200315)*cj4*r12*sj0*sj5))+(((0.933176780155028)*cj5*r22*sj4))+(((-5.01408419187776e-7)*r21*sj6))+(((0.417840349323147)*cj5*r22))+(((-3.09201858499129e-6)*r22*sj5))+(((2.59454291699209e-6)*r12*sj0*sj5))+(((2.59454291699209e-6)*cj0*cj5*cj6*r00))+(((0.783037727200315)*cj4*cj5*r11*sj0*sj6))+(((-0.783037727200315)*cj4*cj5*cj6*r10*sj0))+(((-0.350613907701634)*r11*sj0*sj5*sj6))+(((-0.783037727200315)*cj0*cj4*cj5*cj6*r00))+(((-0.350613907701634)*cj0*cj5*r02))+(((0.933176780155028)*r21*sj4*sj5*sj6))+(((-4.2073668924196e-7)*cj0*cj6*r00))+(((-0.933176780155028)*cj6*r20*sj4*sj5))+(((5.01408419187776e-7)*cj6*r20))+(((0.933176780155028)*cj4*cj5*cj6*r20))), ((((4.2073668924196e-7)*cj6*r20))+(((0.933176780155028)*cj0*cj4*cj5*cj6*r00))+(((2.59454291699209e-6)*cj5*r21*sj6))+(((-0.783037727200315)*cj4*cj5*r21*sj6))+(((0.417840349323147)*cj0*r01*sj5*sj6))+(((3.09201858499129e-6)*cj0*cj5*r01*sj6))+(((-4.2073668924196e-7)*r21*sj6))+(((-0.417840349323147)*cj0*cj6*r00*sj5))+(((0.783037727200315)*cj4*r22*sj5))+(((-5.01408419187776e-7)*r11*sj0*sj6))+(((-0.783037727200315)*cj6*r20*sj4*sj5))+(((0.933176780155028)*r11*sj0*sj4*sj5*sj6))+(((0.417840349323147)*r11*sj0*sj5*sj6))+(((-2.33742605134422)*pz))+(((0.933176780155028)*cj5*r12*sj0*sj4))+(((-0.933176780155028)*cj6*r10*sj0*sj4*sj5))+(((-3.09201858499129e-6)*r12*sj0*sj5))+(((0.350613907701634)*cj5*r22))+(((0.933176780155028)*cj0*cj4*r02*sj5))+(((3.09201858499129e-6)*cj5*r11*sj0*sj6))+(((-3.09201858499129e-6)*cj5*cj6*r10*sj0))+(((-0.933176780155028)*cj0*cj6*r00*sj4*sj5))+(((5.01408419187776e-7)*cj0*cj6*r00))+(((-2.59454291699209e-6)*r22*sj5))+(((0.350613907701634)*r21*sj5*sj6))+(((-5.01408419187776e-7)*cj0*r01*sj6))+(((-0.350613907701634)*cj6*r20*sj5))+(((0.783037727200315)*cj4*cj5*cj6*r20))+(((0.933176780155028)*cj4*r12*sj0*sj5))+(((-3.09201858499129e-6)*cj0*r02*sj5))+(((-2.59454291699209e-6)*cj5*cj6*r20))+(((-2.78560232882098)*py*sj0))+(((0.783037727200315)*r21*sj4*sj5*sj6))+(((0.933176780155028)*cj0*cj5*r02*sj4))+(((0.417840349323147)*cj0*cj5*r02))+(((0.417840349323147)*cj5*r12*sj0))+(((-0.417840349323147)*cj6*r10*sj0*sj5))+(((0.933176780155028)*cj4*cj5*cj6*r10*sj0))+(((-2.78560232882098)*cj0*px))+(((-0.933176780155028)*cj4*cj5*r11*sj0*sj6))+(((-0.933176780155028)*cj0*cj4*cj5*r01*sj6))+(((-3.09201858499129e-6)*cj0*cj5*cj6*r00))+(((0.783037727200315)*cj5*r22*sj4))+(((5.01408419187776e-7)*cj6*r10*sj0))+(((0.933176780155028)*cj0*r01*sj4*sj5*sj6))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x5524=IKsin(j1);
IkReal x5525=IKcos(j1);
IkReal x5526=(cj6*r10);
IkReal x5527=(sj5*sj6);
IkReal x5528=(r11*sj0);
IkReal x5529=((0.15)*sj3);
IkReal x5530=((0.335)*cj4);
IkReal x5531=(r12*sj0);
IkReal x5532=((0.335)*cj6);
IkReal x5533=((1.11e-6)*sj3);
IkReal x5534=(cj5*sj6);
IkReal x5535=((0.15)*cj3);
IkReal x5536=(cj3*r21);
IkReal x5537=((1.8e-7)*sj6);
IkReal x5538=(cj6*sj5);
IkReal x5539=(cj0*r00);
IkReal x5540=((0.335)*sj4);
IkReal x5541=((1.0)*pz);
IkReal x5542=(cj0*r01);
IkReal x5543=((1.11e-6)*cj3);
IkReal x5544=(cj5*cj6);
IkReal x5545=(cj3*sj0);
IkReal x5546=((1.0)*py);
IkReal x5547=(cj5*r22);
IkReal x5548=(cj5*sj4);
IkReal x5549=((0.335)*sj6);
IkReal x5550=((1.8e-7)*cj6);
IkReal x5551=(cj5*sj0);
IkReal x5552=(sj4*sj5);
IkReal x5553=(r22*sj5);
IkReal x5554=(sj0*sj5);
IkReal x5555=((1.8e-7)*sj0);
IkReal x5556=((0.21066117)*x5524);
IkReal x5557=((0.17676784)*x5525);
IkReal x5558=((0.17676784)*x5524);
IkReal x5559=(cj0*r02*sj5);
IkReal x5560=(cj0*cj5*r02);
IkReal x5561=((0.21066117)*x5525);
IkReal x5562=((1.0)*cj0*px);
IkReal x5563=(x5540*x5551);
evalcond[0]=((((-1.11e-6)*x5553))+((r21*x5527*x5540))+(((-1.11e-6)*r20*x5544))+((r20*x5550))+(((-1.0)*r21*x5530*x5534))+(((-1.0)*r21*x5537))+((r20*x5530*x5544))+(((0.15)*x5547))+((x5540*x5547))+((x5530*x5553))+(((0.15)*r21*x5527))+(((-1.0)*x5556))+(((-1.0)*x5557))+(((-1.0)*x5541))+(((1.11e-6)*r21*x5534))+(((-1.0)*r20*x5532*x5552))+(((-0.15)*r20*x5538)));
evalcond[1]=((((-1.11e-6)*x5559))+((x5540*x5560))+(((0.15)*cj5*x5531))+x5558+(((-1.0)*x5528*x5530*x5534))+(((-1.0)*x5528*x5537))+(((0.15)*x5527*x5528))+(((-0.15)*x5538*x5539))+((x5530*x5539*x5544))+((x5539*x5550))+(((-0.15)*x5526*x5554))+(((1.11e-6)*x5528*x5534))+(((-1.0)*x5537*x5542))+(((0.15)*x5560))+((x5527*x5540*x5542))+(((-1.0)*x5562))+(((-1.0)*x5561))+(((-1.11e-6)*sj5*x5531))+(((-1.11e-6)*x5526*x5551))+(((-1.11e-6)*x5539*x5544))+((sj5*x5530*x5531))+(((-1.0)*x5530*x5534*x5542))+((x5530*x5559))+((cj5*x5531*x5540))+(((-1.0)*sj0*x5546))+((x5526*x5555))+(((0.15)*x5527*x5542))+((x5526*x5530*x5551))+(((1.11e-6)*x5534*x5542))+(((-1.0)*x5532*x5539*x5552))+((x5527*x5528*x5540))+(((-1.0)*x5526*x5540*x5554)));
evalcond[2]=((((-1.0)*r21*x5533*x5534))+(((-1.0)*x5539*x5549))+(((-1.0)*r20*sj3*x5550))+(((-1.0)*x5528*x5532))+((x5533*x5553))+(((-1.0)*x5529*x5547))+(((-1.0)*x5532*x5542))+((sj3*x5556))+((sj3*x5557))+((r20*x5529*x5538))+((r21*sj3*x5537))+(((-1.0)*r10*sj0*x5549))+((pz*sj3))+((r20*x5533*x5544))+(((-1.0)*r21*x5527*x5529)));
evalcond[3]=(((x5527*x5528*x5529))+((x5529*x5560))+((sj3*x5526*x5555))+(((-1.0)*x5526*x5533*x5551))+(((-1.0)*x5529*x5538*x5539))+(((-1.0)*sj0*sj3*x5546))+(((-1.0)*x5533*x5539*x5544))+(((-1.0)*x5526*x5529*x5554))+((sj3*x5558))+(((-1.0)*r21*x5532))+(((-1.0)*x5533*x5559))+(((-1.0)*sj3*x5528*x5537))+((x5528*x5533*x5534))+((cj5*x5529*x5531))+((x5527*x5529*x5542))+(((-1.0)*sj5*x5531*x5533))+(((-1.0)*sj3*x5537*x5542))+((sj3*x5539*x5550))+((x5533*x5534*x5542))+(((-1.0)*sj3*x5562))+(((-1.0)*sj3*x5561))+(((-1.0)*r20*x5549)));
evalcond[4]=((((-1.0)*x5527*x5530*x5542))+((sj5*x5531*x5540))+(((-1.0)*x5528*x5534*x5540))+((x5535*x5547))+((x5526*x5563))+(((-1.0)*x5543*x5553))+(((-1.0)*cj3*x5557))+(((-1.0)*cj3*x5556))+((r21*x5527*x5535))+(((-1.0)*x5530*x5560))+((x5530*x5538*x5539))+(((-1.0)*x5536*x5537))+((x5532*x5539*x5548))+(((-1.0)*cj5*x5530*x5531))+(((-1.0)*cj3*x5541))+(((-1.0)*x5527*x5528*x5530))+(((1.11e-6)*x5534*x5536))+(((-1.0)*r20*x5543*x5544))+(((-1.0)*x5534*x5540*x5542))+((x5540*x5559))+((x5526*x5530*x5554))+((cj3*r20*x5550))+(((-1.0)*r20*x5535*x5538)));
evalcond[5]=(((x5527*x5535*x5542))+((x5535*x5560))+((r21*x5534*x5540))+((x5528*x5534*x5543))+(((-1.0)*x5543*x5559))+(((-1.0)*x5545*x5546))+(((1.8e-7)*x5526*x5545))+((r21*x5527*x5530))+((x5527*x5528*x5535))+(((-1.0)*r20*x5530*x5538))+(((-1.0)*cj3*x5537*x5542))+(((-1.0)*x5526*x5543*x5551))+(((-1.0)*x5526*x5535*x5554))+(((-1.0)*cj3*x5561))+(((-1.0)*cj3*x5562))+((cj5*x5531*x5535))+(((-1.0)*cj3*x5528*x5537))+(((-1.0)*x5539*x5543*x5544))+((x5534*x5542*x5543))+((x5530*x5547))+((cj3*x5539*x5550))+(((-1.0)*x5540*x5553))+(((-1.0)*sj5*x5531*x5543))+(((-1.0)*r20*x5532*x5548))+(((-1.0)*x5535*x5538*x5539))+((cj3*x5558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x5564=(cj3*sj3);
j2eval[0]=x5564;
j2eval[1]=IKsign(x5564);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5565=(cj1*cj4);
IkReal x5566=(sj1*sj4);
IkReal x5567=(cj6*r20);
IkReal x5568=(r21*sj6);
IkReal x5569=(cj1*sj4);
IkReal x5570=((1.0)*cj5);
IkReal x5571=((1.0)*sj5);
IkReal x5572=(cj4*sj1);
IkReal x5573=(cj5*r22);
IkReal x5574=(r22*x5571);
IkReal x5575=(sj5*x5572);
if( IKabs((((x5572*x5573))+(((-1.0)*x5568*x5569*x5571))+(((-1.0)*x5565*x5567*x5570))+(((-1.0)*x5566*x5567*x5570))+(((-1.0)*r22*x5569*x5570))+((sj5*x5567*x5569))+((x5568*x5575))+(((-1.0)*x5567*x5571*x5572))+(((-1.0)*x5566*x5574))+(((-1.0)*x5565*x5574))+((cj5*x5566*x5568))+((cj5*x5565*x5568)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*x5568*x5569))+((x5566*x5573))+(((-1.0)*x5568*x5570*x5572))+((sj5*x5565*x5568))+((x5565*x5573))+((cj5*x5567*x5572))+(((-1.0)*x5565*x5567*x5571))+((r22*x5575))+(((-1.0)*x5566*x5567*x5571))+(((-1.0)*x5569*x5574))+((sj5*x5566*x5568))+(((-1.0)*x5567*x5569*x5570)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x5572*x5573))+(((-1.0)*x5568*x5569*x5571))+(((-1.0)*x5565*x5567*x5570))+(((-1.0)*x5566*x5567*x5570))+(((-1.0)*r22*x5569*x5570))+((sj5*x5567*x5569))+((x5568*x5575))+(((-1.0)*x5567*x5571*x5572))+(((-1.0)*x5566*x5574))+(((-1.0)*x5565*x5574))+((cj5*x5566*x5568))+((cj5*x5565*x5568))))+IKsqr((((cj5*x5568*x5569))+((x5566*x5573))+(((-1.0)*x5568*x5570*x5572))+((sj5*x5565*x5568))+((x5565*x5573))+((cj5*x5567*x5572))+(((-1.0)*x5565*x5567*x5571))+((r22*x5575))+(((-1.0)*x5566*x5567*x5571))+(((-1.0)*x5569*x5574))+((sj5*x5566*x5568))+(((-1.0)*x5567*x5569*x5570))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x5572*x5573))+(((-1.0)*x5568*x5569*x5571))+(((-1.0)*x5565*x5567*x5570))+(((-1.0)*x5566*x5567*x5570))+(((-1.0)*r22*x5569*x5570))+((sj5*x5567*x5569))+((x5568*x5575))+(((-1.0)*x5567*x5571*x5572))+(((-1.0)*x5566*x5574))+(((-1.0)*x5565*x5574))+((cj5*x5566*x5568))+((cj5*x5565*x5568))), (((cj5*x5568*x5569))+((x5566*x5573))+(((-1.0)*x5568*x5570*x5572))+((sj5*x5565*x5568))+((x5565*x5573))+((cj5*x5567*x5572))+(((-1.0)*x5565*x5567*x5571))+((r22*x5575))+(((-1.0)*x5566*x5567*x5571))+(((-1.0)*x5569*x5574))+((sj5*x5566*x5568))+(((-1.0)*x5567*x5569*x5570))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5576=IKsin(j2);
IkReal x5577=IKcos(j2);
IkReal x5578=(sj0*sj4);
IkReal x5579=(r11*sj6);
IkReal x5580=(cj5*r12);
IkReal x5581=(sj4*sj6);
IkReal x5582=(cj5*r21);
IkReal x5583=((0.15)*sj0);
IkReal x5584=((1.0)*sj5);
IkReal x5585=(cj0*r02);
IkReal x5586=(cj4*cj5);
IkReal x5587=((1.11e-6)*sj0);
IkReal x5588=((0.15)*cj5);
IkReal x5589=(r12*sj5);
IkReal x5590=((1.11e-6)*cj5);
IkReal x5591=(cj6*r20);
IkReal x5592=((0.15)*sj5);
IkReal x5593=(cj0*r01);
IkReal x5594=(cj4*sj5);
IkReal x5595=(cj6*r10);
IkReal x5596=((1.0)*cj5);
IkReal x5597=(r22*sj4);
IkReal x5598=(r21*sj6);
IkReal x5599=(cj4*sj0);
IkReal x5600=((1.0)*sj0);
IkReal x5601=((1.0)*sj6);
IkReal x5602=((1.11e-6)*sj5);
IkReal x5603=(sj0*x5595);
IkReal x5604=((1.0)*x5576);
IkReal x5605=(cj1*x5576);
IkReal x5606=(cj1*x5577);
IkReal x5607=(cj0*cj6*r00);
IkReal x5608=(sj1*x5577);
IkReal x5609=(sj1*x5604);
IkReal x5610=((1.0)*x5606);
IkReal x5611=(x5610+x5609);
evalcond[0]=(x5605+(((-1.0)*x5608))+((x5586*x5591))+((r21*sj5*x5581))+((cj5*x5597))+(((-1.0)*sj4*x5584*x5591))+((r22*x5594))+(((-1.0)*cj4*x5582*x5601)));
evalcond[1]=((((-1.0)*x5584*x5597))+(((-1.0)*cj4*x5584*x5591))+((x5581*x5582))+(((-1.0)*sj4*x5591*x5596))+((r22*x5586))+(((-1.0)*x5611))+((x5594*x5598)));
evalcond[2]=((((-1.8e-7)*x5598))+(((0.335)*x5608))+(((-0.21066117)*sj1))+(((-1.0)*r22*x5602))+((x5592*x5598))+(((-1.0)*x5590*x5591))+(((1.11e-6)*sj6*x5582))+(((-1.0)*pz))+(((-0.17676784)*cj1))+(((-0.335)*x5605))+(((-1.0)*x5591*x5592))+((r22*x5588))+(((1.8e-7)*x5591)));
evalcond[3]=(((x5586*x5603))+((x5586*x5607))+(((-1.0)*x5578*x5584*x5595))+((sj5*x5578*x5579))+(((-1.0)*x5586*x5593*x5601))+((x5585*x5594))+(((-1.0)*x5579*x5586*x5600))+((x5578*x5580))+((sj5*x5581*x5593))+((cj5*sj4*x5585))+(((-1.0)*sj4*x5584*x5607))+(((-1.0)*x5611))+((x5589*x5599)));
evalcond[4]=(x5608+((sj6*x5593*x5594))+(((-1.0)*x5578*x5595*x5596))+((x5585*x5586))+(((-1.0)*x5584*x5595*x5599))+(((-1.0)*cj4*x5584*x5607))+(((-1.0)*sj4*x5584*x5585))+((cj5*x5581*x5593))+(((-1.0)*r12*x5578*x5584))+((x5580*x5599))+(((-1.0)*sj4*x5596*x5607))+((sj0*x5579*x5594))+(((-1.0)*cj1*x5604))+((cj5*x5578*x5579)));
evalcond[5]=(((sj5*x5579*x5583))+(((-1.0)*x5592*x5607))+(((0.335)*x5606))+(((-0.21066117)*cj1))+(((1.8e-7)*x5607))+(((1.8e-7)*x5603))+(((0.17676784)*sj1))+(((-1.0)*x5585*x5602))+((cj5*x5579*x5587))+((x5585*x5588))+(((-1.8e-7)*sj6*x5593))+((sj6*x5592*x5593))+(((-1.8e-7)*sj0*x5579))+((sj6*x5590*x5593))+(((-1.0)*py*x5600))+((x5580*x5583))+(((-1.0)*cj5*x5587*x5595))+(((-1.0)*x5587*x5589))+(((-1.0)*sj5*x5583*x5595))+(((-1.0)*x5590*x5607))+(((0.335)*sj1*x5576))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5612=((1.0)*sj1);
IkReal x5613=(r20*sj6);
IkReal x5614=(cj6*r21);
IkReal x5615=((1.0)*cj1);
IkReal x5616=(cj0*r00*sj6);
IkReal x5617=(cj0*cj6*r01);
IkReal x5618=(r10*sj0*sj6);
IkReal x5619=(cj6*r11*sj0);
if( IKabs(((((-1.0)*x5612*x5614))+(((-1.0)*x5612*x5613))+(((-1.0)*x5615*x5619))+(((-1.0)*x5615*x5618))+(((-1.0)*x5615*x5616))+(((-1.0)*x5615*x5617)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x5613*x5615))+((sj1*x5617))+((sj1*x5616))+((sj1*x5619))+((sj1*x5618))+(((-1.0)*x5614*x5615)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5612*x5614))+(((-1.0)*x5612*x5613))+(((-1.0)*x5615*x5619))+(((-1.0)*x5615*x5618))+(((-1.0)*x5615*x5616))+(((-1.0)*x5615*x5617))))+IKsqr(((((-1.0)*x5613*x5615))+((sj1*x5617))+((sj1*x5616))+((sj1*x5619))+((sj1*x5618))+(((-1.0)*x5614*x5615))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x5612*x5614))+(((-1.0)*x5612*x5613))+(((-1.0)*x5615*x5619))+(((-1.0)*x5615*x5618))+(((-1.0)*x5615*x5616))+(((-1.0)*x5615*x5617))), ((((-1.0)*x5613*x5615))+((sj1*x5617))+((sj1*x5616))+((sj1*x5619))+((sj1*x5618))+(((-1.0)*x5614*x5615))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5620=IKcos(j2);
IkReal x5621=IKsin(j2);
IkReal x5622=(sj0*sj4);
IkReal x5623=(r11*sj6);
IkReal x5624=(cj5*r12);
IkReal x5625=((1.0)*cj6);
IkReal x5626=(cj0*r01);
IkReal x5627=((1.0)*sj6);
IkReal x5628=(cj0*cj5);
IkReal x5629=((1.11e-6)*sj0);
IkReal x5630=(r12*sj5);
IkReal x5631=(cj6*r10);
IkReal x5632=(sj4*sj5);
IkReal x5633=(cj0*r00);
IkReal x5634=((0.15)*sj0);
IkReal x5635=((1.8e-7)*sj0);
IkReal x5636=(cj6*r20);
IkReal x5637=(cj4*cj5);
IkReal x5638=((0.15)*sj5);
IkReal x5639=(cj6*r00);
IkReal x5640=(cj5*r22);
IkReal x5641=(r21*sj6);
IkReal x5642=((1.0)*sj0);
IkReal x5643=((1.0)*sj1);
IkReal x5644=((1.11e-6)*cj5);
IkReal x5645=(r22*sj5);
IkReal x5646=(cj1*x5620);
IkReal x5647=(cj1*x5621);
IkReal x5648=(cj0*r02*sj5);
IkReal x5649=(sj1*x5620);
IkReal x5650=(x5621*x5643);
IkReal x5651=((1.0)*x5646);
IkReal x5652=(x5650+x5651);
evalcond[0]=((((-1.0)*x5652))+(((-1.0)*r20*x5627))+(((-1.0)*r21*x5625)));
evalcond[1]=(x5649+(((-1.0)*r11*sj0*x5625))+(((-1.0)*x5625*x5626))+(((-1.0)*x5627*x5633))+(((-1.0)*r10*sj0*x5627))+(((-1.0)*x5647)));
evalcond[2]=((((-1.0)*r21*x5627*x5637))+x5647+(((-1.0)*x5620*x5643))+((sj4*x5640))+((cj4*x5645))+(((-1.0)*r20*x5625*x5632))+((x5636*x5637))+((x5632*x5641)));
evalcond[3]=((((-1.11e-6)*x5645))+(((-0.21066117)*sj1))+(((0.335)*x5649))+((x5641*x5644))+(((-0.335)*x5647))+(((-1.0)*x5636*x5638))+(((-1.0)*pz))+((x5638*x5641))+(((-0.17676784)*cj1))+(((1.8e-7)*x5636))+(((-1.8e-7)*x5641))+(((-1.0)*x5636*x5644))+(((0.15)*x5640)));
evalcond[4]=((((-1.0)*r10*sj5*x5622*x5625))+((r02*sj4*x5628))+(((-1.0)*x5625*x5632*x5633))+((sj6*x5626*x5632))+(((-1.0)*x5623*x5637*x5642))+((cj4*x5648))+((x5622*x5624))+(((-1.0)*x5626*x5627*x5637))+(((-1.0)*x5652))+((sj5*x5622*x5623))+((sj0*x5631*x5637))+((cj4*sj0*x5630))+((cj4*x5628*x5639)));
evalcond[5]=((((0.15)*r02*x5628))+(((-1.11e-6)*x5648))+(((-1.0)*x5629*x5630))+((cj5*x5623*x5629))+((sj5*x5623*x5634))+(((-1.0)*x5623*x5635))+(((-0.21066117)*cj1))+(((-1.11e-6)*x5628*x5639))+(((0.335)*x5646))+(((-1.0)*cj5*x5629*x5631))+((sj6*x5626*x5638))+(((0.17676784)*sj1))+(((-1.0)*py*x5642))+((x5631*x5635))+((sj6*x5626*x5644))+((x5624*x5634))+(((1.8e-7)*cj6*x5633))+(((-1.0)*sj5*x5631*x5634))+(((0.335)*sj1*x5621))+(((-1.0)*cj0*px))+(((-1.0)*cj6*x5633*x5638))+(((-1.8e-7)*sj6*x5626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5653=(cj4*sj5);
IkReal x5654=(cj5*sj4);
IkReal x5655=(cj6*r20);
IkReal x5656=(cj4*cj5);
IkReal x5657=(sj4*sj5);
IkReal x5658=((1.0)*sj1);
IkReal x5659=(r21*sj6);
IkReal x5660=((1.0)*cj1);
IkReal x5661=(r22*sj1);
IkReal x5662=(r22*x5660);
IkReal x5663=(x5658*x5659);
if( IKabs((((sj1*x5654*x5655))+(((-1.0)*x5655*x5656*x5660))+(((-1.0)*r22*x5656*x5658))+((cj1*x5655*x5657))+(((-1.0)*x5653*x5662))+(((-1.0)*x5653*x5663))+(((-1.0)*x5657*x5659*x5660))+(((-1.0)*x5654*x5662))+(((-1.0)*x5654*x5663))+((x5657*x5661))+((sj1*x5653*x5655))+((cj1*x5656*x5659)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r22*x5657))+((sj1*x5655*x5656))+((sj1*x5657*x5659))+((cj1*x5653*x5655))+(((-1.0)*x5653*x5659*x5660))+(((-1.0)*x5656*x5663))+(((-1.0)*x5656*x5662))+((cj1*x5654*x5655))+(((-1.0)*x5654*x5659*x5660))+(((-1.0)*x5655*x5657*x5658))+((x5653*x5661))+((x5654*x5661)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x5654*x5655))+(((-1.0)*x5655*x5656*x5660))+(((-1.0)*r22*x5656*x5658))+((cj1*x5655*x5657))+(((-1.0)*x5653*x5662))+(((-1.0)*x5653*x5663))+(((-1.0)*x5657*x5659*x5660))+(((-1.0)*x5654*x5662))+(((-1.0)*x5654*x5663))+((x5657*x5661))+((sj1*x5653*x5655))+((cj1*x5656*x5659))))+IKsqr((((cj1*r22*x5657))+((sj1*x5655*x5656))+((sj1*x5657*x5659))+((cj1*x5653*x5655))+(((-1.0)*x5653*x5659*x5660))+(((-1.0)*x5656*x5663))+(((-1.0)*x5656*x5662))+((cj1*x5654*x5655))+(((-1.0)*x5654*x5659*x5660))+(((-1.0)*x5655*x5657*x5658))+((x5653*x5661))+((x5654*x5661))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x5654*x5655))+(((-1.0)*x5655*x5656*x5660))+(((-1.0)*r22*x5656*x5658))+((cj1*x5655*x5657))+(((-1.0)*x5653*x5662))+(((-1.0)*x5653*x5663))+(((-1.0)*x5657*x5659*x5660))+(((-1.0)*x5654*x5662))+(((-1.0)*x5654*x5663))+((x5657*x5661))+((sj1*x5653*x5655))+((cj1*x5656*x5659))), (((cj1*r22*x5657))+((sj1*x5655*x5656))+((sj1*x5657*x5659))+((cj1*x5653*x5655))+(((-1.0)*x5653*x5659*x5660))+(((-1.0)*x5656*x5663))+(((-1.0)*x5656*x5662))+((cj1*x5654*x5655))+(((-1.0)*x5654*x5659*x5660))+(((-1.0)*x5655*x5657*x5658))+((x5653*x5661))+((x5654*x5661))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5664=IKcos(j2);
IkReal x5665=IKsin(j2);
IkReal x5666=(sj4*sj6);
IkReal x5667=(sj0*sj5);
IkReal x5668=(cj5*r21);
IkReal x5669=((1.0)*sj4);
IkReal x5670=(cj0*r02);
IkReal x5671=(cj6*r10);
IkReal x5672=((1.0)*cj4);
IkReal x5673=(cj4*cj5);
IkReal x5674=(r11*sj6);
IkReal x5675=((0.15)*cj5);
IkReal x5676=(cj6*sj5);
IkReal x5677=(cj0*r00);
IkReal x5678=((1.8e-7)*sj0);
IkReal x5679=(cj6*r20);
IkReal x5680=((1.11e-6)*cj5);
IkReal x5681=(cj4*sj5);
IkReal x5682=(cj5*sj0);
IkReal x5683=(cj5*sj4);
IkReal x5684=((0.15)*sj6);
IkReal x5685=(r21*sj5);
IkReal x5686=(r21*sj6);
IkReal x5687=(r22*sj5);
IkReal x5688=(cj1*x5665);
IkReal x5689=(cj1*x5664);
IkReal x5690=(r12*x5682);
IkReal x5691=(sj1*x5665);
IkReal x5692=(sj0*x5680);
IkReal x5693=(cj0*r01*sj5);
IkReal x5694=(cj0*r01*sj6);
IkReal x5695=(sj1*x5664);
IkReal x5696=((1.0)*x5695);
evalcond[0]=(x5688+((r22*x5681))+((r22*x5683))+(((-1.0)*x5696))+(((-1.0)*r20*x5669*x5676))+((x5673*x5679))+((x5666*x5685))+(((-1.0)*sj6*x5668*x5672)));
evalcond[1]=(x5691+x5689+((x5681*x5686))+(((-1.0)*x5669*x5687))+(((-1.0)*r20*x5672*x5676))+((x5666*x5668))+(((-1.0)*cj5*x5669*x5679))+((r22*x5673)));
evalcond[2]=((((1.8e-7)*x5679))+(((-0.335)*x5688))+(((-0.21066117)*sj1))+(((-1.11e-6)*x5687))+(((-1.8e-7)*x5686))+(((-1.0)*x5679*x5680))+(((-1.0)*pz))+((x5684*x5685))+(((-0.17676784)*cj1))+((r22*x5675))+(((1.11e-6)*sj6*x5668))+(((0.335)*x5695))+(((-0.15)*r20*x5676)));
evalcond[3]=(((sj0*x5671*x5673))+((cj4*r12*x5667))+(((-1.0)*x5667*x5669*x5671))+((x5666*x5693))+((r11*x5666*x5667))+(((-1.0)*x5691))+(((-1.0)*cj5*x5672*x5694))+(((-1.0)*x5689))+((cj6*x5673*x5677))+((x5670*x5681))+((x5670*x5683))+(((-1.0)*x5672*x5674*x5682))+((sj4*x5690))+(((-1.0)*x5669*x5676*x5677)));
evalcond[4]=(x5688+(((-1.0)*sj5*x5669*x5670))+((x5681*x5694))+(((-1.0)*x5696))+(((-1.0)*r12*x5667*x5669))+((x5670*x5673))+((r12*sj0*x5673))+(((-1.0)*cj5*cj6*x5669*x5677))+(((-1.0)*x5672*x5676*x5677))+((cj0*cj5*r01*x5666))+((cj4*x5667*x5674))+(((-1.0)*x5667*x5671*x5672))+(((-1.0)*x5669*x5671*x5682))+((r11*x5666*x5682)));
evalcond[5]=((((-1.11e-6)*r12*x5667))+(((-0.15)*x5667*x5671))+(((1.8e-7)*cj6*x5677))+(((-0.21066117)*cj1))+((x5670*x5675))+((x5680*x5694))+(((0.17676784)*sj1))+((r12*sj0*x5675))+(((-1.0)*x5671*x5692))+(((-1.8e-7)*x5694))+(((-1.11e-6)*sj5*x5670))+(((-1.0)*cj6*x5677*x5680))+(((-0.15)*x5676*x5677))+((x5684*x5693))+(((0.15)*x5667*x5674))+(((-1.0)*py*sj0))+((x5671*x5678))+(((-1.0)*x5674*x5678))+(((0.335)*x5691))+(((0.335)*x5689))+(((-1.0)*cj0*px))+((x5674*x5692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5697=(cj1*sj6);
IkReal x5698=(r10*sj0);
IkReal x5699=(cj0*r00);
IkReal x5700=((1.0)*sj1);
IkReal x5701=(cj1*cj6);
IkReal x5702=(r11*sj0);
IkReal x5703=(sj6*x5700);
IkReal x5704=(cj0*cj6*r01);
if( IKabs((((x5701*x5702))+((cj6*r21*sj1))+((cj0*r01*x5701))+((r20*sj1*sj6))+((x5697*x5699))+((x5697*x5698)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*x5700*x5702))+(((-1.0)*x5700*x5704))+(((-1.0)*x5699*x5703))+(((-1.0)*x5698*x5703))+((r21*x5701))+((r20*x5697)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x5701*x5702))+((cj6*r21*sj1))+((cj0*r01*x5701))+((r20*sj1*sj6))+((x5697*x5699))+((x5697*x5698))))+IKsqr(((((-1.0)*cj6*x5700*x5702))+(((-1.0)*x5700*x5704))+(((-1.0)*x5699*x5703))+(((-1.0)*x5698*x5703))+((r21*x5701))+((r20*x5697))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x5701*x5702))+((cj6*r21*sj1))+((cj0*r01*x5701))+((r20*sj1*sj6))+((x5697*x5699))+((x5697*x5698))), ((((-1.0)*cj6*x5700*x5702))+(((-1.0)*x5700*x5704))+(((-1.0)*x5699*x5703))+(((-1.0)*x5698*x5703))+((r21*x5701))+((r20*x5697))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5705=IKsin(j2);
IkReal x5706=IKcos(j2);
IkReal x5707=(sj0*sj4);
IkReal x5708=(r11*sj6);
IkReal x5709=((1.0)*cj6);
IkReal x5710=(cj0*r01);
IkReal x5711=(cj5*r12);
IkReal x5712=((1.0)*sj6);
IkReal x5713=(cj0*cj5);
IkReal x5714=((1.11e-6)*sj0);
IkReal x5715=(r12*sj5);
IkReal x5716=(cj6*r10);
IkReal x5717=(sj4*sj5);
IkReal x5718=(cj0*r00);
IkReal x5719=((0.15)*sj0);
IkReal x5720=((1.8e-7)*sj0);
IkReal x5721=((1.0)*sj1);
IkReal x5722=(cj6*r20);
IkReal x5723=((0.15)*sj5);
IkReal x5724=(cj6*r00);
IkReal x5725=(cj5*r22);
IkReal x5726=(r21*sj6);
IkReal x5727=((1.0)*sj0);
IkReal x5728=((1.11e-6)*cj5);
IkReal x5729=(cj4*cj5);
IkReal x5730=(r22*sj5);
IkReal x5731=(cj1*x5705);
IkReal x5732=(cj1*x5706);
IkReal x5733=(cj0*r02*sj5);
IkReal x5734=(sj1*x5705);
IkReal x5735=(x5706*x5721);
evalcond[0]=((((-1.0)*r21*x5709))+(((-1.0)*r20*x5712))+x5734+x5732);
evalcond[1]=((((-1.0)*r11*sj0*x5709))+(((-1.0)*r10*sj0*x5712))+(((-1.0)*x5735))+(((-1.0)*x5709*x5710))+(((-1.0)*x5712*x5718))+x5731);
evalcond[2]=((((-1.0)*x5735))+(((-1.0)*r20*x5709*x5717))+((x5717*x5726))+((sj4*x5725))+((x5722*x5729))+((cj4*x5730))+(((-1.0)*r21*x5712*x5729))+x5731);
evalcond[3]=(((x5726*x5728))+(((-1.11e-6)*x5730))+((x5723*x5726))+(((-0.21066117)*sj1))+(((1.8e-7)*x5722))+(((-0.335)*x5731))+(((-1.0)*x5722*x5728))+(((-1.0)*x5722*x5723))+(((-1.0)*pz))+(((-1.8e-7)*x5726))+(((0.15)*x5725))+(((-0.17676784)*cj1))+(((0.335)*sj1*x5706)));
evalcond[4]=(((x5707*x5711))+((sj0*x5716*x5729))+(((-1.0)*x5705*x5721))+((sj5*x5707*x5708))+(((-1.0)*x5709*x5717*x5718))+((cj4*x5713*x5724))+(((-1.0)*x5710*x5712*x5729))+((cj4*x5733))+((cj4*sj0*x5715))+(((-1.0)*r10*sj5*x5707*x5709))+((sj6*x5710*x5717))+(((-1.0)*x5732))+(((-1.0)*x5708*x5727*x5729))+((r02*sj4*x5713)));
evalcond[5]=((((-1.11e-6)*x5733))+(((-1.0)*sj5*x5716*x5719))+((sj6*x5710*x5728))+((sj6*x5710*x5723))+(((0.335)*x5732))+(((0.335)*x5734))+(((-0.21066117)*cj1))+(((0.15)*r02*x5713))+(((-1.8e-7)*sj6*x5710))+(((-1.0)*x5714*x5715))+(((-1.0)*py*x5727))+(((-1.11e-6)*x5713*x5724))+(((0.17676784)*sj1))+((x5711*x5719))+((x5716*x5720))+(((1.8e-7)*cj6*x5718))+(((-1.0)*cj6*x5718*x5723))+((cj5*x5708*x5714))+((sj5*x5708*x5719))+(((-1.0)*cj5*x5714*x5716))+(((-1.0)*x5708*x5720))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5736=(cj3*sj0);
IkReal x5737=(r10*sj6);
IkReal x5738=((1.0)*cj1);
IkReal x5739=(cj6*sj1);
IkReal x5740=(cj0*cj3);
IkReal x5741=(sj3*sj4);
IkReal x5742=(sj1*sj5);
IkReal x5743=(r00*sj6);
IkReal x5744=(cj5*r20);
IkReal x5745=(r21*sj6);
IkReal x5746=(cj5*r22);
IkReal x5747=(cj4*sj3);
IkReal x5748=(r20*sj5);
IkReal x5749=(cj1*x5747);
CheckValue<IkReal> x5750=IKPowWithIntegerCheck(IKsign((cj3*sj3)),-1);
if(!x5750.valid){
continue;
}
CheckValue<IkReal> x5751 = IKatan2WithCheck(IkReal(((((-1.0)*x5739*x5747*x5748))+(((-1.0)*cj6*r01*x5738*x5740))+(((-1.0)*r22*x5741*x5742))+(((-1.0)*cj6*r11*x5736*x5738))+(((-1.0)*x5736*x5737*x5738))+((x5742*x5745*x5747))+((sj1*x5746*x5747))+(((-1.0)*x5739*x5741*x5744))+(((-1.0)*x5738*x5740*x5743))+((cj5*sj1*x5741*x5745)))),IkReal((((x5746*x5749))+(((-1.0)*cj6*x5738*x5747*x5748))+((cj1*cj5*x5741*x5745))+((sj1*x5740*x5743))+((r11*x5736*x5739))+((sj5*x5745*x5749))+(((-1.0)*r22*sj5*x5738*x5741))+((r01*x5739*x5740))+(((-1.0)*cj6*x5738*x5741*x5744))+((sj1*x5736*x5737)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5751.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5750.value)))+(x5751.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5752=IKcos(j2);
IkReal x5753=IKsin(j2);
IkReal x5754=(cj6*sj5);
IkReal x5755=((1.0)*sj3);
IkReal x5756=((1.0)*r20);
IkReal x5757=((1.0)*cj6);
IkReal x5758=(r12*sj0);
IkReal x5759=(cj0*r02);
IkReal x5760=((1.11e-6)*sj5);
IkReal x5761=((1.0)*cj3);
IkReal x5762=(cj5*r22);
IkReal x5763=(cj6*r20);
IkReal x5764=((1.11e-6)*cj5);
IkReal x5765=(cj4*cj5);
IkReal x5766=(sj4*sj6);
IkReal x5767=(r11*sj0);
IkReal x5768=((1.8e-7)*sj6);
IkReal x5769=(cj0*r00);
IkReal x5770=((0.15)*sj6);
IkReal x5771=((1.0)*cj0);
IkReal x5772=(r01*sj6);
IkReal x5773=((1.0)*sj6);
IkReal x5774=(cj4*sj5);
IkReal x5775=(cj0*r01);
IkReal x5776=(cj5*sj4);
IkReal x5777=(r10*sj0);
IkReal x5778=((0.15)*cj5);
IkReal x5779=((1.8e-7)*cj6);
IkReal x5780=((1.0)*x5777);
IkReal x5781=(cj1*x5753);
IkReal x5782=(cj6*x5776);
IkReal x5783=(r21*sj5*sj6);
IkReal x5784=((1.0)*sj4*sj5);
IkReal x5785=(sj1*x5752);
IkReal x5786=(sj5*x5775);
IkReal x5787=(cj1*x5752);
IkReal x5788=(sj1*x5753);
evalcond[0]=((((-1.0)*sj6*x5756))+(((-1.0)*x5755*x5788))+(((-1.0)*x5755*x5787))+(((-1.0)*r21*x5757)));
evalcond[1]=((((-1.0)*x5769*x5773))+(((-1.0)*x5755*x5781))+(((-1.0)*x5757*x5775))+((sj3*x5785))+(((-1.0)*x5757*x5767))+(((-1.0)*x5773*x5777)));
evalcond[2]=((((-1.0)*sj4*x5754*x5756))+((r22*x5774))+((sj4*x5762))+(((-1.0)*r21*x5765*x5773))+(((-1.0)*x5785))+((r21*sj5*x5766))+((x5763*x5765))+x5781);
evalcond[3]=((((-1.0)*cj4*x5754*x5756))+((cj5*r21*x5766))+(((-1.0)*x5761*x5787))+(((-1.0)*x5761*x5788))+((r21*sj6*x5774))+(((-1.0)*x5756*x5782))+(((-1.0)*r22*x5784))+((cj4*x5762)));
evalcond[4]=((((-1.0)*r21*x5768))+(((-0.21066117)*sj1))+(((1.8e-7)*x5763))+(((-1.0)*pz))+(((-0.15)*r20*x5754))+(((0.335)*x5785))+(((-0.17676784)*cj1))+(((0.15)*x5762))+((r21*sj6*x5764))+(((-1.0)*x5763*x5764))+(((-1.0)*r22*x5760))+(((-0.335)*x5781))+((r21*sj5*x5770)));
evalcond[5]=((((-1.0)*x5765*x5767*x5773))+((cj6*x5765*x5769))+((cj6*x5765*x5777))+(((-1.0)*x5765*x5771*x5772))+(((-1.0)*x5788))+(((-1.0)*x5787))+((x5758*x5774))+((x5758*x5776))+(((-1.0)*sj4*x5754*x5780))+((sj5*x5766*x5767))+((x5759*x5774))+((x5759*x5776))+(((-1.0)*sj4*x5754*x5769))+((x5766*x5786)));
evalcond[6]=(((cj3*x5785))+(((-1.0)*x5757*x5776*x5777))+(((-1.0)*cj4*x5754*x5769))+((cj5*x5766*x5775))+(((-1.0)*x5761*x5781))+(((-1.0)*x5759*x5784))+(((-1.0)*x5757*x5769*x5776))+((cj5*x5766*x5767))+((sj6*x5767*x5774))+((cj0*x5772*x5774))+(((-1.0)*cj4*x5754*x5780))+((x5759*x5765))+((x5758*x5765))+(((-1.0)*x5758*x5784)));
evalcond[7]=(((x5770*x5786))+(((-1.0)*x5767*x5768))+((x5777*x5779))+(((-0.21066117)*cj1))+((x5769*x5779))+(((0.17676784)*sj1))+(((-1.0)*x5758*x5760))+((sj6*x5764*x5767))+(((-1.0)*px*x5771))+(((-0.15)*x5754*x5777))+(((-0.15)*x5754*x5769))+((cj0*x5764*x5772))+(((0.335)*x5788))+(((0.335)*x5787))+(((-1.0)*cj6*x5764*x5769))+(((-1.0)*py*sj0))+(((-1.0)*x5759*x5760))+(((-1.0)*cj6*x5764*x5777))+((sj5*x5767*x5770))+((x5758*x5778))+(((-1.0)*x5768*x5775))+((x5759*x5778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5789=((1.0)*sj1);
IkReal x5790=(r20*sj6);
IkReal x5791=(cj6*r21);
IkReal x5792=((1.0)*cj1);
IkReal x5793=(cj0*r00*sj6);
IkReal x5794=(cj0*cj6*r01);
IkReal x5795=(r10*sj0*sj6);
IkReal x5796=(cj6*r11*sj0);
CheckValue<IkReal> x5797=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x5797.valid){
continue;
}
CheckValue<IkReal> x5798 = IKatan2WithCheck(IkReal(((((-1.0)*x5792*x5795))+(((-1.0)*x5792*x5794))+(((-1.0)*x5792*x5796))+(((-1.0)*x5792*x5793))+(((-1.0)*x5789*x5790))+(((-1.0)*x5789*x5791)))),IkReal(((((-1.0)*x5791*x5792))+((sj1*x5793))+((sj1*x5794))+((sj1*x5795))+((sj1*x5796))+(((-1.0)*x5790*x5792)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5798.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5797.value)))+(x5798.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5799=IKcos(j2);
IkReal x5800=IKsin(j2);
IkReal x5801=(cj6*sj5);
IkReal x5802=((1.0)*sj3);
IkReal x5803=((1.0)*r20);
IkReal x5804=((1.0)*cj6);
IkReal x5805=(r12*sj0);
IkReal x5806=(cj0*r02);
IkReal x5807=((1.11e-6)*sj5);
IkReal x5808=((1.0)*cj3);
IkReal x5809=(cj5*r22);
IkReal x5810=(cj6*r20);
IkReal x5811=((1.11e-6)*cj5);
IkReal x5812=(cj4*cj5);
IkReal x5813=(sj4*sj6);
IkReal x5814=(r11*sj0);
IkReal x5815=((1.8e-7)*sj6);
IkReal x5816=(cj0*r00);
IkReal x5817=((0.15)*sj6);
IkReal x5818=((1.0)*cj0);
IkReal x5819=(r01*sj6);
IkReal x5820=((1.0)*sj6);
IkReal x5821=(cj4*sj5);
IkReal x5822=(cj0*r01);
IkReal x5823=(cj5*sj4);
IkReal x5824=(r10*sj0);
IkReal x5825=((0.15)*cj5);
IkReal x5826=((1.8e-7)*cj6);
IkReal x5827=((1.0)*x5824);
IkReal x5828=(cj1*x5800);
IkReal x5829=(cj6*x5823);
IkReal x5830=(r21*sj5*sj6);
IkReal x5831=((1.0)*sj4*sj5);
IkReal x5832=(sj1*x5799);
IkReal x5833=(sj5*x5822);
IkReal x5834=(cj1*x5799);
IkReal x5835=(sj1*x5800);
evalcond[0]=((((-1.0)*sj6*x5803))+(((-1.0)*x5802*x5834))+(((-1.0)*x5802*x5835))+(((-1.0)*r21*x5804)));
evalcond[1]=((((-1.0)*x5804*x5814))+(((-1.0)*x5820*x5824))+(((-1.0)*x5802*x5828))+(((-1.0)*x5816*x5820))+((sj3*x5832))+(((-1.0)*x5804*x5822)));
evalcond[2]=((((-1.0)*r21*x5812*x5820))+(((-1.0)*sj4*x5801*x5803))+((x5810*x5812))+((r21*sj5*x5813))+((r22*x5821))+((sj4*x5809))+(((-1.0)*x5832))+x5828);
evalcond[3]=((((-1.0)*r22*x5831))+((cj5*r21*x5813))+(((-1.0)*x5803*x5829))+(((-1.0)*x5808*x5834))+(((-1.0)*x5808*x5835))+((r21*sj6*x5821))+(((-1.0)*cj4*x5801*x5803))+((cj4*x5809)));
evalcond[4]=((((0.335)*x5832))+(((-1.0)*r22*x5807))+(((-0.21066117)*sj1))+(((1.8e-7)*x5810))+(((-1.0)*x5810*x5811))+(((-1.0)*pz))+(((0.15)*x5809))+((r21*sj5*x5817))+(((-0.17676784)*cj1))+(((-1.0)*r21*x5815))+(((-0.335)*x5828))+(((-0.15)*r20*x5801))+((r21*sj6*x5811)));
evalcond[5]=(((x5806*x5823))+((x5806*x5821))+((x5805*x5823))+((x5805*x5821))+((cj6*x5812*x5824))+(((-1.0)*x5812*x5818*x5819))+(((-1.0)*sj4*x5801*x5816))+(((-1.0)*sj4*x5801*x5827))+((x5813*x5833))+((sj5*x5813*x5814))+(((-1.0)*x5812*x5814*x5820))+(((-1.0)*x5834))+(((-1.0)*x5835))+((cj6*x5812*x5816)));
evalcond[6]=(((x5805*x5812))+((x5806*x5812))+((cj0*x5819*x5821))+(((-1.0)*x5806*x5831))+(((-1.0)*x5804*x5823*x5824))+(((-1.0)*x5805*x5831))+((cj3*x5832))+((cj5*x5813*x5814))+(((-1.0)*cj4*x5801*x5816))+(((-1.0)*cj4*x5801*x5827))+(((-1.0)*x5808*x5828))+((sj6*x5814*x5821))+(((-1.0)*x5804*x5816*x5823))+((cj5*x5813*x5822)));
evalcond[7]=(((sj6*x5811*x5814))+(((0.335)*x5834))+(((0.335)*x5835))+(((-1.0)*px*x5818))+(((-0.15)*x5801*x5816))+(((-0.21066117)*cj1))+((x5806*x5825))+(((-1.0)*x5814*x5815))+((x5816*x5826))+((x5805*x5825))+(((0.17676784)*sj1))+(((-1.0)*cj6*x5811*x5824))+(((-1.0)*x5805*x5807))+(((-0.15)*x5801*x5824))+(((-1.0)*x5806*x5807))+(((-1.0)*x5815*x5822))+((x5824*x5826))+(((-1.0)*py*sj0))+((cj0*x5811*x5819))+((sj5*x5814*x5817))+((x5817*x5833))+(((-1.0)*cj6*x5811*x5816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5836=(cj3*sj5);
IkReal x5837=(cj4*sj5);
IkReal x5838=((1.0)*cj4);
IkReal x5839=(cj3*cj5);
IkReal x5840=((1.0)*sj4);
IkReal x5841=(cj6*sj4);
IkReal x5842=(sj6*x5840);
IkReal x5843=(cj4*sj6*x5839);
CheckValue<IkReal> x5844=IKPowWithIntegerCheck(IKsign((((r20*((((cj6*x5837))+((cj5*x5841))))))+((r22*((((sj4*sj5))+(((-1.0)*cj5*x5838))))))+((r21*(((((-1.0)*sj6*x5837))+(((-1.0)*cj5*x5842)))))))),-1);
if(!x5844.valid){
continue;
}
CheckValue<IkReal> x5845 = IKatan2WithCheck(IkReal((((r10*x5836*x5841))+((r11*x5843))+(((-1.0)*r11*x5836*x5842))+(((-1.0)*r12*x5839*x5840))+(((-1.0)*r12*x5836*x5838))+(((-1.0)*cj6*r10*x5838*x5839)))),IkReal(((((-1.0)*r02*x5836*x5838))+(((-1.0)*r01*x5836*x5842))+(((-1.0)*r02*x5839*x5840))+((r01*x5843))+((r00*x5836*x5841))+(((-1.0)*cj6*r00*x5838*x5839)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5845.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5844.value)))+(x5845.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5846=IKcos(j0);
IkReal x5847=IKsin(j0);
IkReal x5848=(r01*sj6);
IkReal x5849=((0.15)*sj5);
IkReal x5850=(cj5*sj4);
IkReal x5851=(cj4*r02);
IkReal x5852=(sj4*sj5);
IkReal x5853=((1.0)*cj4);
IkReal x5854=(r02*sj4);
IkReal x5855=(cj6*r00);
IkReal x5856=((1.11e-6)*cj5);
IkReal x5857=(sj5*x5847);
IkReal x5858=(cj5*x5847);
IkReal x5859=(r12*x5846);
IkReal x5860=((1.0)*x5847);
IkReal x5861=((1.8e-7)*x5847);
IkReal x5862=((1.0)*sj4*x5855);
IkReal x5863=(cj6*r10*x5846);
IkReal x5864=(r11*sj6*x5846);
evalcond[0]=((((-1.0)*cj6*r01*x5860))+((cj6*r11*x5846))+(((-1.0)*r00*sj6*x5860))+((r10*sj6*x5846))+(((-1.0)*cj3)));
evalcond[1]=(((x5847*x5848*x5852))+(((-1.0)*x5850*x5859))+((x5852*x5863))+(((-1.0)*x5852*x5855*x5860))+(((-1.0)*sj5*x5853*x5859))+((cj4*cj5*x5864))+(((-1.0)*cj5*x5853*x5863))+((x5851*x5857))+((cj4*x5855*x5858))+((r02*x5847*x5850))+(((-1.0)*x5848*x5853*x5858))+(((-1.0)*x5852*x5864)));
evalcond[2]=(((x5847*x5848*x5850))+sj3+(((-1.0)*x5853*x5855*x5857))+(((-1.0)*r02*x5852*x5860))+((x5850*x5863))+(((-1.0)*x5850*x5864))+((x5852*x5859))+((x5851*x5858))+(((-1.0)*cj5*x5853*x5859))+(((-1.0)*sj5*x5853*x5864))+(((-1.0)*x5850*x5855*x5860))+((cj4*x5848*x5857))+((cj4*sj5*x5863)));
evalcond[3]=((-0.0005)+((x5847*x5848*x5856))+(((-1.0)*px*x5860))+(((1.8e-7)*x5864))+(((1.11e-6)*sj5*x5859))+(((-1.0)*x5847*x5855*x5856))+((x5847*x5848*x5849))+(((-1.11e-6)*r02*x5857))+((x5855*x5861))+((x5856*x5863))+(((-1.0)*x5847*x5849*x5855))+(((-1.0)*x5849*x5864))+(((-0.15)*cj5*x5859))+(((-1.0)*x5856*x5864))+((py*x5846))+(((0.15)*r02*x5858))+(((-1.8e-7)*x5863))+((x5849*x5863))+(((-1.0)*x5848*x5861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((((-0.350613907701634)*cj0*r01*sj5*sj6))+(((2.33742605134422)*py*sj0))+(((-2.78560232882098)*pz))+(((-0.783037727200315)*cj5*r12*sj0*sj4))+(((0.350613907701634)*cj0*cj6*r00*sj5))+(((2.59454291699209e-6)*cj5*cj6*r10*sj0))+(((-0.783037727200315)*cj0*cj5*r02*sj4))+(((-2.59454291699209e-6)*cj0*cj5*r01*sj6))+(((-0.350613907701634)*cj5*r12*sj0))+(((0.417840349323147)*r21*sj5*sj6))+(((-2.59454291699209e-6)*cj5*r11*sj0*sj6))+(((2.59454291699209e-6)*cj0*r02*sj5))+(((4.2073668924196e-7)*r11*sj0*sj6))+(((4.2073668924196e-7)*cj0*r01*sj6))+(((-0.933176780155028)*cj4*cj5*r21*sj6))+(((2.33742605134422)*cj0*px))+(((-0.783037727200315)*r11*sj0*sj4*sj5*sj6))+(((-0.783037727200315)*cj0*cj4*r02*sj5))+(((0.783037727200315)*cj0*cj4*cj5*r01*sj6))+(((-4.2073668924196e-7)*cj6*r10*sj0))+(((-3.09201858499129e-6)*cj5*cj6*r20))+(((0.350613907701634)*cj6*r10*sj0*sj5))+(((-0.783037727200315)*cj0*r01*sj4*sj5*sj6))+(((3.09201858499129e-6)*cj5*r21*sj6))+(((-0.417840349323147)*cj6*r20*sj5))+(((0.783037727200315)*cj6*r10*sj0*sj4*sj5))+(((0.933176780155028)*cj4*r22*sj5))+(((0.783037727200315)*cj0*cj6*r00*sj4*sj5))+(((-0.783037727200315)*cj4*r12*sj0*sj5))+(((0.933176780155028)*cj5*r22*sj4))+(((-5.01408419187776e-7)*r21*sj6))+(((0.417840349323147)*cj5*r22))+(((-3.09201858499129e-6)*r22*sj5))+(((2.59454291699209e-6)*r12*sj0*sj5))+(((2.59454291699209e-6)*cj0*cj5*cj6*r00))+(((0.783037727200315)*cj4*cj5*r11*sj0*sj6))+(((-0.783037727200315)*cj4*cj5*cj6*r10*sj0))+(((-0.350613907701634)*r11*sj0*sj5*sj6))+(((-0.783037727200315)*cj0*cj4*cj5*cj6*r00))+(((-0.350613907701634)*cj0*cj5*r02))+(((0.933176780155028)*r21*sj4*sj5*sj6))+(((-4.2073668924196e-7)*cj0*cj6*r00))+(((-0.933176780155028)*cj6*r20*sj4*sj5))+(((5.01408419187776e-7)*cj6*r20))+(((0.933176780155028)*cj4*cj5*cj6*r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((4.2073668924196e-7)*cj6*r20))+(((0.933176780155028)*cj0*cj4*cj5*cj6*r00))+(((2.59454291699209e-6)*cj5*r21*sj6))+(((-0.783037727200315)*cj4*cj5*r21*sj6))+(((0.417840349323147)*cj0*r01*sj5*sj6))+(((3.09201858499129e-6)*cj0*cj5*r01*sj6))+(((-4.2073668924196e-7)*r21*sj6))+(((-0.417840349323147)*cj0*cj6*r00*sj5))+(((0.783037727200315)*cj4*r22*sj5))+(((-5.01408419187776e-7)*r11*sj0*sj6))+(((-0.783037727200315)*cj6*r20*sj4*sj5))+(((0.933176780155028)*r11*sj0*sj4*sj5*sj6))+(((0.417840349323147)*r11*sj0*sj5*sj6))+(((-2.33742605134422)*pz))+(((0.933176780155028)*cj5*r12*sj0*sj4))+(((-0.933176780155028)*cj6*r10*sj0*sj4*sj5))+(((-3.09201858499129e-6)*r12*sj0*sj5))+(((0.350613907701634)*cj5*r22))+(((0.933176780155028)*cj0*cj4*r02*sj5))+(((3.09201858499129e-6)*cj5*r11*sj0*sj6))+(((-3.09201858499129e-6)*cj5*cj6*r10*sj0))+(((-0.933176780155028)*cj0*cj6*r00*sj4*sj5))+(((5.01408419187776e-7)*cj0*cj6*r00))+(((-2.59454291699209e-6)*r22*sj5))+(((0.350613907701634)*r21*sj5*sj6))+(((-5.01408419187776e-7)*cj0*r01*sj6))+(((-0.350613907701634)*cj6*r20*sj5))+(((0.783037727200315)*cj4*cj5*cj6*r20))+(((0.933176780155028)*cj4*r12*sj0*sj5))+(((-3.09201858499129e-6)*cj0*r02*sj5))+(((-2.59454291699209e-6)*cj5*cj6*r20))+(((-2.78560232882098)*py*sj0))+(((0.783037727200315)*r21*sj4*sj5*sj6))+(((0.933176780155028)*cj0*cj5*r02*sj4))+(((0.417840349323147)*cj0*cj5*r02))+(((0.417840349323147)*cj5*r12*sj0))+(((-0.417840349323147)*cj6*r10*sj0*sj5))+(((0.933176780155028)*cj4*cj5*cj6*r10*sj0))+(((-2.78560232882098)*cj0*px))+(((-0.933176780155028)*cj4*cj5*r11*sj0*sj6))+(((-0.933176780155028)*cj0*cj4*cj5*r01*sj6))+(((-3.09201858499129e-6)*cj0*cj5*cj6*r00))+(((0.783037727200315)*cj5*r22*sj4))+(((5.01408419187776e-7)*cj6*r10*sj0))+(((0.933176780155028)*cj0*r01*sj4*sj5*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.350613907701634)*cj0*r01*sj5*sj6))+(((2.33742605134422)*py*sj0))+(((-2.78560232882098)*pz))+(((-0.783037727200315)*cj5*r12*sj0*sj4))+(((0.350613907701634)*cj0*cj6*r00*sj5))+(((2.59454291699209e-6)*cj5*cj6*r10*sj0))+(((-0.783037727200315)*cj0*cj5*r02*sj4))+(((-2.59454291699209e-6)*cj0*cj5*r01*sj6))+(((-0.350613907701634)*cj5*r12*sj0))+(((0.417840349323147)*r21*sj5*sj6))+(((-2.59454291699209e-6)*cj5*r11*sj0*sj6))+(((2.59454291699209e-6)*cj0*r02*sj5))+(((4.2073668924196e-7)*r11*sj0*sj6))+(((4.2073668924196e-7)*cj0*r01*sj6))+(((-0.933176780155028)*cj4*cj5*r21*sj6))+(((2.33742605134422)*cj0*px))+(((-0.783037727200315)*r11*sj0*sj4*sj5*sj6))+(((-0.783037727200315)*cj0*cj4*r02*sj5))+(((0.783037727200315)*cj0*cj4*cj5*r01*sj6))+(((-4.2073668924196e-7)*cj6*r10*sj0))+(((-3.09201858499129e-6)*cj5*cj6*r20))+(((0.350613907701634)*cj6*r10*sj0*sj5))+(((-0.783037727200315)*cj0*r01*sj4*sj5*sj6))+(((3.09201858499129e-6)*cj5*r21*sj6))+(((-0.417840349323147)*cj6*r20*sj5))+(((0.783037727200315)*cj6*r10*sj0*sj4*sj5))+(((0.933176780155028)*cj4*r22*sj5))+(((0.783037727200315)*cj0*cj6*r00*sj4*sj5))+(((-0.783037727200315)*cj4*r12*sj0*sj5))+(((0.933176780155028)*cj5*r22*sj4))+(((-5.01408419187776e-7)*r21*sj6))+(((0.417840349323147)*cj5*r22))+(((-3.09201858499129e-6)*r22*sj5))+(((2.59454291699209e-6)*r12*sj0*sj5))+(((2.59454291699209e-6)*cj0*cj5*cj6*r00))+(((0.783037727200315)*cj4*cj5*r11*sj0*sj6))+(((-0.783037727200315)*cj4*cj5*cj6*r10*sj0))+(((-0.350613907701634)*r11*sj0*sj5*sj6))+(((-0.783037727200315)*cj0*cj4*cj5*cj6*r00))+(((-0.350613907701634)*cj0*cj5*r02))+(((0.933176780155028)*r21*sj4*sj5*sj6))+(((-4.2073668924196e-7)*cj0*cj6*r00))+(((-0.933176780155028)*cj6*r20*sj4*sj5))+(((5.01408419187776e-7)*cj6*r20))+(((0.933176780155028)*cj4*cj5*cj6*r20))))+IKsqr(((((4.2073668924196e-7)*cj6*r20))+(((0.933176780155028)*cj0*cj4*cj5*cj6*r00))+(((2.59454291699209e-6)*cj5*r21*sj6))+(((-0.783037727200315)*cj4*cj5*r21*sj6))+(((0.417840349323147)*cj0*r01*sj5*sj6))+(((3.09201858499129e-6)*cj0*cj5*r01*sj6))+(((-4.2073668924196e-7)*r21*sj6))+(((-0.417840349323147)*cj0*cj6*r00*sj5))+(((0.783037727200315)*cj4*r22*sj5))+(((-5.01408419187776e-7)*r11*sj0*sj6))+(((-0.783037727200315)*cj6*r20*sj4*sj5))+(((0.933176780155028)*r11*sj0*sj4*sj5*sj6))+(((0.417840349323147)*r11*sj0*sj5*sj6))+(((-2.33742605134422)*pz))+(((0.933176780155028)*cj5*r12*sj0*sj4))+(((-0.933176780155028)*cj6*r10*sj0*sj4*sj5))+(((-3.09201858499129e-6)*r12*sj0*sj5))+(((0.350613907701634)*cj5*r22))+(((0.933176780155028)*cj0*cj4*r02*sj5))+(((3.09201858499129e-6)*cj5*r11*sj0*sj6))+(((-3.09201858499129e-6)*cj5*cj6*r10*sj0))+(((-0.933176780155028)*cj0*cj6*r00*sj4*sj5))+(((5.01408419187776e-7)*cj0*cj6*r00))+(((-2.59454291699209e-6)*r22*sj5))+(((0.350613907701634)*r21*sj5*sj6))+(((-5.01408419187776e-7)*cj0*r01*sj6))+(((-0.350613907701634)*cj6*r20*sj5))+(((0.783037727200315)*cj4*cj5*cj6*r20))+(((0.933176780155028)*cj4*r12*sj0*sj5))+(((-3.09201858499129e-6)*cj0*r02*sj5))+(((-2.59454291699209e-6)*cj5*cj6*r20))+(((-2.78560232882098)*py*sj0))+(((0.783037727200315)*r21*sj4*sj5*sj6))+(((0.933176780155028)*cj0*cj5*r02*sj4))+(((0.417840349323147)*cj0*cj5*r02))+(((0.417840349323147)*cj5*r12*sj0))+(((-0.417840349323147)*cj6*r10*sj0*sj5))+(((0.933176780155028)*cj4*cj5*cj6*r10*sj0))+(((-2.78560232882098)*cj0*px))+(((-0.933176780155028)*cj4*cj5*r11*sj0*sj6))+(((-0.933176780155028)*cj0*cj4*cj5*r01*sj6))+(((-3.09201858499129e-6)*cj0*cj5*cj6*r00))+(((0.783037727200315)*cj5*r22*sj4))+(((5.01408419187776e-7)*cj6*r10*sj0))+(((0.933176780155028)*cj0*r01*sj4*sj5*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-0.350613907701634)*cj0*r01*sj5*sj6))+(((2.33742605134422)*py*sj0))+(((-2.78560232882098)*pz))+(((-0.783037727200315)*cj5*r12*sj0*sj4))+(((0.350613907701634)*cj0*cj6*r00*sj5))+(((2.59454291699209e-6)*cj5*cj6*r10*sj0))+(((-0.783037727200315)*cj0*cj5*r02*sj4))+(((-2.59454291699209e-6)*cj0*cj5*r01*sj6))+(((-0.350613907701634)*cj5*r12*sj0))+(((0.417840349323147)*r21*sj5*sj6))+(((-2.59454291699209e-6)*cj5*r11*sj0*sj6))+(((2.59454291699209e-6)*cj0*r02*sj5))+(((4.2073668924196e-7)*r11*sj0*sj6))+(((4.2073668924196e-7)*cj0*r01*sj6))+(((-0.933176780155028)*cj4*cj5*r21*sj6))+(((2.33742605134422)*cj0*px))+(((-0.783037727200315)*r11*sj0*sj4*sj5*sj6))+(((-0.783037727200315)*cj0*cj4*r02*sj5))+(((0.783037727200315)*cj0*cj4*cj5*r01*sj6))+(((-4.2073668924196e-7)*cj6*r10*sj0))+(((-3.09201858499129e-6)*cj5*cj6*r20))+(((0.350613907701634)*cj6*r10*sj0*sj5))+(((-0.783037727200315)*cj0*r01*sj4*sj5*sj6))+(((3.09201858499129e-6)*cj5*r21*sj6))+(((-0.417840349323147)*cj6*r20*sj5))+(((0.783037727200315)*cj6*r10*sj0*sj4*sj5))+(((0.933176780155028)*cj4*r22*sj5))+(((0.783037727200315)*cj0*cj6*r00*sj4*sj5))+(((-0.783037727200315)*cj4*r12*sj0*sj5))+(((0.933176780155028)*cj5*r22*sj4))+(((-5.01408419187776e-7)*r21*sj6))+(((0.417840349323147)*cj5*r22))+(((-3.09201858499129e-6)*r22*sj5))+(((2.59454291699209e-6)*r12*sj0*sj5))+(((2.59454291699209e-6)*cj0*cj5*cj6*r00))+(((0.783037727200315)*cj4*cj5*r11*sj0*sj6))+(((-0.783037727200315)*cj4*cj5*cj6*r10*sj0))+(((-0.350613907701634)*r11*sj0*sj5*sj6))+(((-0.783037727200315)*cj0*cj4*cj5*cj6*r00))+(((-0.350613907701634)*cj0*cj5*r02))+(((0.933176780155028)*r21*sj4*sj5*sj6))+(((-4.2073668924196e-7)*cj0*cj6*r00))+(((-0.933176780155028)*cj6*r20*sj4*sj5))+(((5.01408419187776e-7)*cj6*r20))+(((0.933176780155028)*cj4*cj5*cj6*r20))), ((((4.2073668924196e-7)*cj6*r20))+(((0.933176780155028)*cj0*cj4*cj5*cj6*r00))+(((2.59454291699209e-6)*cj5*r21*sj6))+(((-0.783037727200315)*cj4*cj5*r21*sj6))+(((0.417840349323147)*cj0*r01*sj5*sj6))+(((3.09201858499129e-6)*cj0*cj5*r01*sj6))+(((-4.2073668924196e-7)*r21*sj6))+(((-0.417840349323147)*cj0*cj6*r00*sj5))+(((0.783037727200315)*cj4*r22*sj5))+(((-5.01408419187776e-7)*r11*sj0*sj6))+(((-0.783037727200315)*cj6*r20*sj4*sj5))+(((0.933176780155028)*r11*sj0*sj4*sj5*sj6))+(((0.417840349323147)*r11*sj0*sj5*sj6))+(((-2.33742605134422)*pz))+(((0.933176780155028)*cj5*r12*sj0*sj4))+(((-0.933176780155028)*cj6*r10*sj0*sj4*sj5))+(((-3.09201858499129e-6)*r12*sj0*sj5))+(((0.350613907701634)*cj5*r22))+(((0.933176780155028)*cj0*cj4*r02*sj5))+(((3.09201858499129e-6)*cj5*r11*sj0*sj6))+(((-3.09201858499129e-6)*cj5*cj6*r10*sj0))+(((-0.933176780155028)*cj0*cj6*r00*sj4*sj5))+(((5.01408419187776e-7)*cj0*cj6*r00))+(((-2.59454291699209e-6)*r22*sj5))+(((0.350613907701634)*r21*sj5*sj6))+(((-5.01408419187776e-7)*cj0*r01*sj6))+(((-0.350613907701634)*cj6*r20*sj5))+(((0.783037727200315)*cj4*cj5*cj6*r20))+(((0.933176780155028)*cj4*r12*sj0*sj5))+(((-3.09201858499129e-6)*cj0*r02*sj5))+(((-2.59454291699209e-6)*cj5*cj6*r20))+(((-2.78560232882098)*py*sj0))+(((0.783037727200315)*r21*sj4*sj5*sj6))+(((0.933176780155028)*cj0*cj5*r02*sj4))+(((0.417840349323147)*cj0*cj5*r02))+(((0.417840349323147)*cj5*r12*sj0))+(((-0.417840349323147)*cj6*r10*sj0*sj5))+(((0.933176780155028)*cj4*cj5*cj6*r10*sj0))+(((-2.78560232882098)*cj0*px))+(((-0.933176780155028)*cj4*cj5*r11*sj0*sj6))+(((-0.933176780155028)*cj0*cj4*cj5*r01*sj6))+(((-3.09201858499129e-6)*cj0*cj5*cj6*r00))+(((0.783037727200315)*cj5*r22*sj4))+(((5.01408419187776e-7)*cj6*r10*sj0))+(((0.933176780155028)*cj0*r01*sj4*sj5*sj6))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x5865=IKsin(j1);
IkReal x5866=IKcos(j1);
IkReal x5867=(cj6*r10);
IkReal x5868=(sj5*sj6);
IkReal x5869=(r11*sj0);
IkReal x5870=((0.15)*sj3);
IkReal x5871=((0.335)*cj4);
IkReal x5872=(r12*sj0);
IkReal x5873=((0.335)*cj6);
IkReal x5874=((1.11e-6)*sj3);
IkReal x5875=(cj5*sj6);
IkReal x5876=((0.15)*cj3);
IkReal x5877=(cj3*r21);
IkReal x5878=((1.8e-7)*sj6);
IkReal x5879=(cj6*sj5);
IkReal x5880=(cj0*r00);
IkReal x5881=((0.335)*sj4);
IkReal x5882=((1.0)*pz);
IkReal x5883=(cj0*r01);
IkReal x5884=((1.11e-6)*cj3);
IkReal x5885=(cj5*cj6);
IkReal x5886=(cj3*sj0);
IkReal x5887=((1.0)*py);
IkReal x5888=(cj5*r22);
IkReal x5889=(cj5*sj4);
IkReal x5890=((0.335)*sj6);
IkReal x5891=((1.8e-7)*cj6);
IkReal x5892=(cj5*sj0);
IkReal x5893=(sj4*sj5);
IkReal x5894=(r22*sj5);
IkReal x5895=(sj0*sj5);
IkReal x5896=((1.8e-7)*sj0);
IkReal x5897=((0.21066117)*x5865);
IkReal x5898=((0.17676784)*x5866);
IkReal x5899=((0.17676784)*x5865);
IkReal x5900=(cj0*r02*sj5);
IkReal x5901=(cj0*cj5*r02);
IkReal x5902=((0.21066117)*x5866);
IkReal x5903=((1.0)*cj0*px);
IkReal x5904=(x5881*x5892);
evalcond[0]=((((-0.15)*r20*x5879))+(((-1.11e-6)*r20*x5885))+(((0.15)*r21*x5868))+(((1.11e-6)*r21*x5875))+(((-1.0)*r21*x5871*x5875))+((r20*x5871*x5885))+((r21*x5868*x5881))+((x5881*x5888))+(((-1.11e-6)*x5894))+((x5871*x5894))+((r20*x5891))+(((-1.0)*x5898))+(((-1.0)*x5897))+(((-1.0)*x5882))+(((-1.0)*r21*x5878))+(((-1.0)*r20*x5873*x5893))+(((0.15)*x5888)));
evalcond[1]=((((-1.11e-6)*sj5*x5872))+(((0.15)*cj5*x5872))+(((-1.0)*x5873*x5880*x5893))+(((1.11e-6)*x5875*x5883))+((cj5*x5872*x5881))+((x5867*x5896))+(((-1.11e-6)*x5900))+((sj5*x5871*x5872))+(((-1.11e-6)*x5867*x5892))+((x5868*x5881*x5883))+(((-1.0)*x5869*x5871*x5875))+(((0.15)*x5868*x5883))+(((-1.0)*x5867*x5881*x5895))+(((1.11e-6)*x5869*x5875))+((x5868*x5869*x5881))+(((0.15)*x5868*x5869))+(((-0.15)*x5867*x5895))+((x5867*x5871*x5892))+((x5880*x5891))+(((-1.0)*x5871*x5875*x5883))+(((-1.0)*sj0*x5887))+((x5871*x5900))+(((-1.0)*x5869*x5878))+(((-0.15)*x5879*x5880))+(((-1.11e-6)*x5880*x5885))+(((0.15)*x5901))+((x5871*x5880*x5885))+(((-1.0)*x5902))+(((-1.0)*x5903))+x5899+((x5881*x5901))+(((-1.0)*x5878*x5883)));
evalcond[2]=(((r20*x5870*x5879))+(((-1.0)*x5880*x5890))+(((-1.0)*r20*sj3*x5891))+(((-1.0)*r21*x5868*x5870))+(((-1.0)*r10*sj0*x5890))+((r21*sj3*x5878))+((r20*x5874*x5885))+(((-1.0)*x5869*x5873))+((sj3*x5898))+((sj3*x5897))+(((-1.0)*x5873*x5883))+((pz*sj3))+(((-1.0)*x5870*x5888))+((x5874*x5894))+(((-1.0)*r21*x5874*x5875)));
evalcond[3]=(((sj3*x5867*x5896))+((x5869*x5874*x5875))+((x5868*x5869*x5870))+(((-1.0)*sj3*x5869*x5878))+((cj5*x5870*x5872))+(((-1.0)*x5867*x5874*x5892))+((x5870*x5901))+(((-1.0)*sj3*x5878*x5883))+(((-1.0)*r20*x5890))+(((-1.0)*sj3*x5903))+(((-1.0)*sj3*x5902))+(((-1.0)*sj5*x5872*x5874))+((sj3*x5880*x5891))+(((-1.0)*x5874*x5880*x5885))+((x5868*x5870*x5883))+(((-1.0)*x5870*x5879*x5880))+(((-1.0)*r21*x5873))+((sj3*x5899))+((x5874*x5875*x5883))+(((-1.0)*x5874*x5900))+(((-1.0)*x5867*x5870*x5895))+(((-1.0)*sj0*sj3*x5887)));
evalcond[4]=((((-1.0)*x5877*x5878))+((r21*x5868*x5876))+((x5873*x5880*x5889))+(((-1.0)*cj3*x5897))+(((-1.0)*cj3*x5898))+(((-1.0)*x5875*x5881*x5883))+((cj3*r20*x5891))+(((-1.0)*x5871*x5901))+(((-1.0)*cj3*x5882))+((x5867*x5904))+(((-1.0)*x5884*x5894))+(((1.11e-6)*x5875*x5877))+(((-1.0)*cj5*x5871*x5872))+(((-1.0)*x5868*x5869*x5871))+((x5867*x5871*x5895))+(((-1.0)*x5868*x5871*x5883))+((sj5*x5872*x5881))+(((-1.0)*x5869*x5875*x5881))+((x5876*x5888))+(((-1.0)*r20*x5876*x5879))+((x5871*x5879*x5880))+(((-1.0)*r20*x5884*x5885))+((x5881*x5900)));
evalcond[5]=(((x5875*x5883*x5884))+((x5869*x5875*x5884))+((r21*x5868*x5871))+((x5868*x5869*x5876))+(((-1.0)*x5867*x5884*x5892))+(((-1.0)*x5886*x5887))+((r21*x5875*x5881))+((cj3*x5880*x5891))+((x5876*x5901))+((x5871*x5888))+(((-1.0)*cj3*x5903))+(((-1.0)*cj3*x5902))+(((1.8e-7)*x5867*x5886))+((cj5*x5872*x5876))+(((-1.0)*x5867*x5876*x5895))+(((-1.0)*r20*x5871*x5879))+(((-1.0)*x5884*x5900))+(((-1.0)*x5881*x5894))+(((-1.0)*x5876*x5879*x5880))+(((-1.0)*r20*x5873*x5889))+(((-1.0)*cj3*x5869*x5878))+(((-1.0)*cj3*x5878*x5883))+((cj3*x5899))+((x5868*x5876*x5883))+(((-1.0)*sj5*x5872*x5884))+(((-1.0)*x5880*x5884*x5885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x5905=(cj3*sj3);
j2eval[0]=x5905;
j2eval[1]=IKsign(x5905);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5906=(cj1*cj4);
IkReal x5907=(sj1*sj4);
IkReal x5908=(cj6*r20);
IkReal x5909=(r21*sj6);
IkReal x5910=(cj1*sj4);
IkReal x5911=((1.0)*cj5);
IkReal x5912=((1.0)*sj5);
IkReal x5913=(cj4*sj1);
IkReal x5914=(cj5*r22);
IkReal x5915=(r22*x5912);
IkReal x5916=(sj5*x5913);
if( IKabs(((((-1.0)*x5907*x5908*x5911))+((cj5*x5907*x5909))+(((-1.0)*x5909*x5910*x5912))+((cj5*x5906*x5909))+(((-1.0)*x5907*x5915))+((x5909*x5916))+(((-1.0)*x5906*x5915))+(((-1.0)*x5906*x5908*x5911))+(((-1.0)*x5908*x5912*x5913))+((sj5*x5908*x5910))+(((-1.0)*r22*x5910*x5911))+((x5913*x5914)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x5907*x5908*x5912))+((r22*x5916))+((sj5*x5907*x5909))+(((-1.0)*x5908*x5910*x5911))+(((-1.0)*x5909*x5911*x5913))+((cj5*x5909*x5910))+(((-1.0)*x5910*x5915))+(((-1.0)*x5906*x5908*x5912))+((x5907*x5914))+((sj5*x5906*x5909))+((x5906*x5914))+((cj5*x5908*x5913)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5907*x5908*x5911))+((cj5*x5907*x5909))+(((-1.0)*x5909*x5910*x5912))+((cj5*x5906*x5909))+(((-1.0)*x5907*x5915))+((x5909*x5916))+(((-1.0)*x5906*x5915))+(((-1.0)*x5906*x5908*x5911))+(((-1.0)*x5908*x5912*x5913))+((sj5*x5908*x5910))+(((-1.0)*r22*x5910*x5911))+((x5913*x5914))))+IKsqr(((((-1.0)*x5907*x5908*x5912))+((r22*x5916))+((sj5*x5907*x5909))+(((-1.0)*x5908*x5910*x5911))+(((-1.0)*x5909*x5911*x5913))+((cj5*x5909*x5910))+(((-1.0)*x5910*x5915))+(((-1.0)*x5906*x5908*x5912))+((x5907*x5914))+((sj5*x5906*x5909))+((x5906*x5914))+((cj5*x5908*x5913))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x5907*x5908*x5911))+((cj5*x5907*x5909))+(((-1.0)*x5909*x5910*x5912))+((cj5*x5906*x5909))+(((-1.0)*x5907*x5915))+((x5909*x5916))+(((-1.0)*x5906*x5915))+(((-1.0)*x5906*x5908*x5911))+(((-1.0)*x5908*x5912*x5913))+((sj5*x5908*x5910))+(((-1.0)*r22*x5910*x5911))+((x5913*x5914))), ((((-1.0)*x5907*x5908*x5912))+((r22*x5916))+((sj5*x5907*x5909))+(((-1.0)*x5908*x5910*x5911))+(((-1.0)*x5909*x5911*x5913))+((cj5*x5909*x5910))+(((-1.0)*x5910*x5915))+(((-1.0)*x5906*x5908*x5912))+((x5907*x5914))+((sj5*x5906*x5909))+((x5906*x5914))+((cj5*x5908*x5913))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5917=IKsin(j2);
IkReal x5918=IKcos(j2);
IkReal x5919=(sj0*sj4);
IkReal x5920=(r11*sj6);
IkReal x5921=(cj5*r12);
IkReal x5922=(sj4*sj6);
IkReal x5923=(cj5*r21);
IkReal x5924=((0.15)*sj0);
IkReal x5925=((1.0)*sj5);
IkReal x5926=(cj0*r02);
IkReal x5927=(cj4*cj5);
IkReal x5928=((1.11e-6)*sj0);
IkReal x5929=((0.15)*cj5);
IkReal x5930=(r12*sj5);
IkReal x5931=((1.11e-6)*cj5);
IkReal x5932=(cj6*r20);
IkReal x5933=((0.15)*sj5);
IkReal x5934=(cj0*r01);
IkReal x5935=(cj4*sj5);
IkReal x5936=(cj6*r10);
IkReal x5937=((1.0)*cj5);
IkReal x5938=(r22*sj4);
IkReal x5939=(r21*sj6);
IkReal x5940=(cj4*sj0);
IkReal x5941=((1.0)*sj0);
IkReal x5942=((1.0)*sj6);
IkReal x5943=((1.11e-6)*sj5);
IkReal x5944=(sj0*x5936);
IkReal x5945=((1.0)*x5917);
IkReal x5946=(cj1*x5917);
IkReal x5947=(cj1*x5918);
IkReal x5948=(cj0*cj6*r00);
IkReal x5949=(sj1*x5918);
IkReal x5950=(sj1*x5945);
IkReal x5951=((1.0)*x5947);
IkReal x5952=(x5951+x5950);
evalcond[0]=(((cj5*x5938))+(((-1.0)*x5949))+((x5927*x5932))+((r22*x5935))+(((-1.0)*cj4*x5923*x5942))+x5946+(((-1.0)*sj4*x5925*x5932))+((r21*sj5*x5922)));
evalcond[1]=((((-1.0)*x5925*x5938))+((x5922*x5923))+(((-1.0)*sj4*x5932*x5937))+((r22*x5927))+(((-1.0)*cj4*x5925*x5932))+((x5935*x5939))+(((-1.0)*x5952)));
evalcond[2]=((((-1.0)*r22*x5943))+(((-0.21066117)*sj1))+((x5933*x5939))+(((-1.0)*x5931*x5932))+((r22*x5929))+(((-1.0)*pz))+(((-1.0)*x5932*x5933))+(((-0.17676784)*cj1))+(((1.8e-7)*x5932))+(((0.335)*x5949))+(((-0.335)*x5946))+(((-1.8e-7)*x5939))+(((1.11e-6)*sj6*x5923)));
evalcond[3]=(((sj5*x5919*x5920))+((x5919*x5921))+((cj5*sj4*x5926))+((x5930*x5940))+((x5926*x5935))+(((-1.0)*sj4*x5925*x5948))+((x5927*x5948))+((x5927*x5944))+(((-1.0)*x5952))+(((-1.0)*x5919*x5925*x5936))+(((-1.0)*x5920*x5927*x5941))+(((-1.0)*x5927*x5934*x5942))+((sj5*x5922*x5934)));
evalcond[4]=(((sj0*x5920*x5935))+((sj6*x5934*x5935))+((x5921*x5940))+((cj5*x5919*x5920))+(((-1.0)*cj4*x5925*x5948))+((x5926*x5927))+(((-1.0)*sj4*x5937*x5948))+(((-1.0)*x5925*x5936*x5940))+(((-1.0)*x5919*x5936*x5937))+(((-1.0)*r12*x5919*x5925))+(((-1.0)*sj4*x5925*x5926))+x5949+(((-1.0)*cj1*x5945))+((cj5*x5922*x5934)));
evalcond[5]=((((-1.0)*py*x5941))+((sj5*x5920*x5924))+(((-1.0)*cj5*x5928*x5936))+((sj6*x5931*x5934))+((x5921*x5924))+(((-0.21066117)*cj1))+(((-1.0)*x5931*x5948))+(((0.17676784)*sj1))+(((-1.0)*x5928*x5930))+(((0.335)*sj1*x5917))+((x5926*x5929))+(((-1.0)*x5933*x5948))+(((1.8e-7)*x5944))+(((1.8e-7)*x5948))+(((-1.8e-7)*sj6*x5934))+(((-1.0)*sj5*x5924*x5936))+((sj6*x5933*x5934))+(((0.335)*x5947))+(((-1.8e-7)*sj0*x5920))+(((-1.0)*x5926*x5943))+(((-1.0)*cj0*px))+((cj5*x5920*x5928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5953=((1.0)*sj1);
IkReal x5954=(r20*sj6);
IkReal x5955=(cj6*r21);
IkReal x5956=((1.0)*cj1);
IkReal x5957=(cj0*r00*sj6);
IkReal x5958=(cj0*cj6*r01);
IkReal x5959=(r10*sj0*sj6);
IkReal x5960=(cj6*r11*sj0);
if( IKabs(((((-1.0)*x5956*x5960))+(((-1.0)*x5956*x5957))+(((-1.0)*x5956*x5959))+(((-1.0)*x5956*x5958))+(((-1.0)*x5953*x5954))+(((-1.0)*x5953*x5955)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x5958))+((sj1*x5959))+((sj1*x5957))+((sj1*x5960))+(((-1.0)*x5954*x5956))+(((-1.0)*x5955*x5956)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5956*x5960))+(((-1.0)*x5956*x5957))+(((-1.0)*x5956*x5959))+(((-1.0)*x5956*x5958))+(((-1.0)*x5953*x5954))+(((-1.0)*x5953*x5955))))+IKsqr((((sj1*x5958))+((sj1*x5959))+((sj1*x5957))+((sj1*x5960))+(((-1.0)*x5954*x5956))+(((-1.0)*x5955*x5956))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x5956*x5960))+(((-1.0)*x5956*x5957))+(((-1.0)*x5956*x5959))+(((-1.0)*x5956*x5958))+(((-1.0)*x5953*x5954))+(((-1.0)*x5953*x5955))), (((sj1*x5958))+((sj1*x5959))+((sj1*x5957))+((sj1*x5960))+(((-1.0)*x5954*x5956))+(((-1.0)*x5955*x5956))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5961=IKcos(j2);
IkReal x5962=IKsin(j2);
IkReal x5963=(sj0*sj4);
IkReal x5964=(r11*sj6);
IkReal x5965=(cj5*r12);
IkReal x5966=((1.0)*cj6);
IkReal x5967=(cj0*r01);
IkReal x5968=((1.0)*sj6);
IkReal x5969=(cj0*cj5);
IkReal x5970=((1.11e-6)*sj0);
IkReal x5971=(r12*sj5);
IkReal x5972=(cj6*r10);
IkReal x5973=(sj4*sj5);
IkReal x5974=(cj0*r00);
IkReal x5975=((0.15)*sj0);
IkReal x5976=((1.8e-7)*sj0);
IkReal x5977=(cj6*r20);
IkReal x5978=(cj4*cj5);
IkReal x5979=((0.15)*sj5);
IkReal x5980=(cj6*r00);
IkReal x5981=(cj5*r22);
IkReal x5982=(r21*sj6);
IkReal x5983=((1.0)*sj0);
IkReal x5984=((1.0)*sj1);
IkReal x5985=((1.11e-6)*cj5);
IkReal x5986=(r22*sj5);
IkReal x5987=(cj1*x5961);
IkReal x5988=(cj1*x5962);
IkReal x5989=(cj0*r02*sj5);
IkReal x5990=(sj1*x5961);
IkReal x5991=(x5962*x5984);
IkReal x5992=((1.0)*x5987);
IkReal x5993=(x5991+x5992);
evalcond[0]=((((-1.0)*r20*x5968))+(((-1.0)*r21*x5966))+(((-1.0)*x5993)));
evalcond[1]=((((-1.0)*r11*sj0*x5966))+(((-1.0)*x5988))+(((-1.0)*x5966*x5967))+(((-1.0)*x5968*x5974))+x5990+(((-1.0)*r10*sj0*x5968)));
evalcond[2]=(((cj4*x5986))+((x5973*x5982))+(((-1.0)*r21*x5968*x5978))+(((-1.0)*x5961*x5984))+((sj4*x5981))+(((-1.0)*r20*x5966*x5973))+x5988+((x5977*x5978)));
evalcond[3]=(((x5979*x5982))+((x5982*x5985))+(((-0.21066117)*sj1))+(((-1.8e-7)*x5982))+(((0.15)*x5981))+(((-1.0)*x5977*x5985))+(((-1.11e-6)*x5986))+(((-0.335)*x5988))+(((1.8e-7)*x5977))+(((-1.0)*x5977*x5979))+(((0.335)*x5990))+(((-1.0)*pz))+(((-0.17676784)*cj1)));
evalcond[4]=(((cj4*x5989))+(((-1.0)*x5966*x5973*x5974))+((sj0*x5972*x5978))+((sj5*x5963*x5964))+(((-1.0)*x5964*x5978*x5983))+((cj4*sj0*x5971))+((x5963*x5965))+(((-1.0)*x5967*x5968*x5978))+((r02*sj4*x5969))+((sj6*x5967*x5973))+((cj4*x5969*x5980))+(((-1.0)*r10*sj5*x5963*x5966))+(((-1.0)*x5993)));
evalcond[5]=((((0.335)*sj1*x5962))+(((-1.8e-7)*sj6*x5967))+((cj5*x5964*x5970))+(((-0.21066117)*cj1))+(((-1.0)*cj6*x5974*x5979))+(((0.17676784)*sj1))+((sj5*x5964*x5975))+((x5965*x5975))+(((-1.11e-6)*x5989))+(((0.335)*x5987))+(((-1.0)*py*x5983))+((sj6*x5967*x5979))+(((-1.0)*sj5*x5972*x5975))+(((-1.0)*x5970*x5971))+(((0.15)*r02*x5969))+(((-1.0)*x5964*x5976))+(((1.8e-7)*cj6*x5974))+(((-1.0)*cj5*x5970*x5972))+((sj6*x5967*x5985))+(((-1.0)*cj0*px))+(((-1.11e-6)*x5969*x5980))+((x5972*x5976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5994=(cj4*sj5);
IkReal x5995=(cj5*sj4);
IkReal x5996=(cj6*r20);
IkReal x5997=(cj4*cj5);
IkReal x5998=(sj4*sj5);
IkReal x5999=((1.0)*sj1);
IkReal x6000=(r21*sj6);
IkReal x6001=((1.0)*cj1);
IkReal x6002=(r22*sj1);
IkReal x6003=(r22*x6001);
IkReal x6004=(x5999*x6000);
if( IKabs(((((-1.0)*x5998*x6000*x6001))+((sj1*x5995*x5996))+(((-1.0)*r22*x5997*x5999))+((x5998*x6002))+(((-1.0)*x5996*x5997*x6001))+((sj1*x5994*x5996))+((cj1*x5997*x6000))+(((-1.0)*x5994*x6004))+(((-1.0)*x5994*x6003))+(((-1.0)*x5995*x6003))+(((-1.0)*x5995*x6004))+((cj1*x5996*x5998)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x5995*x6000*x6001))+((cj1*r22*x5998))+((x5994*x6002))+((x5995*x6002))+((sj1*x5998*x6000))+(((-1.0)*x5997*x6004))+(((-1.0)*x5997*x6003))+(((-1.0)*x5994*x6000*x6001))+(((-1.0)*x5996*x5998*x5999))+((sj1*x5996*x5997))+((cj1*x5995*x5996))+((cj1*x5994*x5996)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5998*x6000*x6001))+((sj1*x5995*x5996))+(((-1.0)*r22*x5997*x5999))+((x5998*x6002))+(((-1.0)*x5996*x5997*x6001))+((sj1*x5994*x5996))+((cj1*x5997*x6000))+(((-1.0)*x5994*x6004))+(((-1.0)*x5994*x6003))+(((-1.0)*x5995*x6003))+(((-1.0)*x5995*x6004))+((cj1*x5996*x5998))))+IKsqr(((((-1.0)*x5995*x6000*x6001))+((cj1*r22*x5998))+((x5994*x6002))+((x5995*x6002))+((sj1*x5998*x6000))+(((-1.0)*x5997*x6004))+(((-1.0)*x5997*x6003))+(((-1.0)*x5994*x6000*x6001))+(((-1.0)*x5996*x5998*x5999))+((sj1*x5996*x5997))+((cj1*x5995*x5996))+((cj1*x5994*x5996))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x5998*x6000*x6001))+((sj1*x5995*x5996))+(((-1.0)*r22*x5997*x5999))+((x5998*x6002))+(((-1.0)*x5996*x5997*x6001))+((sj1*x5994*x5996))+((cj1*x5997*x6000))+(((-1.0)*x5994*x6004))+(((-1.0)*x5994*x6003))+(((-1.0)*x5995*x6003))+(((-1.0)*x5995*x6004))+((cj1*x5996*x5998))), ((((-1.0)*x5995*x6000*x6001))+((cj1*r22*x5998))+((x5994*x6002))+((x5995*x6002))+((sj1*x5998*x6000))+(((-1.0)*x5997*x6004))+(((-1.0)*x5997*x6003))+(((-1.0)*x5994*x6000*x6001))+(((-1.0)*x5996*x5998*x5999))+((sj1*x5996*x5997))+((cj1*x5995*x5996))+((cj1*x5994*x5996))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x6005=IKcos(j2);
IkReal x6006=IKsin(j2);
IkReal x6007=(sj4*sj6);
IkReal x6008=(sj0*sj5);
IkReal x6009=(cj5*r21);
IkReal x6010=((1.0)*sj4);
IkReal x6011=(cj0*r02);
IkReal x6012=(cj6*r10);
IkReal x6013=((1.0)*cj4);
IkReal x6014=(cj4*cj5);
IkReal x6015=(r11*sj6);
IkReal x6016=((0.15)*cj5);
IkReal x6017=(cj6*sj5);
IkReal x6018=(cj0*r00);
IkReal x6019=((1.8e-7)*sj0);
IkReal x6020=(cj6*r20);
IkReal x6021=((1.11e-6)*cj5);
IkReal x6022=(cj4*sj5);
IkReal x6023=(cj5*sj0);
IkReal x6024=(cj5*sj4);
IkReal x6025=((0.15)*sj6);
IkReal x6026=(r21*sj5);
IkReal x6027=(r21*sj6);
IkReal x6028=(r22*sj5);
IkReal x6029=(cj1*x6006);
IkReal x6030=(cj1*x6005);
IkReal x6031=(r12*x6023);
IkReal x6032=(sj1*x6006);
IkReal x6033=(sj0*x6021);
IkReal x6034=(cj0*r01*sj5);
IkReal x6035=(cj0*r01*sj6);
IkReal x6036=(sj1*x6005);
IkReal x6037=((1.0)*x6036);
evalcond[0]=((((-1.0)*sj6*x6009*x6013))+(((-1.0)*x6037))+((x6007*x6026))+x6029+(((-1.0)*r20*x6010*x6017))+((x6014*x6020))+((r22*x6022))+((r22*x6024)));
evalcond[1]=(x6032+x6030+(((-1.0)*cj5*x6010*x6020))+(((-1.0)*r20*x6013*x6017))+((x6007*x6009))+(((-1.0)*x6010*x6028))+((r22*x6014))+((x6022*x6027)));
evalcond[2]=((((1.11e-6)*sj6*x6009))+(((-1.8e-7)*x6027))+(((-0.21066117)*sj1))+(((-1.11e-6)*x6028))+((x6025*x6026))+(((-0.15)*r20*x6017))+(((-1.0)*x6020*x6021))+(((1.8e-7)*x6020))+(((-1.0)*pz))+(((-0.335)*x6029))+(((-0.17676784)*cj1))+(((0.335)*x6036))+((r22*x6016)));
evalcond[3]=(((x6011*x6022))+((x6011*x6024))+((cj6*x6014*x6018))+(((-1.0)*x6008*x6010*x6012))+((sj4*x6031))+((cj4*r12*x6008))+((x6007*x6034))+(((-1.0)*x6013*x6015*x6023))+((r11*x6007*x6008))+(((-1.0)*x6030))+(((-1.0)*x6032))+(((-1.0)*cj5*x6013*x6035))+(((-1.0)*x6010*x6017*x6018))+((sj0*x6012*x6014)));
evalcond[4]=((((-1.0)*x6010*x6012*x6023))+((r11*x6007*x6023))+(((-1.0)*x6037))+((cj4*x6008*x6015))+(((-1.0)*cj5*cj6*x6010*x6018))+((cj0*cj5*r01*x6007))+x6029+(((-1.0)*sj5*x6010*x6011))+(((-1.0)*x6013*x6017*x6018))+((x6022*x6035))+((x6011*x6014))+(((-1.0)*r12*x6008*x6010))+(((-1.0)*x6008*x6012*x6013))+((r12*sj0*x6014)));
evalcond[5]=(((x6012*x6019))+(((1.8e-7)*cj6*x6018))+(((-1.11e-6)*r12*x6008))+(((0.15)*x6008*x6015))+(((-0.21066117)*cj1))+(((0.17676784)*sj1))+((x6015*x6033))+(((-1.0)*x6012*x6033))+((x6011*x6016))+(((-0.15)*x6017*x6018))+(((-1.0)*x6015*x6019))+(((-1.8e-7)*x6035))+((x6025*x6034))+(((0.335)*x6032))+(((0.335)*x6030))+(((-1.0)*py*sj0))+(((-0.15)*x6008*x6012))+((x6021*x6035))+(((-1.11e-6)*sj5*x6011))+((r12*sj0*x6016))+(((-1.0)*cj6*x6018*x6021))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6038=(cj1*sj6);
IkReal x6039=(r10*sj0);
IkReal x6040=(cj0*r00);
IkReal x6041=((1.0)*sj1);
IkReal x6042=(cj1*cj6);
IkReal x6043=(r11*sj0);
IkReal x6044=(sj6*x6041);
IkReal x6045=(cj0*cj6*r01);
if( IKabs((((cj0*r01*x6042))+((x6038*x6040))+((x6042*x6043))+((cj6*r21*sj1))+((x6038*x6039))+((r20*sj1*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*x6041*x6043))+(((-1.0)*x6039*x6044))+((r20*x6038))+(((-1.0)*x6040*x6044))+((r21*x6042))+(((-1.0)*x6041*x6045)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj0*r01*x6042))+((x6038*x6040))+((x6042*x6043))+((cj6*r21*sj1))+((x6038*x6039))+((r20*sj1*sj6))))+IKsqr(((((-1.0)*cj6*x6041*x6043))+(((-1.0)*x6039*x6044))+((r20*x6038))+(((-1.0)*x6040*x6044))+((r21*x6042))+(((-1.0)*x6041*x6045))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj0*r01*x6042))+((x6038*x6040))+((x6042*x6043))+((cj6*r21*sj1))+((x6038*x6039))+((r20*sj1*sj6))), ((((-1.0)*cj6*x6041*x6043))+(((-1.0)*x6039*x6044))+((r20*x6038))+(((-1.0)*x6040*x6044))+((r21*x6042))+(((-1.0)*x6041*x6045))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x6046=IKsin(j2);
IkReal x6047=IKcos(j2);
IkReal x6048=(sj0*sj4);
IkReal x6049=(r11*sj6);
IkReal x6050=((1.0)*cj6);
IkReal x6051=(cj0*r01);
IkReal x6052=(cj5*r12);
IkReal x6053=((1.0)*sj6);
IkReal x6054=(cj0*cj5);
IkReal x6055=((1.11e-6)*sj0);
IkReal x6056=(r12*sj5);
IkReal x6057=(cj6*r10);
IkReal x6058=(sj4*sj5);
IkReal x6059=(cj0*r00);
IkReal x6060=((0.15)*sj0);
IkReal x6061=((1.8e-7)*sj0);
IkReal x6062=((1.0)*sj1);
IkReal x6063=(cj6*r20);
IkReal x6064=((0.15)*sj5);
IkReal x6065=(cj6*r00);
IkReal x6066=(cj5*r22);
IkReal x6067=(r21*sj6);
IkReal x6068=((1.0)*sj0);
IkReal x6069=((1.11e-6)*cj5);
IkReal x6070=(cj4*cj5);
IkReal x6071=(r22*sj5);
IkReal x6072=(cj1*x6046);
IkReal x6073=(cj1*x6047);
IkReal x6074=(cj0*r02*sj5);
IkReal x6075=(sj1*x6046);
IkReal x6076=(x6047*x6062);
evalcond[0]=(x6075+x6073+(((-1.0)*r20*x6053))+(((-1.0)*r21*x6050)));
evalcond[1]=((((-1.0)*x6053*x6059))+x6072+(((-1.0)*x6076))+(((-1.0)*x6050*x6051))+(((-1.0)*r11*sj0*x6050))+(((-1.0)*r10*sj0*x6053)));
evalcond[2]=(x6072+(((-1.0)*x6076))+((cj4*x6071))+((x6063*x6070))+((sj4*x6066))+(((-1.0)*r20*x6050*x6058))+((x6058*x6067))+(((-1.0)*r21*x6053*x6070)));
evalcond[3]=((((-1.8e-7)*x6067))+(((0.15)*x6066))+(((-0.21066117)*sj1))+((x6067*x6069))+(((1.8e-7)*x6063))+(((-0.335)*x6072))+(((-1.11e-6)*x6071))+(((-1.0)*pz))+(((-0.17676784)*cj1))+(((-1.0)*x6063*x6064))+(((-1.0)*x6063*x6069))+((x6064*x6067))+(((0.335)*sj1*x6047)));
evalcond[4]=((((-1.0)*x6050*x6058*x6059))+(((-1.0)*x6073))+((cj4*x6074))+((sj5*x6048*x6049))+((x6048*x6052))+((cj4*sj0*x6056))+(((-1.0)*x6046*x6062))+(((-1.0)*r10*sj5*x6048*x6050))+((sj6*x6051*x6058))+((r02*sj4*x6054))+(((-1.0)*x6049*x6068*x6070))+((sj0*x6057*x6070))+(((-1.0)*x6051*x6053*x6070))+((cj4*x6054*x6065)));
evalcond[5]=((((-1.0)*x6049*x6061))+(((0.15)*r02*x6054))+(((-0.21066117)*cj1))+((x6057*x6061))+(((0.17676784)*sj1))+((sj5*x6049*x6060))+((sj6*x6051*x6064))+((sj6*x6051*x6069))+(((-1.0)*py*x6068))+(((-1.0)*x6055*x6056))+((x6052*x6060))+(((-1.11e-6)*x6074))+(((-1.0)*sj5*x6057*x6060))+(((-1.8e-7)*sj6*x6051))+(((-1.0)*cj6*x6059*x6064))+(((-1.0)*cj5*x6055*x6057))+(((1.8e-7)*cj6*x6059))+(((-1.11e-6)*x6054*x6065))+(((0.335)*x6075))+(((0.335)*x6073))+((cj5*x6049*x6055))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6077=(cj3*sj0);
IkReal x6078=(r10*sj6);
IkReal x6079=((1.0)*cj1);
IkReal x6080=(cj6*sj1);
IkReal x6081=(cj0*cj3);
IkReal x6082=(sj3*sj4);
IkReal x6083=(sj1*sj5);
IkReal x6084=(r00*sj6);
IkReal x6085=(cj5*r20);
IkReal x6086=(r21*sj6);
IkReal x6087=(cj5*r22);
IkReal x6088=(cj4*sj3);
IkReal x6089=(r20*sj5);
IkReal x6090=(cj1*x6088);
CheckValue<IkReal> x6091=IKPowWithIntegerCheck(IKsign((cj3*sj3)),-1);
if(!x6091.valid){
continue;
}
CheckValue<IkReal> x6092 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r01*x6079*x6081))+(((-1.0)*cj6*r11*x6077*x6079))+((sj1*x6087*x6088))+(((-1.0)*x6077*x6078*x6079))+(((-1.0)*x6080*x6088*x6089))+(((-1.0)*r22*x6082*x6083))+((cj5*sj1*x6082*x6086))+((x6083*x6086*x6088))+(((-1.0)*x6080*x6082*x6085))+(((-1.0)*x6079*x6081*x6084)))),IkReal((((cj1*cj5*x6082*x6086))+(((-1.0)*r22*sj5*x6079*x6082))+(((-1.0)*cj6*x6079*x6088*x6089))+((sj1*x6077*x6078))+((r01*x6080*x6081))+((x6087*x6090))+((sj1*x6081*x6084))+(((-1.0)*cj6*x6079*x6082*x6085))+((sj5*x6086*x6090))+((r11*x6077*x6080)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6092.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6091.value)))+(x6092.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x6093=IKcos(j2);
IkReal x6094=IKsin(j2);
IkReal x6095=(cj6*sj5);
IkReal x6096=((1.0)*sj3);
IkReal x6097=((1.0)*r20);
IkReal x6098=((1.0)*cj6);
IkReal x6099=(r12*sj0);
IkReal x6100=(cj0*r02);
IkReal x6101=((1.11e-6)*sj5);
IkReal x6102=((1.0)*cj3);
IkReal x6103=(cj5*r22);
IkReal x6104=(cj6*r20);
IkReal x6105=((1.11e-6)*cj5);
IkReal x6106=(cj4*cj5);
IkReal x6107=(sj4*sj6);
IkReal x6108=(r11*sj0);
IkReal x6109=((1.8e-7)*sj6);
IkReal x6110=(cj0*r00);
IkReal x6111=((0.15)*sj6);
IkReal x6112=((1.0)*cj0);
IkReal x6113=(r01*sj6);
IkReal x6114=((1.0)*sj6);
IkReal x6115=(cj4*sj5);
IkReal x6116=(cj0*r01);
IkReal x6117=(cj5*sj4);
IkReal x6118=(r10*sj0);
IkReal x6119=((0.15)*cj5);
IkReal x6120=((1.8e-7)*cj6);
IkReal x6121=((1.0)*x6118);
IkReal x6122=(cj1*x6094);
IkReal x6123=(cj6*x6117);
IkReal x6124=(r21*sj5*sj6);
IkReal x6125=((1.0)*sj4*sj5);
IkReal x6126=(sj1*x6093);
IkReal x6127=(sj5*x6116);
IkReal x6128=(cj1*x6093);
IkReal x6129=(sj1*x6094);
evalcond[0]=((((-1.0)*sj6*x6097))+(((-1.0)*r21*x6098))+(((-1.0)*x6096*x6129))+(((-1.0)*x6096*x6128)));
evalcond[1]=(((sj3*x6126))+(((-1.0)*x6098*x6108))+(((-1.0)*x6114*x6118))+(((-1.0)*x6098*x6116))+(((-1.0)*x6096*x6122))+(((-1.0)*x6110*x6114)));
evalcond[2]=(((x6104*x6106))+((r21*sj5*x6107))+x6122+((r22*x6115))+(((-1.0)*sj4*x6095*x6097))+((sj4*x6103))+(((-1.0)*r21*x6106*x6114))+(((-1.0)*x6126)));
evalcond[3]=((((-1.0)*x6102*x6129))+(((-1.0)*x6102*x6128))+(((-1.0)*r22*x6125))+(((-1.0)*cj4*x6095*x6097))+((r21*sj6*x6115))+((cj5*r21*x6107))+((cj4*x6103))+(((-1.0)*x6097*x6123)));
evalcond[4]=((((-1.0)*x6104*x6105))+(((0.15)*x6103))+(((-0.21066117)*sj1))+(((1.8e-7)*x6104))+(((-1.0)*r22*x6101))+(((-1.0)*pz))+(((-0.17676784)*cj1))+(((-0.335)*x6122))+(((-0.15)*r20*x6095))+(((-1.0)*r21*x6109))+(((0.335)*x6126))+((r21*sj6*x6105))+((r21*sj5*x6111)));
evalcond[5]=(((cj6*x6106*x6118))+((cj6*x6106*x6110))+(((-1.0)*sj4*x6095*x6121))+(((-1.0)*x6106*x6112*x6113))+((x6099*x6117))+((x6099*x6115))+((x6107*x6127))+(((-1.0)*x6106*x6108*x6114))+(((-1.0)*sj4*x6095*x6110))+((sj5*x6107*x6108))+((x6100*x6115))+((x6100*x6117))+(((-1.0)*x6129))+(((-1.0)*x6128)));
evalcond[6]=((((-1.0)*x6100*x6125))+(((-1.0)*x6102*x6122))+((x6100*x6106))+(((-1.0)*x6098*x6117*x6118))+(((-1.0)*x6098*x6110*x6117))+((x6099*x6106))+(((-1.0)*x6099*x6125))+(((-1.0)*cj4*x6095*x6121))+((cj5*x6107*x6116))+(((-1.0)*cj4*x6095*x6110))+((cj0*x6113*x6115))+((sj6*x6108*x6115))+((cj3*x6126))+((cj5*x6107*x6108)));
evalcond[7]=(((x6099*x6119))+(((-1.0)*x6109*x6116))+(((-0.21066117)*cj1))+((x6118*x6120))+(((0.17676784)*sj1))+(((-1.0)*x6099*x6101))+((sj6*x6105*x6108))+((cj0*x6105*x6113))+((x6111*x6127))+(((-1.0)*py*sj0))+(((-1.0)*px*x6112))+((x6110*x6120))+((x6100*x6119))+(((0.335)*x6129))+(((0.335)*x6128))+(((-0.15)*x6095*x6118))+(((-0.15)*x6095*x6110))+(((-1.0)*x6100*x6101))+((sj5*x6108*x6111))+(((-1.0)*cj6*x6105*x6110))+(((-1.0)*cj6*x6105*x6118))+(((-1.0)*x6108*x6109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6130=((1.0)*sj1);
IkReal x6131=(r20*sj6);
IkReal x6132=(cj6*r21);
IkReal x6133=((1.0)*cj1);
IkReal x6134=(cj0*r00*sj6);
IkReal x6135=(cj0*cj6*r01);
IkReal x6136=(r10*sj0*sj6);
IkReal x6137=(cj6*r11*sj0);
CheckValue<IkReal> x6138=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x6138.valid){
continue;
}
CheckValue<IkReal> x6139 = IKatan2WithCheck(IkReal(((((-1.0)*x6130*x6131))+(((-1.0)*x6130*x6132))+(((-1.0)*x6133*x6135))+(((-1.0)*x6133*x6134))+(((-1.0)*x6133*x6137))+(((-1.0)*x6133*x6136)))),IkReal((((sj1*x6135))+((sj1*x6134))+((sj1*x6137))+((sj1*x6136))+(((-1.0)*x6131*x6133))+(((-1.0)*x6132*x6133)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6139.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6138.value)))+(x6139.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x6140=IKcos(j2);
IkReal x6141=IKsin(j2);
IkReal x6142=(cj6*sj5);
IkReal x6143=((1.0)*sj3);
IkReal x6144=((1.0)*r20);
IkReal x6145=((1.0)*cj6);
IkReal x6146=(r12*sj0);
IkReal x6147=(cj0*r02);
IkReal x6148=((1.11e-6)*sj5);
IkReal x6149=((1.0)*cj3);
IkReal x6150=(cj5*r22);
IkReal x6151=(cj6*r20);
IkReal x6152=((1.11e-6)*cj5);
IkReal x6153=(cj4*cj5);
IkReal x6154=(sj4*sj6);
IkReal x6155=(r11*sj0);
IkReal x6156=((1.8e-7)*sj6);
IkReal x6157=(cj0*r00);
IkReal x6158=((0.15)*sj6);
IkReal x6159=((1.0)*cj0);
IkReal x6160=(r01*sj6);
IkReal x6161=((1.0)*sj6);
IkReal x6162=(cj4*sj5);
IkReal x6163=(cj0*r01);
IkReal x6164=(cj5*sj4);
IkReal x6165=(r10*sj0);
IkReal x6166=((0.15)*cj5);
IkReal x6167=((1.8e-7)*cj6);
IkReal x6168=((1.0)*x6165);
IkReal x6169=(cj1*x6141);
IkReal x6170=(cj6*x6164);
IkReal x6171=(r21*sj5*sj6);
IkReal x6172=((1.0)*sj4*sj5);
IkReal x6173=(sj1*x6140);
IkReal x6174=(sj5*x6163);
IkReal x6175=(cj1*x6140);
IkReal x6176=(sj1*x6141);
evalcond[0]=((((-1.0)*r21*x6145))+(((-1.0)*x6143*x6176))+(((-1.0)*x6143*x6175))+(((-1.0)*sj6*x6144)));
evalcond[1]=(((sj3*x6173))+(((-1.0)*x6145*x6163))+(((-1.0)*x6157*x6161))+(((-1.0)*x6143*x6169))+(((-1.0)*x6145*x6155))+(((-1.0)*x6161*x6165)));
evalcond[2]=((((-1.0)*r21*x6153*x6161))+((r21*sj5*x6154))+x6169+(((-1.0)*x6173))+((sj4*x6150))+((x6151*x6153))+(((-1.0)*sj4*x6142*x6144))+((r22*x6162)));
evalcond[3]=((((-1.0)*x6149*x6176))+(((-1.0)*x6149*x6175))+((r21*sj6*x6162))+(((-1.0)*cj4*x6142*x6144))+((cj4*x6150))+(((-1.0)*x6144*x6170))+((cj5*r21*x6154))+(((-1.0)*r22*x6172)));
evalcond[4]=((((-0.335)*x6169))+(((-0.21066117)*sj1))+((r21*sj5*x6158))+(((-1.0)*x6151*x6152))+(((1.8e-7)*x6151))+(((0.15)*x6150))+(((-1.0)*pz))+(((-0.17676784)*cj1))+(((-0.15)*r20*x6142))+(((-1.0)*r22*x6148))+(((-1.0)*r21*x6156))+(((0.335)*x6173))+((r21*sj6*x6152)));
evalcond[5]=((((-1.0)*sj4*x6142*x6168))+((x6146*x6162))+((x6146*x6164))+(((-1.0)*x6153*x6159*x6160))+((cj6*x6153*x6157))+((cj6*x6153*x6165))+((x6154*x6174))+((sj5*x6154*x6155))+(((-1.0)*x6175))+(((-1.0)*x6176))+(((-1.0)*x6153*x6155*x6161))+((x6147*x6162))+((x6147*x6164))+(((-1.0)*sj4*x6142*x6157)));
evalcond[6]=(((cj5*x6154*x6155))+(((-1.0)*x6149*x6169))+((cj3*x6173))+((x6146*x6153))+((x6147*x6153))+((cj5*x6154*x6163))+((cj0*x6160*x6162))+(((-1.0)*x6147*x6172))+(((-1.0)*cj4*x6142*x6157))+(((-1.0)*x6145*x6164*x6165))+(((-1.0)*x6146*x6172))+((sj6*x6155*x6162))+(((-1.0)*cj4*x6142*x6168))+(((-1.0)*x6145*x6157*x6164)));
evalcond[7]=(((x6146*x6166))+((x6157*x6167))+(((-0.21066117)*cj1))+((x6158*x6174))+(((0.17676784)*sj1))+(((-1.0)*x6156*x6163))+((sj5*x6155*x6158))+((x6165*x6167))+(((-1.0)*cj6*x6152*x6157))+(((-1.0)*x6155*x6156))+(((-0.15)*x6142*x6165))+(((-1.0)*px*x6159))+(((-1.0)*py*sj0))+((cj0*x6152*x6160))+(((-1.0)*x6146*x6148))+(((0.335)*x6176))+(((0.335)*x6175))+(((-0.15)*x6142*x6157))+(((-1.0)*x6147*x6148))+(((-1.0)*cj6*x6152*x6165))+((x6147*x6166))+((sj6*x6152*x6155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6177=(cj4*sj3);
IkReal x6178=(r01*sj6);
IkReal x6179=((1.0)*sj5);
IkReal x6180=(sj3*sj4);
IkReal x6181=(cj6*sj5);
IkReal x6182=((1.0)*cj5);
IkReal x6183=(r11*sj6);
IkReal x6184=(cj6*x6182);
CheckValue<IkReal> x6185=IKPowWithIntegerCheck(IKsign((((cj6*r21))+((r20*sj6)))),-1);
if(!x6185.valid){
continue;
}
CheckValue<IkReal> x6186 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6177*x6179))+(((-1.0)*x6179*x6180*x6183))+(((-1.0)*r10*x6177*x6184))+((cj5*x6177*x6183))+(((-1.0)*r12*x6180*x6182))+((r10*x6180*x6181)))),IkReal((((cj5*x6177*x6178))+(((-1.0)*r02*x6180*x6182))+((r00*x6180*x6181))+(((-1.0)*r02*x6177*x6179))+(((-1.0)*r00*x6177*x6184))+(((-1.0)*x6178*x6179*x6180)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6186.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6185.value)))+(x6186.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6187=IKcos(j0);
IkReal x6188=IKsin(j0);
IkReal x6189=(r01*sj6);
IkReal x6190=((0.15)*sj5);
IkReal x6191=(cj5*sj4);
IkReal x6192=(cj4*r02);
IkReal x6193=(sj4*sj5);
IkReal x6194=((1.0)*cj4);
IkReal x6195=(r02*sj4);
IkReal x6196=(cj6*r00);
IkReal x6197=((1.11e-6)*cj5);
IkReal x6198=(sj5*x6188);
IkReal x6199=(cj5*x6188);
IkReal x6200=(r12*x6187);
IkReal x6201=((1.0)*x6188);
IkReal x6202=((1.8e-7)*x6188);
IkReal x6203=((1.0)*sj4*x6196);
IkReal x6204=(cj6*r10*x6187);
IkReal x6205=(r11*sj6*x6187);
evalcond[0]=(((cj6*r11*x6187))+((r10*sj6*x6187))+(((-1.0)*cj6*r01*x6201))+(((-1.0)*r00*sj6*x6201))+(((-1.0)*cj3)));
evalcond[1]=(((x6193*x6204))+((x6188*x6189*x6193))+((cj4*cj5*x6205))+(((-1.0)*cj5*x6194*x6204))+((cj4*x6196*x6199))+((x6192*x6198))+((r02*x6188*x6191))+(((-1.0)*x6191*x6200))+(((-1.0)*x6189*x6194*x6199))+(((-1.0)*sj5*x6194*x6200))+(((-1.0)*x6193*x6196*x6201))+(((-1.0)*x6193*x6205)));
evalcond[2]=((((-1.0)*r02*x6193*x6201))+sj3+(((-1.0)*x6194*x6196*x6198))+((x6193*x6200))+((x6188*x6189*x6191))+((x6191*x6204))+(((-1.0)*cj5*x6194*x6200))+((cj4*sj5*x6204))+(((-1.0)*x6191*x6196*x6201))+((cj4*x6189*x6198))+((x6192*x6199))+(((-1.0)*x6191*x6205))+(((-1.0)*sj5*x6194*x6205)));
evalcond[3]=((-0.0005)+(((-1.11e-6)*r02*x6198))+(((1.11e-6)*sj5*x6200))+(((-1.0)*x6188*x6190*x6196))+(((-1.0)*x6197*x6205))+((x6188*x6189*x6197))+((x6188*x6189*x6190))+(((-1.0)*x6188*x6196*x6197))+((py*x6187))+((x6190*x6204))+(((-0.15)*cj5*x6200))+(((-1.0)*x6190*x6205))+(((-1.0)*x6189*x6202))+(((-1.8e-7)*x6204))+((x6197*x6204))+(((1.8e-7)*x6205))+((x6196*x6202))+(((0.15)*r02*x6199))+(((-1.0)*px*x6201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((((-0.350613907701634)*cj0*r01*sj5*sj6))+(((2.33742605134422)*py*sj0))+(((-2.78560232882098)*pz))+(((-0.783037727200315)*cj5*r12*sj0*sj4))+(((0.350613907701634)*cj0*cj6*r00*sj5))+(((2.59454291699209e-6)*cj5*cj6*r10*sj0))+(((-0.783037727200315)*cj0*cj5*r02*sj4))+(((-2.59454291699209e-6)*cj0*cj5*r01*sj6))+(((-0.350613907701634)*cj5*r12*sj0))+(((0.417840349323147)*r21*sj5*sj6))+(((-2.59454291699209e-6)*cj5*r11*sj0*sj6))+(((2.59454291699209e-6)*cj0*r02*sj5))+(((4.2073668924196e-7)*r11*sj0*sj6))+(((4.2073668924196e-7)*cj0*r01*sj6))+(((-0.933176780155028)*cj4*cj5*r21*sj6))+(((2.33742605134422)*cj0*px))+(((-0.783037727200315)*r11*sj0*sj4*sj5*sj6))+(((-0.783037727200315)*cj0*cj4*r02*sj5))+(((0.783037727200315)*cj0*cj4*cj5*r01*sj6))+(((-4.2073668924196e-7)*cj6*r10*sj0))+(((-3.09201858499129e-6)*cj5*cj6*r20))+(((0.350613907701634)*cj6*r10*sj0*sj5))+(((-0.783037727200315)*cj0*r01*sj4*sj5*sj6))+(((3.09201858499129e-6)*cj5*r21*sj6))+(((-0.417840349323147)*cj6*r20*sj5))+(((0.783037727200315)*cj6*r10*sj0*sj4*sj5))+(((0.933176780155028)*cj4*r22*sj5))+(((0.783037727200315)*cj0*cj6*r00*sj4*sj5))+(((-0.783037727200315)*cj4*r12*sj0*sj5))+(((0.933176780155028)*cj5*r22*sj4))+(((-5.01408419187776e-7)*r21*sj6))+(((0.417840349323147)*cj5*r22))+(((-3.09201858499129e-6)*r22*sj5))+(((2.59454291699209e-6)*r12*sj0*sj5))+(((2.59454291699209e-6)*cj0*cj5*cj6*r00))+(((0.783037727200315)*cj4*cj5*r11*sj0*sj6))+(((-0.783037727200315)*cj4*cj5*cj6*r10*sj0))+(((-0.350613907701634)*r11*sj0*sj5*sj6))+(((-0.783037727200315)*cj0*cj4*cj5*cj6*r00))+(((-0.350613907701634)*cj0*cj5*r02))+(((0.933176780155028)*r21*sj4*sj5*sj6))+(((-4.2073668924196e-7)*cj0*cj6*r00))+(((-0.933176780155028)*cj6*r20*sj4*sj5))+(((5.01408419187776e-7)*cj6*r20))+(((0.933176780155028)*cj4*cj5*cj6*r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((4.2073668924196e-7)*cj6*r20))+(((0.933176780155028)*cj0*cj4*cj5*cj6*r00))+(((2.59454291699209e-6)*cj5*r21*sj6))+(((-0.783037727200315)*cj4*cj5*r21*sj6))+(((0.417840349323147)*cj0*r01*sj5*sj6))+(((3.09201858499129e-6)*cj0*cj5*r01*sj6))+(((-4.2073668924196e-7)*r21*sj6))+(((-0.417840349323147)*cj0*cj6*r00*sj5))+(((0.783037727200315)*cj4*r22*sj5))+(((-5.01408419187776e-7)*r11*sj0*sj6))+(((-0.783037727200315)*cj6*r20*sj4*sj5))+(((0.933176780155028)*r11*sj0*sj4*sj5*sj6))+(((0.417840349323147)*r11*sj0*sj5*sj6))+(((-2.33742605134422)*pz))+(((0.933176780155028)*cj5*r12*sj0*sj4))+(((-0.933176780155028)*cj6*r10*sj0*sj4*sj5))+(((-3.09201858499129e-6)*r12*sj0*sj5))+(((0.350613907701634)*cj5*r22))+(((0.933176780155028)*cj0*cj4*r02*sj5))+(((3.09201858499129e-6)*cj5*r11*sj0*sj6))+(((-3.09201858499129e-6)*cj5*cj6*r10*sj0))+(((-0.933176780155028)*cj0*cj6*r00*sj4*sj5))+(((5.01408419187776e-7)*cj0*cj6*r00))+(((-2.59454291699209e-6)*r22*sj5))+(((0.350613907701634)*r21*sj5*sj6))+(((-5.01408419187776e-7)*cj0*r01*sj6))+(((-0.350613907701634)*cj6*r20*sj5))+(((0.783037727200315)*cj4*cj5*cj6*r20))+(((0.933176780155028)*cj4*r12*sj0*sj5))+(((-3.09201858499129e-6)*cj0*r02*sj5))+(((-2.59454291699209e-6)*cj5*cj6*r20))+(((-2.78560232882098)*py*sj0))+(((0.783037727200315)*r21*sj4*sj5*sj6))+(((0.933176780155028)*cj0*cj5*r02*sj4))+(((0.417840349323147)*cj0*cj5*r02))+(((0.417840349323147)*cj5*r12*sj0))+(((-0.417840349323147)*cj6*r10*sj0*sj5))+(((0.933176780155028)*cj4*cj5*cj6*r10*sj0))+(((-2.78560232882098)*cj0*px))+(((-0.933176780155028)*cj4*cj5*r11*sj0*sj6))+(((-0.933176780155028)*cj0*cj4*cj5*r01*sj6))+(((-3.09201858499129e-6)*cj0*cj5*cj6*r00))+(((0.783037727200315)*cj5*r22*sj4))+(((5.01408419187776e-7)*cj6*r10*sj0))+(((0.933176780155028)*cj0*r01*sj4*sj5*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.350613907701634)*cj0*r01*sj5*sj6))+(((2.33742605134422)*py*sj0))+(((-2.78560232882098)*pz))+(((-0.783037727200315)*cj5*r12*sj0*sj4))+(((0.350613907701634)*cj0*cj6*r00*sj5))+(((2.59454291699209e-6)*cj5*cj6*r10*sj0))+(((-0.783037727200315)*cj0*cj5*r02*sj4))+(((-2.59454291699209e-6)*cj0*cj5*r01*sj6))+(((-0.350613907701634)*cj5*r12*sj0))+(((0.417840349323147)*r21*sj5*sj6))+(((-2.59454291699209e-6)*cj5*r11*sj0*sj6))+(((2.59454291699209e-6)*cj0*r02*sj5))+(((4.2073668924196e-7)*r11*sj0*sj6))+(((4.2073668924196e-7)*cj0*r01*sj6))+(((-0.933176780155028)*cj4*cj5*r21*sj6))+(((2.33742605134422)*cj0*px))+(((-0.783037727200315)*r11*sj0*sj4*sj5*sj6))+(((-0.783037727200315)*cj0*cj4*r02*sj5))+(((0.783037727200315)*cj0*cj4*cj5*r01*sj6))+(((-4.2073668924196e-7)*cj6*r10*sj0))+(((-3.09201858499129e-6)*cj5*cj6*r20))+(((0.350613907701634)*cj6*r10*sj0*sj5))+(((-0.783037727200315)*cj0*r01*sj4*sj5*sj6))+(((3.09201858499129e-6)*cj5*r21*sj6))+(((-0.417840349323147)*cj6*r20*sj5))+(((0.783037727200315)*cj6*r10*sj0*sj4*sj5))+(((0.933176780155028)*cj4*r22*sj5))+(((0.783037727200315)*cj0*cj6*r00*sj4*sj5))+(((-0.783037727200315)*cj4*r12*sj0*sj5))+(((0.933176780155028)*cj5*r22*sj4))+(((-5.01408419187776e-7)*r21*sj6))+(((0.417840349323147)*cj5*r22))+(((-3.09201858499129e-6)*r22*sj5))+(((2.59454291699209e-6)*r12*sj0*sj5))+(((2.59454291699209e-6)*cj0*cj5*cj6*r00))+(((0.783037727200315)*cj4*cj5*r11*sj0*sj6))+(((-0.783037727200315)*cj4*cj5*cj6*r10*sj0))+(((-0.350613907701634)*r11*sj0*sj5*sj6))+(((-0.783037727200315)*cj0*cj4*cj5*cj6*r00))+(((-0.350613907701634)*cj0*cj5*r02))+(((0.933176780155028)*r21*sj4*sj5*sj6))+(((-4.2073668924196e-7)*cj0*cj6*r00))+(((-0.933176780155028)*cj6*r20*sj4*sj5))+(((5.01408419187776e-7)*cj6*r20))+(((0.933176780155028)*cj4*cj5*cj6*r20))))+IKsqr(((((4.2073668924196e-7)*cj6*r20))+(((0.933176780155028)*cj0*cj4*cj5*cj6*r00))+(((2.59454291699209e-6)*cj5*r21*sj6))+(((-0.783037727200315)*cj4*cj5*r21*sj6))+(((0.417840349323147)*cj0*r01*sj5*sj6))+(((3.09201858499129e-6)*cj0*cj5*r01*sj6))+(((-4.2073668924196e-7)*r21*sj6))+(((-0.417840349323147)*cj0*cj6*r00*sj5))+(((0.783037727200315)*cj4*r22*sj5))+(((-5.01408419187776e-7)*r11*sj0*sj6))+(((-0.783037727200315)*cj6*r20*sj4*sj5))+(((0.933176780155028)*r11*sj0*sj4*sj5*sj6))+(((0.417840349323147)*r11*sj0*sj5*sj6))+(((-2.33742605134422)*pz))+(((0.933176780155028)*cj5*r12*sj0*sj4))+(((-0.933176780155028)*cj6*r10*sj0*sj4*sj5))+(((-3.09201858499129e-6)*r12*sj0*sj5))+(((0.350613907701634)*cj5*r22))+(((0.933176780155028)*cj0*cj4*r02*sj5))+(((3.09201858499129e-6)*cj5*r11*sj0*sj6))+(((-3.09201858499129e-6)*cj5*cj6*r10*sj0))+(((-0.933176780155028)*cj0*cj6*r00*sj4*sj5))+(((5.01408419187776e-7)*cj0*cj6*r00))+(((-2.59454291699209e-6)*r22*sj5))+(((0.350613907701634)*r21*sj5*sj6))+(((-5.01408419187776e-7)*cj0*r01*sj6))+(((-0.350613907701634)*cj6*r20*sj5))+(((0.783037727200315)*cj4*cj5*cj6*r20))+(((0.933176780155028)*cj4*r12*sj0*sj5))+(((-3.09201858499129e-6)*cj0*r02*sj5))+(((-2.59454291699209e-6)*cj5*cj6*r20))+(((-2.78560232882098)*py*sj0))+(((0.783037727200315)*r21*sj4*sj5*sj6))+(((0.933176780155028)*cj0*cj5*r02*sj4))+(((0.417840349323147)*cj0*cj5*r02))+(((0.417840349323147)*cj5*r12*sj0))+(((-0.417840349323147)*cj6*r10*sj0*sj5))+(((0.933176780155028)*cj4*cj5*cj6*r10*sj0))+(((-2.78560232882098)*cj0*px))+(((-0.933176780155028)*cj4*cj5*r11*sj0*sj6))+(((-0.933176780155028)*cj0*cj4*cj5*r01*sj6))+(((-3.09201858499129e-6)*cj0*cj5*cj6*r00))+(((0.783037727200315)*cj5*r22*sj4))+(((5.01408419187776e-7)*cj6*r10*sj0))+(((0.933176780155028)*cj0*r01*sj4*sj5*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-0.350613907701634)*cj0*r01*sj5*sj6))+(((2.33742605134422)*py*sj0))+(((-2.78560232882098)*pz))+(((-0.783037727200315)*cj5*r12*sj0*sj4))+(((0.350613907701634)*cj0*cj6*r00*sj5))+(((2.59454291699209e-6)*cj5*cj6*r10*sj0))+(((-0.783037727200315)*cj0*cj5*r02*sj4))+(((-2.59454291699209e-6)*cj0*cj5*r01*sj6))+(((-0.350613907701634)*cj5*r12*sj0))+(((0.417840349323147)*r21*sj5*sj6))+(((-2.59454291699209e-6)*cj5*r11*sj0*sj6))+(((2.59454291699209e-6)*cj0*r02*sj5))+(((4.2073668924196e-7)*r11*sj0*sj6))+(((4.2073668924196e-7)*cj0*r01*sj6))+(((-0.933176780155028)*cj4*cj5*r21*sj6))+(((2.33742605134422)*cj0*px))+(((-0.783037727200315)*r11*sj0*sj4*sj5*sj6))+(((-0.783037727200315)*cj0*cj4*r02*sj5))+(((0.783037727200315)*cj0*cj4*cj5*r01*sj6))+(((-4.2073668924196e-7)*cj6*r10*sj0))+(((-3.09201858499129e-6)*cj5*cj6*r20))+(((0.350613907701634)*cj6*r10*sj0*sj5))+(((-0.783037727200315)*cj0*r01*sj4*sj5*sj6))+(((3.09201858499129e-6)*cj5*r21*sj6))+(((-0.417840349323147)*cj6*r20*sj5))+(((0.783037727200315)*cj6*r10*sj0*sj4*sj5))+(((0.933176780155028)*cj4*r22*sj5))+(((0.783037727200315)*cj0*cj6*r00*sj4*sj5))+(((-0.783037727200315)*cj4*r12*sj0*sj5))+(((0.933176780155028)*cj5*r22*sj4))+(((-5.01408419187776e-7)*r21*sj6))+(((0.417840349323147)*cj5*r22))+(((-3.09201858499129e-6)*r22*sj5))+(((2.59454291699209e-6)*r12*sj0*sj5))+(((2.59454291699209e-6)*cj0*cj5*cj6*r00))+(((0.783037727200315)*cj4*cj5*r11*sj0*sj6))+(((-0.783037727200315)*cj4*cj5*cj6*r10*sj0))+(((-0.350613907701634)*r11*sj0*sj5*sj6))+(((-0.783037727200315)*cj0*cj4*cj5*cj6*r00))+(((-0.350613907701634)*cj0*cj5*r02))+(((0.933176780155028)*r21*sj4*sj5*sj6))+(((-4.2073668924196e-7)*cj0*cj6*r00))+(((-0.933176780155028)*cj6*r20*sj4*sj5))+(((5.01408419187776e-7)*cj6*r20))+(((0.933176780155028)*cj4*cj5*cj6*r20))), ((((4.2073668924196e-7)*cj6*r20))+(((0.933176780155028)*cj0*cj4*cj5*cj6*r00))+(((2.59454291699209e-6)*cj5*r21*sj6))+(((-0.783037727200315)*cj4*cj5*r21*sj6))+(((0.417840349323147)*cj0*r01*sj5*sj6))+(((3.09201858499129e-6)*cj0*cj5*r01*sj6))+(((-4.2073668924196e-7)*r21*sj6))+(((-0.417840349323147)*cj0*cj6*r00*sj5))+(((0.783037727200315)*cj4*r22*sj5))+(((-5.01408419187776e-7)*r11*sj0*sj6))+(((-0.783037727200315)*cj6*r20*sj4*sj5))+(((0.933176780155028)*r11*sj0*sj4*sj5*sj6))+(((0.417840349323147)*r11*sj0*sj5*sj6))+(((-2.33742605134422)*pz))+(((0.933176780155028)*cj5*r12*sj0*sj4))+(((-0.933176780155028)*cj6*r10*sj0*sj4*sj5))+(((-3.09201858499129e-6)*r12*sj0*sj5))+(((0.350613907701634)*cj5*r22))+(((0.933176780155028)*cj0*cj4*r02*sj5))+(((3.09201858499129e-6)*cj5*r11*sj0*sj6))+(((-3.09201858499129e-6)*cj5*cj6*r10*sj0))+(((-0.933176780155028)*cj0*cj6*r00*sj4*sj5))+(((5.01408419187776e-7)*cj0*cj6*r00))+(((-2.59454291699209e-6)*r22*sj5))+(((0.350613907701634)*r21*sj5*sj6))+(((-5.01408419187776e-7)*cj0*r01*sj6))+(((-0.350613907701634)*cj6*r20*sj5))+(((0.783037727200315)*cj4*cj5*cj6*r20))+(((0.933176780155028)*cj4*r12*sj0*sj5))+(((-3.09201858499129e-6)*cj0*r02*sj5))+(((-2.59454291699209e-6)*cj5*cj6*r20))+(((-2.78560232882098)*py*sj0))+(((0.783037727200315)*r21*sj4*sj5*sj6))+(((0.933176780155028)*cj0*cj5*r02*sj4))+(((0.417840349323147)*cj0*cj5*r02))+(((0.417840349323147)*cj5*r12*sj0))+(((-0.417840349323147)*cj6*r10*sj0*sj5))+(((0.933176780155028)*cj4*cj5*cj6*r10*sj0))+(((-2.78560232882098)*cj0*px))+(((-0.933176780155028)*cj4*cj5*r11*sj0*sj6))+(((-0.933176780155028)*cj0*cj4*cj5*r01*sj6))+(((-3.09201858499129e-6)*cj0*cj5*cj6*r00))+(((0.783037727200315)*cj5*r22*sj4))+(((5.01408419187776e-7)*cj6*r10*sj0))+(((0.933176780155028)*cj0*r01*sj4*sj5*sj6))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x6206=IKsin(j1);
IkReal x6207=IKcos(j1);
IkReal x6208=(cj6*r10);
IkReal x6209=(sj5*sj6);
IkReal x6210=(r11*sj0);
IkReal x6211=((0.15)*sj3);
IkReal x6212=((0.335)*cj4);
IkReal x6213=(r12*sj0);
IkReal x6214=((0.335)*cj6);
IkReal x6215=((1.11e-6)*sj3);
IkReal x6216=(cj5*sj6);
IkReal x6217=((0.15)*cj3);
IkReal x6218=(cj3*r21);
IkReal x6219=((1.8e-7)*sj6);
IkReal x6220=(cj6*sj5);
IkReal x6221=(cj0*r00);
IkReal x6222=((0.335)*sj4);
IkReal x6223=((1.0)*pz);
IkReal x6224=(cj0*r01);
IkReal x6225=((1.11e-6)*cj3);
IkReal x6226=(cj5*cj6);
IkReal x6227=(cj3*sj0);
IkReal x6228=((1.0)*py);
IkReal x6229=(cj5*r22);
IkReal x6230=(cj5*sj4);
IkReal x6231=((0.335)*sj6);
IkReal x6232=((1.8e-7)*cj6);
IkReal x6233=(cj5*sj0);
IkReal x6234=(sj4*sj5);
IkReal x6235=(r22*sj5);
IkReal x6236=(sj0*sj5);
IkReal x6237=((1.8e-7)*sj0);
IkReal x6238=((0.21066117)*x6206);
IkReal x6239=((0.17676784)*x6207);
IkReal x6240=((0.17676784)*x6206);
IkReal x6241=(cj0*r02*sj5);
IkReal x6242=(cj0*cj5*r02);
IkReal x6243=((0.21066117)*x6207);
IkReal x6244=((1.0)*cj0*px);
IkReal x6245=(x6222*x6233);
evalcond[0]=(((r20*x6232))+(((-1.0)*x6238))+(((-1.0)*x6239))+((r20*x6212*x6226))+(((-1.0)*x6223))+(((-1.11e-6)*x6235))+(((0.15)*x6229))+((x6212*x6235))+((x6222*x6229))+(((-1.0)*r21*x6212*x6216))+(((0.15)*r21*x6209))+(((1.11e-6)*r21*x6216))+(((-1.0)*r21*x6219))+(((-1.0)*r20*x6214*x6234))+(((-1.11e-6)*r20*x6226))+(((-0.15)*r20*x6220))+((r21*x6209*x6222)));
evalcond[1]=((((-1.11e-6)*x6208*x6233))+(((-1.11e-6)*x6221*x6226))+x6240+(((0.15)*x6209*x6224))+((cj5*x6213*x6222))+(((0.15)*x6209*x6210))+(((-1.0)*x6210*x6219))+(((1.11e-6)*x6210*x6216))+(((-1.0)*x6244))+(((-1.0)*x6243))+((x6209*x6210*x6222))+((x6209*x6222*x6224))+(((-1.0)*sj0*x6228))+(((-0.15)*x6220*x6221))+(((0.15)*cj5*x6213))+(((-1.0)*x6214*x6221*x6234))+((x6212*x6241))+(((-1.0)*x6208*x6222*x6236))+(((-1.0)*x6219*x6224))+(((-1.0)*x6210*x6212*x6216))+((sj5*x6212*x6213))+(((-0.15)*x6208*x6236))+((x6208*x6237))+(((-1.11e-6)*x6241))+((x6222*x6242))+(((-1.11e-6)*sj5*x6213))+((x6212*x6221*x6226))+((x6221*x6232))+(((1.11e-6)*x6216*x6224))+((x6208*x6212*x6233))+(((0.15)*x6242))+(((-1.0)*x6212*x6216*x6224)));
evalcond[2]=(((r20*x6215*x6226))+((r21*sj3*x6219))+(((-1.0)*x6210*x6214))+(((-1.0)*r10*sj0*x6231))+(((-1.0)*r20*sj3*x6232))+((sj3*x6238))+((sj3*x6239))+(((-1.0)*x6214*x6224))+(((-1.0)*x6221*x6231))+((pz*sj3))+(((-1.0)*x6211*x6229))+((x6215*x6235))+(((-1.0)*r21*x6209*x6211))+((r20*x6211*x6220))+(((-1.0)*r21*x6215*x6216)));
evalcond[3]=((((-1.0)*x6211*x6220*x6221))+(((-1.0)*x6208*x6211*x6236))+((sj3*x6208*x6237))+((cj5*x6211*x6213))+((sj3*x6240))+(((-1.0)*sj3*x6219*x6224))+((x6210*x6215*x6216))+(((-1.0)*x6208*x6215*x6233))+((x6209*x6210*x6211))+((x6209*x6211*x6224))+(((-1.0)*sj5*x6213*x6215))+(((-1.0)*r21*x6214))+(((-1.0)*sj0*sj3*x6228))+(((-1.0)*r20*x6231))+((x6211*x6242))+(((-1.0)*x6215*x6241))+((x6215*x6216*x6224))+(((-1.0)*sj3*x6210*x6219))+((sj3*x6221*x6232))+(((-1.0)*sj3*x6244))+(((-1.0)*sj3*x6243))+(((-1.0)*x6215*x6221*x6226)));
evalcond[4]=((((-1.0)*x6216*x6222*x6224))+(((-1.0)*x6225*x6235))+(((-1.0)*r20*x6217*x6220))+(((-1.0)*x6212*x6242))+(((-1.0)*x6209*x6210*x6212))+(((-1.0)*cj3*x6239))+(((-1.0)*cj3*x6238))+(((-1.0)*cj5*x6212*x6213))+((x6208*x6245))+((cj3*r20*x6232))+(((-1.0)*cj3*x6223))+((x6212*x6220*x6221))+((x6217*x6229))+((sj5*x6213*x6222))+(((-1.0)*r20*x6225*x6226))+(((1.11e-6)*x6216*x6218))+((x6222*x6241))+((x6214*x6221*x6230))+(((-1.0)*x6218*x6219))+((r21*x6209*x6217))+((x6208*x6212*x6236))+(((-1.0)*x6210*x6216*x6222))+(((-1.0)*x6209*x6212*x6224)));
evalcond[5]=(((x6210*x6216*x6225))+(((-1.0)*cj3*x6210*x6219))+(((-1.0)*x6222*x6235))+(((1.8e-7)*x6208*x6227))+((r21*x6216*x6222))+(((-1.0)*x6225*x6241))+(((-1.0)*r20*x6212*x6220))+((cj5*x6213*x6217))+(((-1.0)*sj5*x6213*x6225))+((x6212*x6229))+(((-1.0)*x6208*x6225*x6233))+((x6209*x6210*x6217))+(((-1.0)*x6221*x6225*x6226))+(((-1.0)*r20*x6214*x6230))+(((-1.0)*cj3*x6243))+(((-1.0)*cj3*x6244))+((x6216*x6224*x6225))+((cj3*x6221*x6232))+(((-1.0)*cj3*x6219*x6224))+((x6217*x6242))+((x6209*x6217*x6224))+(((-1.0)*x6208*x6217*x6236))+((r21*x6209*x6212))+(((-1.0)*x6227*x6228))+((cj3*x6240))+(((-1.0)*x6217*x6220*x6221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x6246=(cj3*sj3);
j2eval[0]=x6246;
j2eval[1]=IKsign(x6246);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6247=(cj1*cj4);
IkReal x6248=(sj1*sj4);
IkReal x6249=(cj6*r20);
IkReal x6250=(r21*sj6);
IkReal x6251=(cj1*sj4);
IkReal x6252=((1.0)*cj5);
IkReal x6253=((1.0)*sj5);
IkReal x6254=(cj4*sj1);
IkReal x6255=(cj5*r22);
IkReal x6256=(r22*x6253);
IkReal x6257=(sj5*x6254);
if( IKabs(((((-1.0)*x6247*x6256))+((x6254*x6255))+(((-1.0)*x6248*x6249*x6252))+((cj5*x6248*x6250))+((sj5*x6249*x6251))+((x6250*x6257))+((cj5*x6247*x6250))+(((-1.0)*x6247*x6249*x6252))+(((-1.0)*x6248*x6256))+(((-1.0)*x6250*x6251*x6253))+(((-1.0)*x6249*x6253*x6254))+(((-1.0)*r22*x6251*x6252)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x6251*x6256))+(((-1.0)*x6250*x6252*x6254))+((r22*x6257))+(((-1.0)*x6248*x6249*x6253))+((sj5*x6248*x6250))+((sj5*x6247*x6250))+(((-1.0)*x6247*x6249*x6253))+((cj5*x6250*x6251))+(((-1.0)*x6249*x6251*x6252))+((x6248*x6255))+((cj5*x6249*x6254))+((x6247*x6255)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x6247*x6256))+((x6254*x6255))+(((-1.0)*x6248*x6249*x6252))+((cj5*x6248*x6250))+((sj5*x6249*x6251))+((x6250*x6257))+((cj5*x6247*x6250))+(((-1.0)*x6247*x6249*x6252))+(((-1.0)*x6248*x6256))+(((-1.0)*x6250*x6251*x6253))+(((-1.0)*x6249*x6253*x6254))+(((-1.0)*r22*x6251*x6252))))+IKsqr(((((-1.0)*x6251*x6256))+(((-1.0)*x6250*x6252*x6254))+((r22*x6257))+(((-1.0)*x6248*x6249*x6253))+((sj5*x6248*x6250))+((sj5*x6247*x6250))+(((-1.0)*x6247*x6249*x6253))+((cj5*x6250*x6251))+(((-1.0)*x6249*x6251*x6252))+((x6248*x6255))+((cj5*x6249*x6254))+((x6247*x6255))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x6247*x6256))+((x6254*x6255))+(((-1.0)*x6248*x6249*x6252))+((cj5*x6248*x6250))+((sj5*x6249*x6251))+((x6250*x6257))+((cj5*x6247*x6250))+(((-1.0)*x6247*x6249*x6252))+(((-1.0)*x6248*x6256))+(((-1.0)*x6250*x6251*x6253))+(((-1.0)*x6249*x6253*x6254))+(((-1.0)*r22*x6251*x6252))), ((((-1.0)*x6251*x6256))+(((-1.0)*x6250*x6252*x6254))+((r22*x6257))+(((-1.0)*x6248*x6249*x6253))+((sj5*x6248*x6250))+((sj5*x6247*x6250))+(((-1.0)*x6247*x6249*x6253))+((cj5*x6250*x6251))+(((-1.0)*x6249*x6251*x6252))+((x6248*x6255))+((cj5*x6249*x6254))+((x6247*x6255))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x6258=IKsin(j2);
IkReal x6259=IKcos(j2);
IkReal x6260=(sj0*sj4);
IkReal x6261=(r11*sj6);
IkReal x6262=(cj5*r12);
IkReal x6263=(sj4*sj6);
IkReal x6264=(cj5*r21);
IkReal x6265=((0.15)*sj0);
IkReal x6266=((1.0)*sj5);
IkReal x6267=(cj0*r02);
IkReal x6268=(cj4*cj5);
IkReal x6269=((1.11e-6)*sj0);
IkReal x6270=((0.15)*cj5);
IkReal x6271=(r12*sj5);
IkReal x6272=((1.11e-6)*cj5);
IkReal x6273=(cj6*r20);
IkReal x6274=((0.15)*sj5);
IkReal x6275=(cj0*r01);
IkReal x6276=(cj4*sj5);
IkReal x6277=(cj6*r10);
IkReal x6278=((1.0)*cj5);
IkReal x6279=(r22*sj4);
IkReal x6280=(r21*sj6);
IkReal x6281=(cj4*sj0);
IkReal x6282=((1.0)*sj0);
IkReal x6283=((1.0)*sj6);
IkReal x6284=((1.11e-6)*sj5);
IkReal x6285=(sj0*x6277);
IkReal x6286=((1.0)*x6258);
IkReal x6287=(cj1*x6258);
IkReal x6288=(cj1*x6259);
IkReal x6289=(cj0*cj6*r00);
IkReal x6290=(sj1*x6259);
IkReal x6291=(sj1*x6286);
IkReal x6292=((1.0)*x6288);
IkReal x6293=(x6292+x6291);
evalcond[0]=(((r21*sj5*x6263))+((r22*x6276))+(((-1.0)*sj4*x6266*x6273))+(((-1.0)*x6290))+x6287+((x6268*x6273))+(((-1.0)*cj4*x6264*x6283))+((cj5*x6279)));
evalcond[1]=((((-1.0)*sj4*x6273*x6278))+((r22*x6268))+((x6263*x6264))+((x6276*x6280))+(((-1.0)*x6293))+(((-1.0)*x6266*x6279))+(((-1.0)*cj4*x6266*x6273)));
evalcond[2]=(((r22*x6270))+(((-1.0)*x6273*x6274))+(((1.11e-6)*sj6*x6264))+(((-1.0)*x6272*x6273))+(((-0.21066117)*sj1))+(((0.335)*x6290))+(((-1.8e-7)*x6280))+((x6274*x6280))+(((-1.0)*r22*x6284))+(((-1.0)*pz))+(((1.8e-7)*x6273))+(((-0.17676784)*cj1))+(((-0.335)*x6287)));
evalcond[3]=((((-1.0)*x6268*x6275*x6283))+((x6268*x6285))+((x6268*x6289))+((x6267*x6276))+((cj5*sj4*x6267))+((x6271*x6281))+(((-1.0)*x6293))+((x6260*x6262))+((sj5*x6260*x6261))+(((-1.0)*x6260*x6266*x6277))+((sj5*x6263*x6275))+(((-1.0)*sj4*x6266*x6289))+(((-1.0)*x6261*x6268*x6282)));
evalcond[4]=(((sj6*x6275*x6276))+x6290+(((-1.0)*x6266*x6277*x6281))+(((-1.0)*cj4*x6266*x6289))+(((-1.0)*r12*x6260*x6266))+((cj5*x6260*x6261))+(((-1.0)*sj4*x6266*x6267))+((cj5*x6263*x6275))+((x6267*x6268))+((x6262*x6281))+((sj0*x6261*x6276))+(((-1.0)*x6260*x6277*x6278))+(((-1.0)*sj4*x6278*x6289))+(((-1.0)*cj1*x6286)));
evalcond[5]=((((-1.8e-7)*sj0*x6261))+(((-0.21066117)*cj1))+(((-1.8e-7)*sj6*x6275))+((sj6*x6274*x6275))+(((-1.0)*py*x6282))+(((1.8e-7)*x6285))+(((1.8e-7)*x6289))+((sj6*x6272*x6275))+((cj5*x6261*x6269))+(((-1.0)*x6267*x6284))+(((0.17676784)*sj1))+((x6267*x6270))+((x6262*x6265))+(((-1.0)*cj5*x6269*x6277))+(((0.335)*x6288))+(((-1.0)*sj5*x6265*x6277))+(((-1.0)*x6269*x6271))+(((0.335)*sj1*x6258))+(((-1.0)*x6272*x6289))+(((-1.0)*x6274*x6289))+((sj5*x6261*x6265))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6294=((1.0)*sj1);
IkReal x6295=(r20*sj6);
IkReal x6296=(cj6*r21);
IkReal x6297=((1.0)*cj1);
IkReal x6298=(cj0*r00*sj6);
IkReal x6299=(cj0*cj6*r01);
IkReal x6300=(r10*sj0*sj6);
IkReal x6301=(cj6*r11*sj0);
if( IKabs(((((-1.0)*x6294*x6296))+(((-1.0)*x6294*x6295))+(((-1.0)*x6297*x6301))+(((-1.0)*x6297*x6300))+(((-1.0)*x6297*x6299))+(((-1.0)*x6297*x6298)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x6296*x6297))+((sj1*x6298))+((sj1*x6299))+(((-1.0)*x6295*x6297))+((sj1*x6300))+((sj1*x6301)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x6294*x6296))+(((-1.0)*x6294*x6295))+(((-1.0)*x6297*x6301))+(((-1.0)*x6297*x6300))+(((-1.0)*x6297*x6299))+(((-1.0)*x6297*x6298))))+IKsqr(((((-1.0)*x6296*x6297))+((sj1*x6298))+((sj1*x6299))+(((-1.0)*x6295*x6297))+((sj1*x6300))+((sj1*x6301))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x6294*x6296))+(((-1.0)*x6294*x6295))+(((-1.0)*x6297*x6301))+(((-1.0)*x6297*x6300))+(((-1.0)*x6297*x6299))+(((-1.0)*x6297*x6298))), ((((-1.0)*x6296*x6297))+((sj1*x6298))+((sj1*x6299))+(((-1.0)*x6295*x6297))+((sj1*x6300))+((sj1*x6301))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x6302=IKcos(j2);
IkReal x6303=IKsin(j2);
IkReal x6304=(sj0*sj4);
IkReal x6305=(r11*sj6);
IkReal x6306=(cj5*r12);
IkReal x6307=((1.0)*cj6);
IkReal x6308=(cj0*r01);
IkReal x6309=((1.0)*sj6);
IkReal x6310=(cj0*cj5);
IkReal x6311=((1.11e-6)*sj0);
IkReal x6312=(r12*sj5);
IkReal x6313=(cj6*r10);
IkReal x6314=(sj4*sj5);
IkReal x6315=(cj0*r00);
IkReal x6316=((0.15)*sj0);
IkReal x6317=((1.8e-7)*sj0);
IkReal x6318=(cj6*r20);
IkReal x6319=(cj4*cj5);
IkReal x6320=((0.15)*sj5);
IkReal x6321=(cj6*r00);
IkReal x6322=(cj5*r22);
IkReal x6323=(r21*sj6);
IkReal x6324=((1.0)*sj0);
IkReal x6325=((1.0)*sj1);
IkReal x6326=((1.11e-6)*cj5);
IkReal x6327=(r22*sj5);
IkReal x6328=(cj1*x6302);
IkReal x6329=(cj1*x6303);
IkReal x6330=(cj0*r02*sj5);
IkReal x6331=(sj1*x6302);
IkReal x6332=(x6303*x6325);
IkReal x6333=((1.0)*x6328);
IkReal x6334=(x6332+x6333);
evalcond[0]=((((-1.0)*r21*x6307))+(((-1.0)*x6334))+(((-1.0)*r20*x6309)));
evalcond[1]=((((-1.0)*x6329))+x6331+(((-1.0)*x6309*x6315))+(((-1.0)*x6307*x6308))+(((-1.0)*r11*sj0*x6307))+(((-1.0)*r10*sj0*x6309)));
evalcond[2]=((((-1.0)*r20*x6307*x6314))+x6329+((x6314*x6323))+((sj4*x6322))+(((-1.0)*x6302*x6325))+(((-1.0)*r21*x6309*x6319))+((cj4*x6327))+((x6318*x6319)));
evalcond[3]=((((-1.0)*x6318*x6326))+(((-1.0)*x6318*x6320))+(((-0.21066117)*sj1))+(((0.335)*x6331))+(((-1.8e-7)*x6323))+((x6323*x6326))+(((1.8e-7)*x6318))+(((-1.0)*pz))+(((0.15)*x6322))+(((-0.17676784)*cj1))+((x6320*x6323))+(((-0.335)*x6329))+(((-1.11e-6)*x6327)));
evalcond[4]=((((-1.0)*r10*sj5*x6304*x6307))+((sj5*x6304*x6305))+((cj4*x6310*x6321))+((r02*sj4*x6310))+(((-1.0)*x6308*x6309*x6319))+(((-1.0)*x6305*x6319*x6324))+((cj4*sj0*x6312))+((x6304*x6306))+(((-1.0)*x6307*x6314*x6315))+((cj4*x6330))+((sj0*x6313*x6319))+(((-1.0)*x6334))+((sj6*x6308*x6314)));
evalcond[5]=((((-1.0)*x6311*x6312))+((x6313*x6317))+(((-1.0)*x6305*x6317))+(((-1.0)*cj5*x6311*x6313))+(((-0.21066117)*cj1))+(((0.17676784)*sj1))+(((0.335)*sj1*x6303))+((sj6*x6308*x6320))+((sj6*x6308*x6326))+((x6306*x6316))+(((-1.11e-6)*x6310*x6321))+(((1.8e-7)*cj6*x6315))+((cj5*x6305*x6311))+(((-1.8e-7)*sj6*x6308))+(((-1.0)*sj5*x6313*x6316))+(((-1.11e-6)*x6330))+((sj5*x6305*x6316))+(((-1.0)*cj6*x6315*x6320))+(((-1.0)*py*x6324))+(((-1.0)*cj0*px))+(((0.335)*x6328))+(((0.15)*r02*x6310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6335=(cj4*sj5);
IkReal x6336=(cj5*sj4);
IkReal x6337=(cj6*r20);
IkReal x6338=(cj4*cj5);
IkReal x6339=(sj4*sj5);
IkReal x6340=((1.0)*sj1);
IkReal x6341=(r21*sj6);
IkReal x6342=((1.0)*cj1);
IkReal x6343=(r22*sj1);
IkReal x6344=(r22*x6342);
IkReal x6345=(x6340*x6341);
if( IKabs((((sj1*x6336*x6337))+((cj1*x6338*x6341))+((sj1*x6335*x6337))+((cj1*x6337*x6339))+(((-1.0)*x6339*x6341*x6342))+((x6339*x6343))+(((-1.0)*x6337*x6338*x6342))+(((-1.0)*r22*x6338*x6340))+(((-1.0)*x6335*x6344))+(((-1.0)*x6335*x6345))+(((-1.0)*x6336*x6344))+(((-1.0)*x6336*x6345)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x6335*x6341*x6342))+((sj1*x6339*x6341))+(((-1.0)*x6337*x6339*x6340))+((x6335*x6343))+((x6336*x6343))+((sj1*x6337*x6338))+(((-1.0)*x6338*x6344))+(((-1.0)*x6338*x6345))+(((-1.0)*x6336*x6341*x6342))+((cj1*r22*x6339))+((cj1*x6335*x6337))+((cj1*x6336*x6337)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x6336*x6337))+((cj1*x6338*x6341))+((sj1*x6335*x6337))+((cj1*x6337*x6339))+(((-1.0)*x6339*x6341*x6342))+((x6339*x6343))+(((-1.0)*x6337*x6338*x6342))+(((-1.0)*r22*x6338*x6340))+(((-1.0)*x6335*x6344))+(((-1.0)*x6335*x6345))+(((-1.0)*x6336*x6344))+(((-1.0)*x6336*x6345))))+IKsqr(((((-1.0)*x6335*x6341*x6342))+((sj1*x6339*x6341))+(((-1.0)*x6337*x6339*x6340))+((x6335*x6343))+((x6336*x6343))+((sj1*x6337*x6338))+(((-1.0)*x6338*x6344))+(((-1.0)*x6338*x6345))+(((-1.0)*x6336*x6341*x6342))+((cj1*r22*x6339))+((cj1*x6335*x6337))+((cj1*x6336*x6337))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x6336*x6337))+((cj1*x6338*x6341))+((sj1*x6335*x6337))+((cj1*x6337*x6339))+(((-1.0)*x6339*x6341*x6342))+((x6339*x6343))+(((-1.0)*x6337*x6338*x6342))+(((-1.0)*r22*x6338*x6340))+(((-1.0)*x6335*x6344))+(((-1.0)*x6335*x6345))+(((-1.0)*x6336*x6344))+(((-1.0)*x6336*x6345))), ((((-1.0)*x6335*x6341*x6342))+((sj1*x6339*x6341))+(((-1.0)*x6337*x6339*x6340))+((x6335*x6343))+((x6336*x6343))+((sj1*x6337*x6338))+(((-1.0)*x6338*x6344))+(((-1.0)*x6338*x6345))+(((-1.0)*x6336*x6341*x6342))+((cj1*r22*x6339))+((cj1*x6335*x6337))+((cj1*x6336*x6337))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x6346=IKcos(j2);
IkReal x6347=IKsin(j2);
IkReal x6348=(sj4*sj6);
IkReal x6349=(sj0*sj5);
IkReal x6350=(cj5*r21);
IkReal x6351=((1.0)*sj4);
IkReal x6352=(cj0*r02);
IkReal x6353=(cj6*r10);
IkReal x6354=((1.0)*cj4);
IkReal x6355=(cj4*cj5);
IkReal x6356=(r11*sj6);
IkReal x6357=((0.15)*cj5);
IkReal x6358=(cj6*sj5);
IkReal x6359=(cj0*r00);
IkReal x6360=((1.8e-7)*sj0);
IkReal x6361=(cj6*r20);
IkReal x6362=((1.11e-6)*cj5);
IkReal x6363=(cj4*sj5);
IkReal x6364=(cj5*sj0);
IkReal x6365=(cj5*sj4);
IkReal x6366=((0.15)*sj6);
IkReal x6367=(r21*sj5);
IkReal x6368=(r21*sj6);
IkReal x6369=(r22*sj5);
IkReal x6370=(cj1*x6347);
IkReal x6371=(cj1*x6346);
IkReal x6372=(r12*x6364);
IkReal x6373=(sj1*x6347);
IkReal x6374=(sj0*x6362);
IkReal x6375=(cj0*r01*sj5);
IkReal x6376=(cj0*r01*sj6);
IkReal x6377=(sj1*x6346);
IkReal x6378=((1.0)*x6377);
evalcond[0]=(x6370+((x6348*x6367))+(((-1.0)*x6378))+((r22*x6363))+((r22*x6365))+((x6355*x6361))+(((-1.0)*sj6*x6350*x6354))+(((-1.0)*r20*x6351*x6358)));
evalcond[1]=(x6371+x6373+((x6348*x6350))+(((-1.0)*r20*x6354*x6358))+(((-1.0)*x6351*x6369))+(((-1.0)*cj5*x6351*x6361))+((r22*x6355))+((x6363*x6368)));
evalcond[2]=((((-1.8e-7)*x6368))+(((-0.21066117)*sj1))+(((-1.0)*x6361*x6362))+(((-0.15)*r20*x6358))+(((1.11e-6)*sj6*x6350))+(((-0.335)*x6370))+(((-1.0)*pz))+((x6366*x6367))+((r22*x6357))+(((-0.17676784)*cj1))+(((-1.11e-6)*x6369))+(((1.8e-7)*x6361))+(((0.335)*x6377)));
evalcond[3]=(((cj6*x6355*x6359))+((r11*x6348*x6349))+(((-1.0)*x6349*x6351*x6353))+(((-1.0)*x6354*x6356*x6364))+(((-1.0)*cj5*x6354*x6376))+(((-1.0)*x6351*x6358*x6359))+((x6348*x6375))+((sj4*x6372))+((cj4*r12*x6349))+((sj0*x6353*x6355))+(((-1.0)*x6373))+(((-1.0)*x6371))+((x6352*x6363))+((x6352*x6365)));
evalcond[4]=((((-1.0)*x6354*x6358*x6359))+x6370+((r11*x6348*x6364))+(((-1.0)*x6351*x6353*x6364))+(((-1.0)*cj5*cj6*x6351*x6359))+(((-1.0)*x6349*x6353*x6354))+(((-1.0)*sj5*x6351*x6352))+((cj4*x6349*x6356))+(((-1.0)*r12*x6349*x6351))+((x6363*x6376))+(((-1.0)*x6378))+((x6352*x6355))+((r12*sj0*x6355))+((cj0*cj5*r01*x6348)));
evalcond[5]=((((0.15)*x6349*x6356))+(((-1.8e-7)*x6376))+((x6353*x6360))+(((-0.21066117)*cj1))+(((-1.11e-6)*sj5*x6352))+(((-1.0)*x6353*x6374))+(((-0.15)*x6349*x6353))+(((1.8e-7)*cj6*x6359))+((x6362*x6376))+(((0.17676784)*sj1))+(((-1.0)*cj6*x6359*x6362))+((x6366*x6375))+((x6356*x6374))+(((-0.15)*x6358*x6359))+(((-1.11e-6)*r12*x6349))+(((-1.0)*py*sj0))+(((-1.0)*x6356*x6360))+((x6352*x6357))+(((-1.0)*cj0*px))+(((0.335)*x6371))+(((0.335)*x6373))+((r12*sj0*x6357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6379=(cj1*sj6);
IkReal x6380=(r10*sj0);
IkReal x6381=(cj0*r00);
IkReal x6382=((1.0)*sj1);
IkReal x6383=(cj1*cj6);
IkReal x6384=(r11*sj0);
IkReal x6385=(sj6*x6382);
IkReal x6386=(cj0*cj6*r01);
if( IKabs((((cj6*r21*sj1))+((x6379*x6380))+((x6379*x6381))+((r20*sj1*sj6))+((x6383*x6384))+((cj0*r01*x6383)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x6380*x6385))+(((-1.0)*x6381*x6385))+(((-1.0)*x6382*x6386))+((r21*x6383))+((r20*x6379))+(((-1.0)*cj6*x6382*x6384)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r21*sj1))+((x6379*x6380))+((x6379*x6381))+((r20*sj1*sj6))+((x6383*x6384))+((cj0*r01*x6383))))+IKsqr(((((-1.0)*x6380*x6385))+(((-1.0)*x6381*x6385))+(((-1.0)*x6382*x6386))+((r21*x6383))+((r20*x6379))+(((-1.0)*cj6*x6382*x6384))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj6*r21*sj1))+((x6379*x6380))+((x6379*x6381))+((r20*sj1*sj6))+((x6383*x6384))+((cj0*r01*x6383))), ((((-1.0)*x6380*x6385))+(((-1.0)*x6381*x6385))+(((-1.0)*x6382*x6386))+((r21*x6383))+((r20*x6379))+(((-1.0)*cj6*x6382*x6384))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x6387=IKsin(j2);
IkReal x6388=IKcos(j2);
IkReal x6389=(sj0*sj4);
IkReal x6390=(r11*sj6);
IkReal x6391=((1.0)*cj6);
IkReal x6392=(cj0*r01);
IkReal x6393=(cj5*r12);
IkReal x6394=((1.0)*sj6);
IkReal x6395=(cj0*cj5);
IkReal x6396=((1.11e-6)*sj0);
IkReal x6397=(r12*sj5);
IkReal x6398=(cj6*r10);
IkReal x6399=(sj4*sj5);
IkReal x6400=(cj0*r00);
IkReal x6401=((0.15)*sj0);
IkReal x6402=((1.8e-7)*sj0);
IkReal x6403=((1.0)*sj1);
IkReal x6404=(cj6*r20);
IkReal x6405=((0.15)*sj5);
IkReal x6406=(cj6*r00);
IkReal x6407=(cj5*r22);
IkReal x6408=(r21*sj6);
IkReal x6409=((1.0)*sj0);
IkReal x6410=((1.11e-6)*cj5);
IkReal x6411=(cj4*cj5);
IkReal x6412=(r22*sj5);
IkReal x6413=(cj1*x6387);
IkReal x6414=(cj1*x6388);
IkReal x6415=(cj0*r02*sj5);
IkReal x6416=(sj1*x6387);
IkReal x6417=(x6388*x6403);
evalcond[0]=((((-1.0)*r21*x6391))+x6414+x6416+(((-1.0)*r20*x6394)));
evalcond[1]=((((-1.0)*r10*sj0*x6394))+(((-1.0)*r11*sj0*x6391))+x6413+(((-1.0)*x6417))+(((-1.0)*x6391*x6392))+(((-1.0)*x6394*x6400)));
evalcond[2]=((((-1.0)*r21*x6394*x6411))+x6413+((sj4*x6407))+((x6404*x6411))+((cj4*x6412))+((x6399*x6408))+(((-1.0)*x6417))+(((-1.0)*r20*x6391*x6399)));
evalcond[3]=(((x6408*x6410))+(((-0.21066117)*sj1))+(((0.15)*x6407))+(((0.335)*sj1*x6388))+(((-1.0)*pz))+(((-1.8e-7)*x6408))+((x6405*x6408))+(((-0.17676784)*cj1))+(((1.8e-7)*x6404))+(((-1.11e-6)*x6412))+(((-0.335)*x6413))+(((-1.0)*x6404*x6410))+(((-1.0)*x6404*x6405)));
evalcond[4]=((((-1.0)*x6387*x6403))+((cj4*x6415))+(((-1.0)*x6390*x6409*x6411))+((sj5*x6389*x6390))+(((-1.0)*x6414))+(((-1.0)*r10*sj5*x6389*x6391))+(((-1.0)*x6392*x6394*x6411))+((sj0*x6398*x6411))+((r02*sj4*x6395))+((cj4*sj0*x6397))+(((-1.0)*x6391*x6399*x6400))+((sj6*x6392*x6399))+((cj4*x6395*x6406))+((x6389*x6393)));
evalcond[5]=(((sj5*x6390*x6401))+(((-1.0)*x6390*x6402))+(((-1.0)*cj5*x6396*x6398))+(((-1.0)*py*x6409))+(((-0.21066117)*cj1))+((x6393*x6401))+(((-1.0)*sj5*x6398*x6401))+((cj5*x6390*x6396))+(((0.17676784)*sj1))+(((-1.0)*cj6*x6400*x6405))+(((0.335)*x6414))+(((0.335)*x6416))+(((1.8e-7)*cj6*x6400))+(((0.15)*r02*x6395))+(((-1.11e-6)*x6395*x6406))+((x6398*x6402))+(((-1.0)*x6396*x6397))+(((-1.11e-6)*x6415))+((sj6*x6392*x6405))+(((-1.8e-7)*sj6*x6392))+(((-1.0)*cj0*px))+((sj6*x6392*x6410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6418=(cj3*sj0);
IkReal x6419=(r10*sj6);
IkReal x6420=((1.0)*cj1);
IkReal x6421=(cj6*sj1);
IkReal x6422=(cj0*cj3);
IkReal x6423=(sj3*sj4);
IkReal x6424=(sj1*sj5);
IkReal x6425=(r00*sj6);
IkReal x6426=(cj5*r20);
IkReal x6427=(r21*sj6);
IkReal x6428=(cj5*r22);
IkReal x6429=(cj4*sj3);
IkReal x6430=(r20*sj5);
IkReal x6431=(cj1*x6429);
CheckValue<IkReal> x6432=IKPowWithIntegerCheck(IKsign((cj3*sj3)),-1);
if(!x6432.valid){
continue;
}
CheckValue<IkReal> x6433 = IKatan2WithCheck(IkReal(((((-1.0)*x6421*x6423*x6426))+(((-1.0)*r22*x6423*x6424))+((x6424*x6427*x6429))+((cj5*sj1*x6423*x6427))+(((-1.0)*x6421*x6429*x6430))+(((-1.0)*cj6*r01*x6420*x6422))+((sj1*x6428*x6429))+(((-1.0)*x6418*x6419*x6420))+(((-1.0)*cj6*r11*x6418*x6420))+(((-1.0)*x6420*x6422*x6425)))),IkReal((((sj1*x6418*x6419))+(((-1.0)*r22*sj5*x6420*x6423))+((sj5*x6427*x6431))+((cj1*cj5*x6423*x6427))+((r01*x6421*x6422))+(((-1.0)*cj6*x6420*x6423*x6426))+(((-1.0)*cj6*x6420*x6429*x6430))+((r11*x6418*x6421))+((sj1*x6422*x6425))+((x6428*x6431)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6433.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6432.value)))+(x6433.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x6434=IKcos(j2);
IkReal x6435=IKsin(j2);
IkReal x6436=(cj6*sj5);
IkReal x6437=((1.0)*sj3);
IkReal x6438=((1.0)*r20);
IkReal x6439=((1.0)*cj6);
IkReal x6440=(r12*sj0);
IkReal x6441=(cj0*r02);
IkReal x6442=((1.11e-6)*sj5);
IkReal x6443=((1.0)*cj3);
IkReal x6444=(cj5*r22);
IkReal x6445=(cj6*r20);
IkReal x6446=((1.11e-6)*cj5);
IkReal x6447=(cj4*cj5);
IkReal x6448=(sj4*sj6);
IkReal x6449=(r11*sj0);
IkReal x6450=((1.8e-7)*sj6);
IkReal x6451=(cj0*r00);
IkReal x6452=((0.15)*sj6);
IkReal x6453=((1.0)*cj0);
IkReal x6454=(r01*sj6);
IkReal x6455=((1.0)*sj6);
IkReal x6456=(cj4*sj5);
IkReal x6457=(cj0*r01);
IkReal x6458=(cj5*sj4);
IkReal x6459=(r10*sj0);
IkReal x6460=((0.15)*cj5);
IkReal x6461=((1.8e-7)*cj6);
IkReal x6462=((1.0)*x6459);
IkReal x6463=(cj1*x6435);
IkReal x6464=(cj6*x6458);
IkReal x6465=(r21*sj5*sj6);
IkReal x6466=((1.0)*sj4*sj5);
IkReal x6467=(sj1*x6434);
IkReal x6468=(sj5*x6457);
IkReal x6469=(cj1*x6434);
IkReal x6470=(sj1*x6435);
evalcond[0]=((((-1.0)*x6437*x6470))+(((-1.0)*x6437*x6469))+(((-1.0)*sj6*x6438))+(((-1.0)*r21*x6439)));
evalcond[1]=((((-1.0)*x6437*x6463))+(((-1.0)*x6451*x6455))+(((-1.0)*x6439*x6449))+(((-1.0)*x6439*x6457))+(((-1.0)*x6455*x6459))+((sj3*x6467)));
evalcond[2]=(((r21*sj5*x6448))+((x6445*x6447))+(((-1.0)*r21*x6447*x6455))+((sj4*x6444))+x6463+((r22*x6456))+(((-1.0)*sj4*x6436*x6438))+(((-1.0)*x6467)));
evalcond[3]=((((-1.0)*x6438*x6464))+(((-1.0)*x6443*x6470))+(((-1.0)*x6443*x6469))+(((-1.0)*r22*x6466))+((cj5*r21*x6448))+((r21*sj6*x6456))+((cj4*x6444))+(((-1.0)*cj4*x6436*x6438)));
evalcond[4]=(((r21*sj5*x6452))+(((-0.21066117)*sj1))+(((-0.15)*r20*x6436))+(((0.335)*x6467))+(((1.8e-7)*x6445))+(((-1.0)*pz))+(((-1.0)*x6445*x6446))+(((-0.17676784)*cj1))+((r21*sj6*x6446))+(((-1.0)*r22*x6442))+(((-1.0)*r21*x6450))+(((-0.335)*x6463))+(((0.15)*x6444)));
evalcond[5]=(((sj5*x6448*x6449))+((x6440*x6456))+((x6440*x6458))+(((-1.0)*x6447*x6449*x6455))+(((-1.0)*sj4*x6436*x6451))+(((-1.0)*sj4*x6436*x6462))+((cj6*x6447*x6451))+((cj6*x6447*x6459))+(((-1.0)*x6469))+((x6448*x6468))+(((-1.0)*x6470))+(((-1.0)*x6447*x6453*x6454))+((x6441*x6458))+((x6441*x6456)));
evalcond[6]=((((-1.0)*x6441*x6466))+(((-1.0)*x6440*x6466))+(((-1.0)*x6443*x6463))+(((-1.0)*x6439*x6458*x6459))+((x6440*x6447))+((cj5*x6448*x6457))+((cj5*x6448*x6449))+(((-1.0)*x6439*x6451*x6458))+(((-1.0)*cj4*x6436*x6451))+((sj6*x6449*x6456))+((cj3*x6467))+((x6441*x6447))+(((-1.0)*cj4*x6436*x6462))+((cj0*x6454*x6456)));
evalcond[7]=(((sj5*x6449*x6452))+(((-0.21066117)*cj1))+(((-1.0)*x6449*x6450))+(((0.335)*x6469))+(((0.17676784)*sj1))+((x6440*x6460))+((sj6*x6446*x6449))+(((-1.0)*cj6*x6446*x6459))+(((-1.0)*cj6*x6446*x6451))+((cj0*x6446*x6454))+(((0.335)*x6470))+(((-1.0)*px*x6453))+((x6452*x6468))+(((-1.0)*x6450*x6457))+(((-1.0)*py*sj0))+(((-0.15)*x6436*x6451))+(((-0.15)*x6436*x6459))+((x6451*x6461))+((x6441*x6460))+((x6459*x6461))+(((-1.0)*x6440*x6442))+(((-1.0)*x6441*x6442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6471=((1.0)*sj1);
IkReal x6472=(r20*sj6);
IkReal x6473=(cj6*r21);
IkReal x6474=((1.0)*cj1);
IkReal x6475=(cj0*r00*sj6);
IkReal x6476=(cj0*cj6*r01);
IkReal x6477=(r10*sj0*sj6);
IkReal x6478=(cj6*r11*sj0);
CheckValue<IkReal> x6479 = IKatan2WithCheck(IkReal(((((-1.0)*x6471*x6472))+(((-1.0)*x6471*x6473))+(((-1.0)*x6474*x6478))+(((-1.0)*x6474*x6475))+(((-1.0)*x6474*x6477))+(((-1.0)*x6474*x6476)))),IkReal(((((-1.0)*x6473*x6474))+(((-1.0)*x6472*x6474))+((sj1*x6475))+((sj1*x6476))+((sj1*x6477))+((sj1*x6478)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6479.valid){
continue;
}
CheckValue<IkReal> x6480=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x6480.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x6479.value)+(((1.5707963267949)*(x6480.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x6481=IKcos(j2);
IkReal x6482=IKsin(j2);
IkReal x6483=(cj6*sj5);
IkReal x6484=((1.0)*sj3);
IkReal x6485=((1.0)*r20);
IkReal x6486=((1.0)*cj6);
IkReal x6487=(r12*sj0);
IkReal x6488=(cj0*r02);
IkReal x6489=((1.11e-6)*sj5);
IkReal x6490=((1.0)*cj3);
IkReal x6491=(cj5*r22);
IkReal x6492=(cj6*r20);
IkReal x6493=((1.11e-6)*cj5);
IkReal x6494=(cj4*cj5);
IkReal x6495=(sj4*sj6);
IkReal x6496=(r11*sj0);
IkReal x6497=((1.8e-7)*sj6);
IkReal x6498=(cj0*r00);
IkReal x6499=((0.15)*sj6);
IkReal x6500=((1.0)*cj0);
IkReal x6501=(r01*sj6);
IkReal x6502=((1.0)*sj6);
IkReal x6503=(cj4*sj5);
IkReal x6504=(cj0*r01);
IkReal x6505=(cj5*sj4);
IkReal x6506=(r10*sj0);
IkReal x6507=((0.15)*cj5);
IkReal x6508=((1.8e-7)*cj6);
IkReal x6509=((1.0)*x6506);
IkReal x6510=(cj1*x6482);
IkReal x6511=(cj6*x6505);
IkReal x6512=(r21*sj5*sj6);
IkReal x6513=((1.0)*sj4*sj5);
IkReal x6514=(sj1*x6481);
IkReal x6515=(sj5*x6504);
IkReal x6516=(cj1*x6481);
IkReal x6517=(sj1*x6482);
evalcond[0]=((((-1.0)*r21*x6486))+(((-1.0)*x6484*x6516))+(((-1.0)*x6484*x6517))+(((-1.0)*sj6*x6485)));
evalcond[1]=((((-1.0)*x6484*x6510))+((sj3*x6514))+(((-1.0)*x6486*x6496))+(((-1.0)*x6498*x6502))+(((-1.0)*x6502*x6506))+(((-1.0)*x6486*x6504)));
evalcond[2]=(((sj4*x6491))+((x6492*x6494))+((r22*x6503))+x6510+((r21*sj5*x6495))+(((-1.0)*r21*x6494*x6502))+(((-1.0)*sj4*x6483*x6485))+(((-1.0)*x6514)));
evalcond[3]=((((-1.0)*r22*x6513))+(((-1.0)*x6485*x6511))+((r21*sj6*x6503))+((cj5*r21*x6495))+((cj4*x6491))+(((-1.0)*cj4*x6483*x6485))+(((-1.0)*x6490*x6516))+(((-1.0)*x6490*x6517)));
evalcond[4]=((((-0.15)*r20*x6483))+(((-0.335)*x6510))+(((-0.21066117)*sj1))+((r21*sj6*x6493))+(((-1.0)*r22*x6489))+(((-1.0)*pz))+(((0.335)*x6514))+(((-0.17676784)*cj1))+(((-1.0)*x6492*x6493))+(((0.15)*x6491))+((r21*sj5*x6499))+(((1.8e-7)*x6492))+(((-1.0)*r21*x6497)));
evalcond[5]=(((x6488*x6503))+((x6488*x6505))+(((-1.0)*x6494*x6500*x6501))+((cj6*x6494*x6506))+(((-1.0)*x6494*x6496*x6502))+((x6495*x6515))+(((-1.0)*sj4*x6483*x6509))+((x6487*x6505))+((x6487*x6503))+((cj6*x6494*x6498))+(((-1.0)*sj4*x6483*x6498))+((sj5*x6495*x6496))+(((-1.0)*x6516))+(((-1.0)*x6517)));
evalcond[6]=((((-1.0)*x6486*x6498*x6505))+((cj0*x6501*x6503))+((cj3*x6514))+(((-1.0)*x6486*x6505*x6506))+((x6487*x6494))+(((-1.0)*x6487*x6513))+((cj5*x6495*x6504))+((cj5*x6495*x6496))+(((-1.0)*cj4*x6483*x6509))+((sj6*x6496*x6503))+(((-1.0)*cj4*x6483*x6498))+(((-1.0)*x6490*x6510))+(((-1.0)*x6488*x6513))+((x6488*x6494)));
evalcond[7]=(((sj5*x6496*x6499))+(((-1.0)*x6487*x6489))+((x6499*x6515))+((x6488*x6507))+(((-1.0)*x6488*x6489))+(((-0.21066117)*cj1))+(((-1.0)*cj6*x6493*x6498))+((x6498*x6508))+(((0.17676784)*sj1))+((cj0*x6493*x6501))+(((-0.15)*x6483*x6506))+(((-1.0)*x6497*x6504))+((x6487*x6507))+(((0.335)*x6516))+(((0.335)*x6517))+(((-1.0)*py*sj0))+(((-1.0)*cj6*x6493*x6506))+(((-1.0)*px*x6500))+(((-1.0)*x6496*x6497))+((x6506*x6508))+(((-0.15)*x6483*x6498))+((sj6*x6493*x6496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - engineer (32b876c65522ea7a17ffa14db9f32166)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004b"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
